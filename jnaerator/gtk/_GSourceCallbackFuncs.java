package gtk;
import _GSourceCallbackFuncs.GSourceFunc;
import gtk.GtkLibrary.GSource;
import gtk.GtkLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : glib-2.0/glib/gmain.h:167</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("Gtk") 
public class _GSourceCallbackFuncs extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : ref_callback* */
	@Field(0) 
	public Pointer<_GSourceCallbackFuncs.ref_callback > ref() {
		return this.io.getPointerField(this, 0);
	}
	/** C type : ref_callback* */
	@Field(0) 
	public _GSourceCallbackFuncs ref(Pointer<_GSourceCallbackFuncs.ref_callback > ref) {
		this.io.setPointerField(this, 0, ref);
		return this;
	}
	/** C type : unref_callback* */
	@Field(1) 
	public Pointer<_GSourceCallbackFuncs.unref_callback > unref() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : unref_callback* */
	@Field(1) 
	public _GSourceCallbackFuncs unref(Pointer<_GSourceCallbackFuncs.unref_callback > unref) {
		this.io.setPointerField(this, 1, unref);
		return this;
	}
	/** C type : get_callback* */
	@Field(2) 
	public Pointer<_GSourceCallbackFuncs.get_callback > get() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : get_callback* */
	@Field(2) 
	public _GSourceCallbackFuncs get(Pointer<_GSourceCallbackFuncs.get_callback > get) {
		this.io.setPointerField(this, 2, get);
		return this;
	}
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static abstract class ref_callback extends Callback<ref_callback > {
		public final void apply(gpointer cb_data) {
			apply(Pointer.getPeer(cb_data));
		}
		public abstract void apply(@Ptr long cb_data);
	};
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static abstract class unref_callback extends Callback<unref_callback > {
		public final void apply(gpointer cb_data) {
			apply(Pointer.getPeer(cb_data));
		}
		public abstract void apply(@Ptr long cb_data);
	};
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static abstract class get_callback extends Callback<get_callback > {
		public final void apply(gpointer cb_data, Pointer<GSource > source, Pointer<GSourceFunc > func, Pointer<gpointer > data) {
			apply(Pointer.getPeer(cb_data), Pointer.getPeer(source), Pointer.getPeer(func), Pointer.getPeer(data));
		}
		public abstract void apply(@Ptr long cb_data, @Ptr long source, @Ptr long func, @Ptr long data);
	};
	public _GSourceCallbackFuncs() {
		super();
	}
	public _GSourceCallbackFuncs(Pointer pointer) {
		super(pointer);
	}
}
