package gtk;
import _GSourceCallbackFuncs.GSourceFunc;
import gtk.GtkLibrary.GSource;
import gtk.GtkLibrary.gboolean;
import gtk.GtkLibrary.gint;
import gtk.GtkLibrary.gpointer;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : glib-2.0/glib/gmain.h:185</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("Gtk") 
public abstract class _GSourceFuncs extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : prepare_callback* */
	@Field(0) 
	public Pointer<_GSourceFuncs.prepare_callback > prepare() {
		return this.io.getPointerField(this, 0);
	}
	/** C type : prepare_callback* */
	@Field(0) 
	public _GSourceFuncs prepare(Pointer<_GSourceFuncs.prepare_callback > prepare) {
		this.io.setPointerField(this, 0, prepare);
		return this;
	}
	/** C type : check_callback* */
	@Field(1) 
	public Pointer<_GSourceFuncs.check_callback > check() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : check_callback* */
	@Field(1) 
	public _GSourceFuncs check(Pointer<_GSourceFuncs.check_callback > check) {
		this.io.setPointerField(this, 1, check);
		return this;
	}
	/** C type : dispatch_callback* */
	@Field(2) 
	public Pointer<_GSourceFuncs.dispatch_callback > dispatch() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : dispatch_callback* */
	@Field(2) 
	public _GSourceFuncs dispatch(Pointer<_GSourceFuncs.dispatch_callback > dispatch) {
		this.io.setPointerField(this, 2, dispatch);
		return this;
	}
	/**
	 * Can be NULL<br>
	 * C type : finalize_callback*
	 */
	@Field(3) 
	public Pointer<_GSourceFuncs.finalize_callback > finalize$() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * Can be NULL<br>
	 * C type : finalize_callback*
	 */
	@Field(3) 
	public _GSourceFuncs finalize$(Pointer<_GSourceFuncs.finalize_callback > finalize$) {
		this.io.setPointerField(this, 3, finalize$);
		return this;
	}
	/** Conversion Error : GSourceFunc (failed to convert type to Java (undefined type)) */
	/** Conversion Error : GSourceDummyMarshal (failed to convert type to Java (undefined type)) */
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static abstract class prepare_callback extends Callback<prepare_callback > {
		public final gboolean apply(Pointer<GSource > source, Pointer<gint > timeout_) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(source), Pointer.getPeer(timeout_)), .class);
		}
		@Ptr 
		public abstract long apply(@Ptr long source, @Ptr long timeout_);
	};
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static abstract class check_callback extends Callback<check_callback > {
		public final gboolean apply(Pointer<GSource > source) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(source)), .class);
		}
		@Ptr 
		public abstract long apply(@Ptr long source);
	};
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static abstract class dispatch_callback extends Callback<dispatch_callback > {
		public final gboolean apply(Pointer<GSource > source, GSourceFunc callback, gpointer user_data) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(source), Pointer.getPeer(callback), Pointer.getPeer(user_data)), .class);
		}
		@Ptr 
		public abstract long apply(@Ptr long source, @Ptr long callback, @Ptr long user_data);
	};
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static abstract class finalize_callback extends Callback<finalize_callback > {
		public final void apply(Pointer<GSource > source) {
			apply(Pointer.getPeer(source));
		}
		public abstract void apply(@Ptr long source);
	};
}
