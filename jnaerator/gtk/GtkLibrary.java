package gtk;
import _GFloatIEEE754.guint;
import _GIOFuncs.GError;
import _GIOFuncs.GIOChannel;
import _GIOFuncs.GIOCondition;
import _GIOFuncs.GIOFlags;
import _GIOFuncs.GIOStatus;
import _GIOFuncs.GSeekType;
import _GIOFuncs.gint64;
import _GMarkupParser.GMarkupParseContext;
import _GMemVTable.gsize;
import _GSourceCallbackFuncs.GSourceFunc;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.cpp.CPPRuntime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>Gtk</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("Gtk") 
@Runtime(CPPRuntime.class) 
public class GtkLibrary {
	static {
		BridJ.register();
	}
	/** <i>native declaration : glib-2.0/glib/gurifuncs.h</i> */
	public static final String G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = (String)"!$&'()*+,;=";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_TRY_EXEC = (String)"TryExec";
	/** <i>native declaration : glib-2.0/glib/gscanner.h</i> */
	public static final String G_CSET_A_2_Z = (String)"ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_DICTIONARY = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("a{?*}"));
	/** <i>native declaration : glib-2.0/glib/gscanner.h</i> */
	public static final String G_CSET_LATINS = (String)"\337\340\341\342\343\344\345\346";
	/** <i>native declaration : glib-2.0/glib/gscanner.h</i> */
	public static final String G_CSET_LATINC = (String)"\300\301\302\303\304\305\306";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_TUPLE = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("r"));
	/** <i>native declaration : glib-2.0/glib/gstrfuncs.h</i> */
	public static final int G_ASCII_DTOSTR_BUF_SIZE = (int)(29 + 10);
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_BYTESTRING = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("ay"));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_VARIANT = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("v"));
	/** <i>native declaration : glib-2.0/glib/gmessages.h</i> */
	public static final Pointer<GtkLibrary.gchar > G_LOG_DOMAIN = (Pointer<GtkLibrary.gchar >)(Pointer.pointerToAddress(0));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_HANDLE = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("h"));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_UNIT = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("()"));
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_CUR_STABLE = (int)((2) << 16 | (38) << 8);
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_ACTIONS = (String)"Actions";
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_MAX_ALLOWED = (int)((2) << 16 | (38) << 8);
	/** <i>native declaration : glib-2.0/glib/gstrfuncs.h</i> */
	public static final String G_STR_DELIMITERS = (String)"_-|> <.";
	/** <i>native declaration : glib-2.0/glib/gpoll.h</i> */
	public static final String G_POLLFD_FORMAT = (String)"%d";
	/** <i>native declaration : glib-2.0/glib/gdate.h</i> */
	public static final int G_DATE_BAD_DAY = (int)0;
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final int G_IEEE754_DOUBLE_BIAS = (int)(1023);
	/** <i>native declaration : glib-2.0/glib/gfileutils.h</i> */
	public static final String G_DIR_SEPARATOR_S = (String)"/";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = (String)"StartupWMClass";
	/** <i>native declaration : glib-2.0/glib/gtimer.h</i> */
	public static final int G_USEC_PER_SEC = (int)1000000;
	/** <i>native declaration : glib-2.0/glib/gdataset.h</i> */
	public static final int G_DATALIST_FLAGS_MASK = (int)0x3;
	/**
	 * define<br>
	 * Conversion Error : { 0, 0, 0 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:0</i><br>
	 * { 0, 0, 0 }
	 */
	/** <i>native declaration : glib-2.0/glib/gmessages.h</i> */
	public static final int G_LOG_LEVEL_USER_SHIFT = (int)(8);
	/** <i>native declaration : glib-2.0/glib/gmem.h</i> */
	public static final int G_MEM_ALIGN = (int)4;
	/** <i>native declaration : glib-2.0/glib/gmacros.h</i> */
	public static final int G_ANALYZER_ANALYZING = (int)0;
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY = (String)"NoDisplay";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_ICON = (String)"Icon";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_PI_4 = (double)0.78539816339744830961566084581987572104929234984378;
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_PI_2 = (double)1.5707963267948966192313216916397514420985846996876;
	/**
	 * define<br>
	 * Conversion Error : (!(0))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:0</i><br>
	 * (!(0))
	 */
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final int G_IEEE754_FLOAT_BIAS = (int)(127);
	/** <i>native declaration : glib-2.0/glib/gscanner.h</i> */
	public static final String G_CSET_DIGITS = (String)"0123456789";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final int G_LITTLE_ENDIAN = (int)1234;
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_INT32 = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("i"));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_INT16 = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("n"));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_BASIC = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("?"));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = (String)"DBusActivatable";
	/** <i>native declaration : glib-2.0/glib/gmacros.h</i> */
	public static final String G_STRLOC = (String)"<no file>";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_INT64 = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("x"));
	/** <i>native declaration : glib-2.0/glib/gscanner.h</i> */
	public static final String G_CSET_a_2_z = (String)"abcdefghijklmnopqrstuvwxyz";
	/** <i>native declaration : glib-2.0/glib/gurifuncs.h</i> */
	public static final String G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT = (String)"!$&'()*+,;=";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_SQRT2 = (double)1.4142135623730950488016887242096980785696718753769;
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_LN2 = (double)0.69314718055994530941723212145817656807550013436026;
	/** <i>native declaration : glib-2.0/glib/gdate.h</i> */
	public static final int G_DATE_BAD_YEAR = (int)0;
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_VARDICT = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("a{sv}"));
	/** <i>native declaration : glib-2.0/glib/gurifuncs.h</i> */
	public static final String G_URI_RESERVED_CHARS_ALLOWED_IN_PATH = (String)"!$&'()*+,;=";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_BYTESTRING_ARRAY = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("aay"));
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_PREV_STABLE = (int)((2) << 16 | (38 - 2) << 8);
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static final int G_PRIORITY_DEFAULT = (int)0;
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_TYPE = (String)"Type";
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static final int G_PRIORITY_HIGH_IDLE = (int)100;
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME = (String)"GenericName";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_STRING_ARRAY = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("as"));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_HIDDEN = (String)"Hidden";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_MIME_TYPE = (String)"MimeType";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_GROUP = (String)"Desktop Entry";
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static final int G_PRIORITY_DEFAULT_IDLE = (int)200;
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static final int G_PRIORITY_LOW = (int)300;
	/** <i>native declaration : glib-2.0/glib/gfileutils.h</i> */
	public static final char G_DIR_SEPARATOR = (char)'/';
	/** <i>native declaration : glib-2.0/glib/gmacros.h</i> */
	public static final String G_GNUC_FUNCTION = (String)"";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_LOG_2_BASE_10 = (double)(0.30102999566398119521);
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_DOUBLE = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("d"));
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static final int G_PRIORITY_HIGH = (int)-100;
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_MAYBE = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("m*"));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_OBJECT_PATH = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("o"));
	/** <i>native declaration : glib-2.0/glib/gurifuncs.h</i> */
	public static final String G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO = (String)"!$&'()*+,;=";
	/** <i>native declaration : glib-2.0/glib/gmain.h</i> */
	public static final int G_SOURCE_REMOVE = (int)(0);
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_UINT16 = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("q"));
	/** <i>native declaration : glib-2.0/glib/goption.h</i> */
	public static final String G_OPTION_REMAINING = (String)"";
	/** <i>native declaration : glib-2.0/glib/gmacros.h</i> */
	public static final String G_GNUC_PRETTY_FUNCTION = (String)"";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_E = (double)2.7182818284590452353602874713526624977572470937000;
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_UINT32 = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("u"));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_ANY = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("*"));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_DICT_ENTRY = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("{?*}"));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_EXEC = (String)"Exec";
	/** <i>native declaration : glib-2.0/glib/gmacros.h</i> */
	public static final int FALSE = (int)(0);
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_UINT64 = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("t"));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_TYPE_DIRECTORY = (String)"Directory";
	/** <i>native declaration : glib-2.0/glib/ghook.h</i> */
	public static final int G_HOOK_FLAG_USER_SHIFT = (int)(4);
	/** <i>native declaration : glib-2.0/glib/gdate.h</i> */
	public static final int G_DATE_BAD_JULIAN = (int)0;
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_OBJECT_PATH_ARRAY = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("ao"));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_STRING = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("s"));
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final int G_BIG_ENDIAN = (int)4321;
	/** <i>native declaration : glib-2.0/glib/gfileutils.h</i> */
	public static final char G_SEARCHPATH_SEPARATOR = (char)':';
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_ARRAY = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("a*"));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_VERSION = (String)"Version";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_TYPE_LINK = (String)"Link";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = (String)"StartupNotify";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_BYTE = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("y"));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = (String)"OnlyShowIn";
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_MIN_REQUIRED = (int)((2) << 16 | (38) << 8);
	/** <i>native declaration : glib-2.0/glib/gunicode.h</i> */
	public static final int G_UNICHAR_MAX_DECOMPOSITION_LENGTH = (int)18;
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_COMMENT = (String)"Comment";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_TYPE_APPLICATION = (String)"Application";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = (String)"NotShowIn";
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_BOOLEAN = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("b"));
	/** <i>native declaration : glib-2.0/glib/gvarianttype.h</i> */
	public static final Pointer<GtkLibrary.GVariantType > G_VARIANT_TYPE_SIGNATURE = (Pointer<GtkLibrary.GVariantType >)(Pointer.pointerToCString("g"));
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_TERMINAL = (String)"Terminal";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_PI = (double)3.1415926535897932384626433832795028841971693993751;
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_PATH = (String)"Path";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_URL = (String)"URL";
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_38 = (int)((2) << 16 | (38) << 8);
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_36 = (int)((2) << 16 | (36) << 8);
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_30 = (int)((2) << 16 | (30) << 8);
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_34 = (int)((2) << 16 | (34) << 8);
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_32 = (int)((2) << 16 | (32) << 8);
	/** <i>native declaration : glib-2.0/glib/gfileutils.h</i> */
	public static final String G_SEARCHPATH_SEPARATOR_S = (String)":";
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_CATEGORIES = (String)"Categories";
	/** <i>native declaration : glib-2.0/glib/gurifuncs.h</i> */
	public static final String G_URI_RESERVED_CHARS_GENERIC_DELIMITERS = (String)":/?#[]@";
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final int G_PDP_ENDIAN = (int)3412;
	/** <i>native declaration : glib-2.0/glib/gkeyfile.h</i> */
	public static final String G_KEY_FILE_DESKTOP_KEY_NAME = (String)"Name";
	/**
	 * define<br>
	 * Conversion Error : (!(0))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : glib-2.0/glib/gmacros.h:0</i><br>
	 * (!(0))
	 */
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_26 = (int)((2) << 16 | (26) << 8);
	/** <i>native declaration : glib-2.0/glib/gversionmacros.h</i> */
	public static final int GLIB_VERSION_2_28 = (int)((2) << 16 | (28) << 8);
	/** <i>native declaration : glib-2.0/glib/gtypes.h</i> */
	public static final double G_LN10 = (double)2.3025850929940456840179914546843642076011014886288;
	/**
	 * Original signature : <code>GArray* g_array_new(gboolean, gboolean, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:37</i>
	 */
	public static Pointer<GtkLibrary.GArray > g_array_new(GtkLibrary.gboolean zero_terminated, GtkLibrary.gboolean clear_, guint element_size) {
		return Pointer.pointerToAddress(g_array_new(Pointer.getPeer(zero_terminated), Pointer.getPeer(clear_), Pointer.getPeer(element_size)), GtkLibrary.GArray.class);
	}
	@Ptr 
	protected native static long g_array_new(@Ptr long zero_terminated, @Ptr long clear_, @Ptr long element_size);
	/**
	 * Original signature : <code>GArray* g_array_sized_new(gboolean, gboolean, guint, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:41</i>
	 */
	public static Pointer<GtkLibrary.GArray > g_array_sized_new(GtkLibrary.gboolean zero_terminated, GtkLibrary.gboolean clear_, guint element_size, guint reserved_size) {
		return Pointer.pointerToAddress(g_array_sized_new(Pointer.getPeer(zero_terminated), Pointer.getPeer(clear_), Pointer.getPeer(element_size), Pointer.getPeer(reserved_size)), GtkLibrary.GArray.class);
	}
	@Ptr 
	protected native static long g_array_sized_new(@Ptr long zero_terminated, @Ptr long clear_, @Ptr long element_size, @Ptr long reserved_size);
	/**
	 * Original signature : <code>gchar* g_array_free(GArray*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:46</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_array_free(Pointer<GtkLibrary.GArray > array, GtkLibrary.gboolean free_segment) {
		return Pointer.pointerToAddress(g_array_free(Pointer.getPeer(array), Pointer.getPeer(free_segment)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_array_free(@Ptr long array, @Ptr long free_segment);
	/**
	 * Original signature : <code>GArray* g_array_ref(GArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:49</i>
	 */
	public static Pointer<GtkLibrary.GArray > g_array_ref(Pointer<GtkLibrary.GArray > array) {
		return Pointer.pointerToAddress(g_array_ref(Pointer.getPeer(array)), GtkLibrary.GArray.class);
	}
	@Ptr 
	protected native static long g_array_ref(@Ptr long array);
	/**
	 * Original signature : <code>void g_array_unref(GArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:51</i>
	 */
	public static void g_array_unref(Pointer<GtkLibrary.GArray > array) {
		g_array_unref(Pointer.getPeer(array));
	}
	protected native static void g_array_unref(@Ptr long array);
	/**
	 * Original signature : <code>guint g_array_get_element_size(GArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:53</i>
	 */
	public static guint g_array_get_element_size(Pointer<GtkLibrary.GArray > array) {
		return Pointer.pointerToAddress(g_array_get_element_size(Pointer.getPeer(array)), .class);
	}
	@Ptr 
	protected native static long g_array_get_element_size(@Ptr long array);
	/**
	 * Original signature : <code>GArray* g_array_append_vals(GArray*, gconstpointer, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:55</i>
	 */
	public static Pointer<GtkLibrary.GArray > g_array_append_vals(Pointer<GtkLibrary.GArray > array, GtkLibrary.gconstpointer data, guint len) {
		return Pointer.pointerToAddress(g_array_append_vals(Pointer.getPeer(array), Pointer.getPeer(data), Pointer.getPeer(len)), GtkLibrary.GArray.class);
	}
	@Ptr 
	protected native static long g_array_append_vals(@Ptr long array, @Ptr long data, @Ptr long len);
	/**
	 * Original signature : <code>GArray* g_array_prepend_vals(GArray*, gconstpointer, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:59</i>
	 */
	public static Pointer<GtkLibrary.GArray > g_array_prepend_vals(Pointer<GtkLibrary.GArray > array, GtkLibrary.gconstpointer data, guint len) {
		return Pointer.pointerToAddress(g_array_prepend_vals(Pointer.getPeer(array), Pointer.getPeer(data), Pointer.getPeer(len)), GtkLibrary.GArray.class);
	}
	@Ptr 
	protected native static long g_array_prepend_vals(@Ptr long array, @Ptr long data, @Ptr long len);
	/**
	 * Original signature : <code>GArray* g_array_insert_vals(GArray*, guint, gconstpointer, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:63</i>
	 */
	public static Pointer<GtkLibrary.GArray > g_array_insert_vals(Pointer<GtkLibrary.GArray > array, guint index_, GtkLibrary.gconstpointer data, guint len) {
		return Pointer.pointerToAddress(g_array_insert_vals(Pointer.getPeer(array), Pointer.getPeer(index_), Pointer.getPeer(data), Pointer.getPeer(len)), GtkLibrary.GArray.class);
	}
	@Ptr 
	protected native static long g_array_insert_vals(@Ptr long array, @Ptr long index_, @Ptr long data, @Ptr long len);
	/**
	 * Original signature : <code>GArray* g_array_set_size(GArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:68</i>
	 */
	public static Pointer<GtkLibrary.GArray > g_array_set_size(Pointer<GtkLibrary.GArray > array, guint length) {
		return Pointer.pointerToAddress(g_array_set_size(Pointer.getPeer(array), Pointer.getPeer(length)), GtkLibrary.GArray.class);
	}
	@Ptr 
	protected native static long g_array_set_size(@Ptr long array, @Ptr long length);
	/**
	 * Original signature : <code>GArray* g_array_remove_index(GArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:71</i>
	 */
	public static Pointer<GtkLibrary.GArray > g_array_remove_index(Pointer<GtkLibrary.GArray > array, guint index_) {
		return Pointer.pointerToAddress(g_array_remove_index(Pointer.getPeer(array), Pointer.getPeer(index_)), GtkLibrary.GArray.class);
	}
	@Ptr 
	protected native static long g_array_remove_index(@Ptr long array, @Ptr long index_);
	/**
	 * Original signature : <code>GArray* g_array_remove_index_fast(GArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:74</i>
	 */
	public static Pointer<GtkLibrary.GArray > g_array_remove_index_fast(Pointer<GtkLibrary.GArray > array, guint index_) {
		return Pointer.pointerToAddress(g_array_remove_index_fast(Pointer.getPeer(array), Pointer.getPeer(index_)), GtkLibrary.GArray.class);
	}
	@Ptr 
	protected native static long g_array_remove_index_fast(@Ptr long array, @Ptr long index_);
	/**
	 * Original signature : <code>GArray* g_array_remove_range(GArray*, guint, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:77</i>
	 */
	public static Pointer<GtkLibrary.GArray > g_array_remove_range(Pointer<GtkLibrary.GArray > array, guint index_, guint length) {
		return Pointer.pointerToAddress(g_array_remove_range(Pointer.getPeer(array), Pointer.getPeer(index_), Pointer.getPeer(length)), GtkLibrary.GArray.class);
	}
	@Ptr 
	protected native static long g_array_remove_range(@Ptr long array, @Ptr long index_, @Ptr long length);
	/**
	 * Original signature : <code>void g_array_sort(GArray*, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:81</i>
	 */
	public static void g_array_sort(Pointer<GtkLibrary.GArray > array, GtkLibrary.GCompareFunc compare_func) {
		g_array_sort(Pointer.getPeer(array), Pointer.getPeer(compare_func));
	}
	protected native static void g_array_sort(@Ptr long array, @Ptr long compare_func);
	/**
	 * Original signature : <code>void g_array_sort_with_data(GArray*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:84</i>
	 */
	public static void g_array_sort_with_data(Pointer<GtkLibrary.GArray > array, GtkLibrary.GCompareDataFunc compare_func, GtkLibrary.gpointer user_data) {
		g_array_sort_with_data(Pointer.getPeer(array), Pointer.getPeer(compare_func), Pointer.getPeer(user_data));
	}
	protected native static void g_array_sort_with_data(@Ptr long array, @Ptr long compare_func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_array_set_clear_func(GArray*, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:88</i>
	 */
	public static void g_array_set_clear_func(Pointer<GtkLibrary.GArray > array, GtkLibrary.GDestroyNotify clear_func) {
		g_array_set_clear_func(Pointer.getPeer(array), Pointer.getPeer(clear_func));
	}
	protected native static void g_array_set_clear_func(@Ptr long array, @Ptr long clear_func);
	/**
	 * Original signature : <code>GPtrArray* g_ptr_array_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:97</i>
	 */
	public static Pointer<GtkLibrary.GPtrArray > g_ptr_array_new() {
		return Pointer.pointerToAddress(g_ptr_array_new$2(), GtkLibrary.GPtrArray.class);
	}
	@Ptr 
	protected native static long g_ptr_array_new$2();
	/**
	 * Original signature : <code>GPtrArray* g_ptr_array_new_with_free_func(GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:99</i>
	 */
	public static Pointer<GtkLibrary.GPtrArray > g_ptr_array_new_with_free_func(GtkLibrary.GDestroyNotify element_free_func) {
		return Pointer.pointerToAddress(g_ptr_array_new_with_free_func(Pointer.getPeer(element_free_func)), GtkLibrary.GPtrArray.class);
	}
	@Ptr 
	protected native static long g_ptr_array_new_with_free_func(@Ptr long element_free_func);
	/**
	 * Original signature : <code>GPtrArray* g_ptr_array_sized_new(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:101</i>
	 */
	public static Pointer<GtkLibrary.GPtrArray > g_ptr_array_sized_new(guint reserved_size) {
		return Pointer.pointerToAddress(g_ptr_array_sized_new(Pointer.getPeer(reserved_size)), GtkLibrary.GPtrArray.class);
	}
	@Ptr 
	protected native static long g_ptr_array_sized_new(@Ptr long reserved_size);
	/**
	 * Original signature : <code>GPtrArray* g_ptr_array_new_full(guint, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:103</i>
	 */
	public static Pointer<GtkLibrary.GPtrArray > g_ptr_array_new_full(guint reserved_size, GtkLibrary.GDestroyNotify element_free_func) {
		return Pointer.pointerToAddress(g_ptr_array_new_full(Pointer.getPeer(reserved_size), Pointer.getPeer(element_free_func)), GtkLibrary.GPtrArray.class);
	}
	@Ptr 
	protected native static long g_ptr_array_new_full(@Ptr long reserved_size, @Ptr long element_free_func);
	/**
	 * Original signature : <code>gpointer* g_ptr_array_free(GPtrArray*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:106</i>
	 */
	public static Pointer<GtkLibrary.gpointer > g_ptr_array_free(Pointer<GtkLibrary.GPtrArray > array, GtkLibrary.gboolean free_seg) {
		return Pointer.pointerToAddress(g_ptr_array_free(Pointer.getPeer(array), Pointer.getPeer(free_seg)), GtkLibrary.gpointer.class);
	}
	@Ptr 
	protected native static long g_ptr_array_free(@Ptr long array, @Ptr long free_seg);
	/**
	 * Original signature : <code>GPtrArray* g_ptr_array_ref(GPtrArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:109</i>
	 */
	public static Pointer<GtkLibrary.GPtrArray > g_ptr_array_ref(Pointer<GtkLibrary.GPtrArray > array) {
		return Pointer.pointerToAddress(g_ptr_array_ref(Pointer.getPeer(array)), GtkLibrary.GPtrArray.class);
	}
	@Ptr 
	protected native static long g_ptr_array_ref(@Ptr long array);
	/**
	 * Original signature : <code>void g_ptr_array_unref(GPtrArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:111</i>
	 */
	public static void g_ptr_array_unref(Pointer<GtkLibrary.GPtrArray > array) {
		g_ptr_array_unref(Pointer.getPeer(array));
	}
	protected native static void g_ptr_array_unref(@Ptr long array);
	/**
	 * Original signature : <code>void g_ptr_array_set_free_func(GPtrArray*, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:113</i>
	 */
	public static void g_ptr_array_set_free_func(Pointer<GtkLibrary.GPtrArray > array, GtkLibrary.GDestroyNotify element_free_func) {
		g_ptr_array_set_free_func(Pointer.getPeer(array), Pointer.getPeer(element_free_func));
	}
	protected native static void g_ptr_array_set_free_func(@Ptr long array, @Ptr long element_free_func);
	/**
	 * Original signature : <code>void g_ptr_array_set_size(GPtrArray*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:116</i>
	 */
	public static void g_ptr_array_set_size(Pointer<GtkLibrary.GPtrArray > array, GtkLibrary.gint length) {
		g_ptr_array_set_size(Pointer.getPeer(array), Pointer.getPeer(length));
	}
	protected native static void g_ptr_array_set_size(@Ptr long array, @Ptr long length);
	/**
	 * Original signature : <code>gpointer g_ptr_array_remove_index(GPtrArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:119</i>
	 */
	public static GtkLibrary.gpointer g_ptr_array_remove_index(Pointer<GtkLibrary.GPtrArray > array, guint index_) {
		return Pointer.pointerToAddress(g_ptr_array_remove_index(Pointer.getPeer(array), Pointer.getPeer(index_)), .class);
	}
	@Ptr 
	protected native static long g_ptr_array_remove_index(@Ptr long array, @Ptr long index_);
	/**
	 * Original signature : <code>gpointer g_ptr_array_remove_index_fast(GPtrArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:122</i>
	 */
	public static GtkLibrary.gpointer g_ptr_array_remove_index_fast(Pointer<GtkLibrary.GPtrArray > array, guint index_) {
		return Pointer.pointerToAddress(g_ptr_array_remove_index_fast(Pointer.getPeer(array), Pointer.getPeer(index_)), .class);
	}
	@Ptr 
	protected native static long g_ptr_array_remove_index_fast(@Ptr long array, @Ptr long index_);
	/**
	 * Original signature : <code>gboolean g_ptr_array_remove(GPtrArray*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:125</i>
	 */
	public static GtkLibrary.gboolean g_ptr_array_remove(Pointer<GtkLibrary.GPtrArray > array, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_ptr_array_remove(Pointer.getPeer(array), Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_ptr_array_remove(@Ptr long array, @Ptr long data);
	/**
	 * Original signature : <code>gboolean g_ptr_array_remove_fast(GPtrArray*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:128</i>
	 */
	public static GtkLibrary.gboolean g_ptr_array_remove_fast(Pointer<GtkLibrary.GPtrArray > array, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_ptr_array_remove_fast(Pointer.getPeer(array), Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_ptr_array_remove_fast(@Ptr long array, @Ptr long data);
	/**
	 * Original signature : <code>void g_ptr_array_remove_range(GPtrArray*, guint, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:131</i>
	 */
	public static void g_ptr_array_remove_range(Pointer<GtkLibrary.GPtrArray > array, guint index_, guint length) {
		g_ptr_array_remove_range(Pointer.getPeer(array), Pointer.getPeer(index_), Pointer.getPeer(length));
	}
	protected native static void g_ptr_array_remove_range(@Ptr long array, @Ptr long index_, @Ptr long length);
	/**
	 * Original signature : <code>void g_ptr_array_add(GPtrArray*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:135</i>
	 */
	public static void g_ptr_array_add(Pointer<GtkLibrary.GPtrArray > array, GtkLibrary.gpointer data) {
		g_ptr_array_add(Pointer.getPeer(array), Pointer.getPeer(data));
	}
	protected native static void g_ptr_array_add(@Ptr long array, @Ptr long data);
	/**
	 * Original signature : <code>void g_ptr_array_sort(GPtrArray*, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:138</i>
	 */
	public static void g_ptr_array_sort(Pointer<GtkLibrary.GPtrArray > array, GtkLibrary.GCompareFunc compare_func) {
		g_ptr_array_sort(Pointer.getPeer(array), Pointer.getPeer(compare_func));
	}
	protected native static void g_ptr_array_sort(@Ptr long array, @Ptr long compare_func);
	/**
	 * Original signature : <code>void g_ptr_array_sort_with_data(GPtrArray*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:141</i>
	 */
	public static void g_ptr_array_sort_with_data(Pointer<GtkLibrary.GPtrArray > array, GtkLibrary.GCompareDataFunc compare_func, GtkLibrary.gpointer user_data) {
		g_ptr_array_sort_with_data(Pointer.getPeer(array), Pointer.getPeer(compare_func), Pointer.getPeer(user_data));
	}
	protected native static void g_ptr_array_sort_with_data(@Ptr long array, @Ptr long compare_func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_ptr_array_foreach(GPtrArray*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:145</i>
	 */
	public static void g_ptr_array_foreach(Pointer<GtkLibrary.GPtrArray > array, GtkLibrary.GFunc func, GtkLibrary.gpointer user_data) {
		g_ptr_array_foreach(Pointer.getPeer(array), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_ptr_array_foreach(@Ptr long array, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:155</i>
	 */
	public static Pointer<GtkLibrary.GByteArray > g_byte_array_new() {
		return Pointer.pointerToAddress(g_byte_array_new$2(), GtkLibrary.GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_new$2();
	/**
	 * Original signature : <code>GByteArray* g_byte_array_new_take(guint8*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:157</i>
	 */
	public static Pointer<GtkLibrary.GByteArray > g_byte_array_new_take(Pointer<GtkLibrary.guint8 > data, gsize len) {
		return Pointer.pointerToAddress(g_byte_array_new_take(Pointer.getPeer(data), Pointer.getPeer(len)), GtkLibrary.GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_new_take(@Ptr long data, @Ptr long len);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_sized_new(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:160</i>
	 */
	public static Pointer<GtkLibrary.GByteArray > g_byte_array_sized_new(guint reserved_size) {
		return Pointer.pointerToAddress(g_byte_array_sized_new(Pointer.getPeer(reserved_size)), GtkLibrary.GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_sized_new(@Ptr long reserved_size);
	/**
	 * Original signature : <code>guint8* g_byte_array_free(GByteArray*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:162</i>
	 */
	public static Pointer<GtkLibrary.guint8 > g_byte_array_free(Pointer<GtkLibrary.GByteArray > array, GtkLibrary.gboolean free_segment) {
		return Pointer.pointerToAddress(g_byte_array_free(Pointer.getPeer(array), Pointer.getPeer(free_segment)), GtkLibrary.guint8.class);
	}
	@Ptr 
	protected native static long g_byte_array_free(@Ptr long array, @Ptr long free_segment);
	/**
	 * Original signature : <code>GBytes* g_byte_array_free_to_bytes(GByteArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:165</i>
	 */
	public static Pointer<GtkLibrary.GBytes > g_byte_array_free_to_bytes(Pointer<GtkLibrary.GByteArray > array) {
		return Pointer.pointerToAddress(g_byte_array_free_to_bytes(Pointer.getPeer(array)), GtkLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_byte_array_free_to_bytes(@Ptr long array);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_ref(GByteArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:167</i>
	 */
	public static Pointer<GtkLibrary.GByteArray > g_byte_array_ref(Pointer<GtkLibrary.GByteArray > array) {
		return Pointer.pointerToAddress(g_byte_array_ref(Pointer.getPeer(array)), GtkLibrary.GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_ref(@Ptr long array);
	/**
	 * Original signature : <code>void g_byte_array_unref(GByteArray*)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:169</i>
	 */
	public static void g_byte_array_unref(Pointer<GtkLibrary.GByteArray > array) {
		g_byte_array_unref(Pointer.getPeer(array));
	}
	protected native static void g_byte_array_unref(@Ptr long array);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_append(GByteArray*, const guint8*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:171</i>
	 */
	public static Pointer<GtkLibrary.GByteArray > g_byte_array_append(Pointer<GtkLibrary.GByteArray > array, Pointer<GtkLibrary.guint8 > data, guint len) {
		return Pointer.pointerToAddress(g_byte_array_append(Pointer.getPeer(array), Pointer.getPeer(data), Pointer.getPeer(len)), GtkLibrary.GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_append(@Ptr long array, @Ptr long data, @Ptr long len);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_prepend(GByteArray*, const guint8*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:175</i>
	 */
	public static Pointer<GtkLibrary.GByteArray > g_byte_array_prepend(Pointer<GtkLibrary.GByteArray > array, Pointer<GtkLibrary.guint8 > data, guint len) {
		return Pointer.pointerToAddress(g_byte_array_prepend(Pointer.getPeer(array), Pointer.getPeer(data), Pointer.getPeer(len)), GtkLibrary.GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_prepend(@Ptr long array, @Ptr long data, @Ptr long len);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_set_size(GByteArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:179</i>
	 */
	public static Pointer<GtkLibrary.GByteArray > g_byte_array_set_size(Pointer<GtkLibrary.GByteArray > array, guint length) {
		return Pointer.pointerToAddress(g_byte_array_set_size(Pointer.getPeer(array), Pointer.getPeer(length)), GtkLibrary.GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_set_size(@Ptr long array, @Ptr long length);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_remove_index(GByteArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:182</i>
	 */
	public static Pointer<GtkLibrary.GByteArray > g_byte_array_remove_index(Pointer<GtkLibrary.GByteArray > array, guint index_) {
		return Pointer.pointerToAddress(g_byte_array_remove_index(Pointer.getPeer(array), Pointer.getPeer(index_)), GtkLibrary.GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_remove_index(@Ptr long array, @Ptr long index_);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_remove_index_fast(GByteArray*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:185</i>
	 */
	public static Pointer<GtkLibrary.GByteArray > g_byte_array_remove_index_fast(Pointer<GtkLibrary.GByteArray > array, guint index_) {
		return Pointer.pointerToAddress(g_byte_array_remove_index_fast(Pointer.getPeer(array), Pointer.getPeer(index_)), GtkLibrary.GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_remove_index_fast(@Ptr long array, @Ptr long index_);
	/**
	 * Original signature : <code>GByteArray* g_byte_array_remove_range(GByteArray*, guint, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:188</i>
	 */
	public static Pointer<GtkLibrary.GByteArray > g_byte_array_remove_range(Pointer<GtkLibrary.GByteArray > array, guint index_, guint length) {
		return Pointer.pointerToAddress(g_byte_array_remove_range(Pointer.getPeer(array), Pointer.getPeer(index_), Pointer.getPeer(length)), GtkLibrary.GByteArray.class);
	}
	@Ptr 
	protected native static long g_byte_array_remove_range(@Ptr long array, @Ptr long index_, @Ptr long length);
	/**
	 * Original signature : <code>void g_byte_array_sort(GByteArray*, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:192</i>
	 */
	public static void g_byte_array_sort(Pointer<GtkLibrary.GByteArray > array, GtkLibrary.GCompareFunc compare_func) {
		g_byte_array_sort(Pointer.getPeer(array), Pointer.getPeer(compare_func));
	}
	protected native static void g_byte_array_sort(@Ptr long array, @Ptr long compare_func);
	/**
	 * Original signature : <code>void g_byte_array_sort_with_data(GByteArray*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/garray.h:195</i>
	 */
	public static void g_byte_array_sort_with_data(Pointer<GtkLibrary.GByteArray > array, GtkLibrary.GCompareDataFunc compare_func, GtkLibrary.gpointer user_data) {
		g_byte_array_sort_with_data(Pointer.getPeer(array), Pointer.getPeer(compare_func), Pointer.getPeer(user_data));
	}
	protected native static void g_byte_array_sort_with_data(@Ptr long array, @Ptr long compare_func, @Ptr long user_data);
	/**
	 * Quarks (string<->id association)<br>
	 * Original signature : <code>GQuark g_quark_try_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gquark.h:8</i>
	 */
	public static GtkLibrary.GQuark g_quark_try_string(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_quark_try_string(Pointer.getPeer(string)), .class);
	}
	@Ptr 
	protected native static long g_quark_try_string(@Ptr long string);
	/**
	 * Original signature : <code>GQuark g_quark_from_static_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gquark.h:10</i>
	 */
	public static GtkLibrary.GQuark g_quark_from_static_string(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_quark_from_static_string(Pointer.getPeer(string)), .class);
	}
	@Ptr 
	protected native static long g_quark_from_static_string(@Ptr long string);
	/**
	 * Original signature : <code>GQuark g_quark_from_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gquark.h:12</i>
	 */
	public static GtkLibrary.GQuark g_quark_from_string(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_quark_from_string(Pointer.getPeer(string)), .class);
	}
	@Ptr 
	protected native static long g_quark_from_string(@Ptr long string);
	/**
	 * Original signature : <code>gchar* g_quark_to_string(GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gquark.h:14</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_quark_to_string(GtkLibrary.GQuark quark) {
		return Pointer.pointerToAddress(g_quark_to_string(Pointer.getPeer(quark)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_quark_to_string(@Ptr long quark);
	/**
	 * Original signature : <code>gchar* g_intern_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gquark.h:29</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_intern_string(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_intern_string(Pointer.getPeer(string)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_intern_string(@Ptr long string);
	/**
	 * Original signature : <code>gchar* g_intern_static_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gquark.h:31</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_intern_static_string(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_intern_static_string(Pointer.getPeer(string)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_intern_static_string(@Ptr long string);
	/**
	 * Original signature : <code>GError* g_error_new(GQuark, gint, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:50</i>
	 */
	public static Pointer<GError > g_error_new(GtkLibrary.GQuark domain, GtkLibrary.gint code, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		return Pointer.pointerToAddress(g_error_new(Pointer.getPeer(domain), Pointer.getPeer(code), Pointer.getPeer(format), varargs), GError.class);
	}
	@Ptr 
	protected native static long g_error_new(@Ptr long domain, @Ptr long code, @Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>GError* g_error_new_literal(GQuark, gint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:56</i>
	 */
	public static Pointer<GError > g_error_new_literal(GtkLibrary.GQuark domain, GtkLibrary.gint code, Pointer<GtkLibrary.gchar > message) {
		return Pointer.pointerToAddress(g_error_new_literal(Pointer.getPeer(domain), Pointer.getPeer(code), Pointer.getPeer(message)), GError.class);
	}
	@Ptr 
	protected native static long g_error_new_literal(@Ptr long domain, @Ptr long code, @Ptr long message);
	/**
	 * Original signature : <code>GError* g_error_new_valist(GQuark, gint, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:60</i>
	 */
	public static Pointer<GError > g_error_new_valist(GtkLibrary.GQuark domain, GtkLibrary.gint code, Pointer<GtkLibrary.gchar > format, GtkLibrary.__builtin_va_list args) {
		return Pointer.pointerToAddress(g_error_new_valist(Pointer.getPeer(domain), Pointer.getPeer(code), Pointer.getPeer(format), Pointer.getPeer(args)), GError.class);
	}
	@Ptr 
	protected native static long g_error_new_valist(@Ptr long domain, @Ptr long code, @Ptr long format, @Ptr long args);
	/**
	 * Original signature : <code>void g_error_free(GError*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:66</i>
	 */
	public static void g_error_free(Pointer<GError > error) {
		g_error_free(Pointer.getPeer(error));
	}
	protected native static void g_error_free(@Ptr long error);
	/**
	 * Original signature : <code>GError* g_error_copy(const GError*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:68</i>
	 */
	public static Pointer<GError > g_error_copy(Pointer<GError > error) {
		return Pointer.pointerToAddress(g_error_copy(Pointer.getPeer(error)), GError.class);
	}
	@Ptr 
	protected native static long g_error_copy(@Ptr long error);
	/**
	 * Original signature : <code>gboolean g_error_matches(const GError*, GQuark, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:71</i>
	 */
	public static GtkLibrary.gboolean g_error_matches(Pointer<GError > error, GtkLibrary.GQuark domain, GtkLibrary.gint code) {
		return Pointer.pointerToAddress(g_error_matches(Pointer.getPeer(error), Pointer.getPeer(domain), Pointer.getPeer(code)), .class);
	}
	@Ptr 
	protected native static long g_error_matches(@Ptr long error, @Ptr long domain, @Ptr long code);
	/**
	 * if (err) *err = g_error_new(domain, code, format, ...), also has<br>
	 * some sanity checks.<br>
	 * Original signature : <code>void g_set_error(GError**, GQuark, gint, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:79</i>
	 */
	public static void g_set_error(Pointer<Pointer<GError > > err, GtkLibrary.GQuark domain, GtkLibrary.gint code, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		g_set_error(Pointer.getPeer(err), Pointer.getPeer(domain), Pointer.getPeer(code), Pointer.getPeer(format), varargs);
	}
	protected native static void g_set_error(@Ptr long err, @Ptr long domain, @Ptr long code, @Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>void g_set_error_literal(GError**, GQuark, gint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:86</i>
	 */
	public static void g_set_error_literal(Pointer<Pointer<GError > > err, GtkLibrary.GQuark domain, GtkLibrary.gint code, Pointer<GtkLibrary.gchar > message) {
		g_set_error_literal(Pointer.getPeer(err), Pointer.getPeer(domain), Pointer.getPeer(code), Pointer.getPeer(message));
	}
	protected native static void g_set_error_literal(@Ptr long err, @Ptr long domain, @Ptr long code, @Ptr long message);
	/**
	 * if (dest) *dest = src; also has some sanity checks.<br>
	 * Original signature : <code>void g_propagate_error(GError**, GError*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:94</i>
	 */
	public static void g_propagate_error(Pointer<Pointer<GError > > dest, Pointer<GError > src) {
		g_propagate_error(Pointer.getPeer(dest), Pointer.getPeer(src));
	}
	protected native static void g_propagate_error(@Ptr long dest, @Ptr long src);
	/**
	 * if (err && *err) { g_error_free(*err); *err = NULL; }<br>
	 * Original signature : <code>void g_clear_error(GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:99</i>
	 */
	public static void g_clear_error(Pointer<Pointer<GError > > err) {
		g_clear_error(Pointer.getPeer(err));
	}
	protected native static void g_clear_error(@Ptr long err);
	/**
	 * if (err) prefix the formatted string to the ->message<br>
	 * Original signature : <code>void g_prefix_error(GError**, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:103</i>
	 */
	public static void g_prefix_error(Pointer<Pointer<GError > > err, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		g_prefix_error(Pointer.getPeer(err), Pointer.getPeer(format), varargs);
	}
	protected native static void g_prefix_error(@Ptr long err, @Ptr long format, Object... varargs);
	/**
	 * g_propagate_error then g_error_prefix on dest<br>
	 * Original signature : <code>void g_propagate_prefixed_error(GError**, GError*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gerror.h:109</i>
	 */
	public static void g_propagate_prefixed_error(Pointer<Pointer<GError > > dest, Pointer<GError > src, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		g_propagate_prefixed_error(Pointer.getPeer(dest), Pointer.getPeer(src), Pointer.getPeer(format), varargs);
	}
	protected native static void g_propagate_prefixed_error(@Ptr long dest, @Ptr long src, @Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>GQuark g_thread_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:38</i>
	 */
	public static GtkLibrary.GQuark g_thread_error_quark() {
		return Pointer.pointerToAddress(g_thread_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_thread_error_quark$2();
	/**
	 * Original signature : <code>GThread* g_thread_ref(GThread*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:139</i>
	 */
	public static Pointer<GtkLibrary.GThread > g_thread_ref(Pointer<GtkLibrary.GThread > thread) {
		return Pointer.pointerToAddress(g_thread_ref(Pointer.getPeer(thread)), GtkLibrary.GThread.class);
	}
	@Ptr 
	protected native static long g_thread_ref(@Ptr long thread);
	/**
	 * Original signature : <code>void g_thread_unref(GThread*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:141</i>
	 */
	public static void g_thread_unref(Pointer<GtkLibrary.GThread > thread) {
		g_thread_unref(Pointer.getPeer(thread));
	}
	protected native static void g_thread_unref(@Ptr long thread);
	/**
	 * Original signature : <code>GThread* g_thread_new(const gchar*, GThreadFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:143</i>
	 */
	public static Pointer<GtkLibrary.GThread > g_thread_new(Pointer<GtkLibrary.gchar > name, GtkLibrary.GThreadFunc func, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_thread_new(Pointer.getPeer(name), Pointer.getPeer(func), Pointer.getPeer(data)), GtkLibrary.GThread.class);
	}
	@Ptr 
	protected native static long g_thread_new(@Ptr long name, @Ptr long func, @Ptr long data);
	/**
	 * Original signature : <code>GThread* g_thread_try_new(const gchar*, GThreadFunc, gpointer, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:147</i>
	 */
	public static Pointer<GtkLibrary.GThread > g_thread_try_new(Pointer<GtkLibrary.gchar > name, GtkLibrary.GThreadFunc func, GtkLibrary.gpointer data, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_thread_try_new(Pointer.getPeer(name), Pointer.getPeer(func), Pointer.getPeer(data), Pointer.getPeer(error)), GtkLibrary.GThread.class);
	}
	@Ptr 
	protected native static long g_thread_try_new(@Ptr long name, @Ptr long func, @Ptr long data, @Ptr long error);
	/**
	 * Original signature : <code>GThread* g_thread_self()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:152</i>
	 */
	public static Pointer<GtkLibrary.GThread > g_thread_self() {
		return Pointer.pointerToAddress(g_thread_self$2(), GtkLibrary.GThread.class);
	}
	@Ptr 
	protected native static long g_thread_self$2();
	/**
	 * Original signature : <code>void g_thread_exit(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:154</i>
	 */
	public static void g_thread_exit(GtkLibrary.gpointer retval) {
		g_thread_exit(Pointer.getPeer(retval));
	}
	protected native static void g_thread_exit(@Ptr long retval);
	/**
	 * Original signature : <code>gpointer g_thread_join(GThread*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:156</i>
	 */
	public static GtkLibrary.gpointer g_thread_join(Pointer<GtkLibrary.GThread > thread) {
		return Pointer.pointerToAddress(g_thread_join(Pointer.getPeer(thread)), .class);
	}
	@Ptr 
	protected native static long g_thread_join(@Ptr long thread);
	/**
	 * Original signature : <code>void g_thread_yield()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:158</i>
	 */
	public static native void g_thread_yield();
	/**
	 * Original signature : <code>void g_mutex_init(GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:162</i>
	 */
	public static void g_mutex_init(Pointer<GtkLibrary.GMutex > mutex) {
		g_mutex_init(Pointer.getPeer(mutex));
	}
	protected native static void g_mutex_init(@Ptr long mutex);
	/**
	 * Original signature : <code>void g_mutex_clear(GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:164</i>
	 */
	public static void g_mutex_clear(Pointer<GtkLibrary.GMutex > mutex) {
		g_mutex_clear(Pointer.getPeer(mutex));
	}
	protected native static void g_mutex_clear(@Ptr long mutex);
	/**
	 * Original signature : <code>void g_mutex_lock(GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:166</i>
	 */
	public static void g_mutex_lock(Pointer<GtkLibrary.GMutex > mutex) {
		g_mutex_lock(Pointer.getPeer(mutex));
	}
	protected native static void g_mutex_lock(@Ptr long mutex);
	/**
	 * Original signature : <code>gboolean g_mutex_trylock(GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:168</i>
	 */
	public static GtkLibrary.gboolean g_mutex_trylock(Pointer<GtkLibrary.GMutex > mutex) {
		return Pointer.pointerToAddress(g_mutex_trylock(Pointer.getPeer(mutex)), .class);
	}
	@Ptr 
	protected native static long g_mutex_trylock(@Ptr long mutex);
	/**
	 * Original signature : <code>void g_mutex_unlock(GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:170</i>
	 */
	public static void g_mutex_unlock(Pointer<GtkLibrary.GMutex > mutex) {
		g_mutex_unlock(Pointer.getPeer(mutex));
	}
	protected native static void g_mutex_unlock(@Ptr long mutex);
	/**
	 * Original signature : <code>void g_rw_lock_init(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:173</i>
	 */
	public static void g_rw_lock_init(Pointer<GtkLibrary.GRWLock > rw_lock) {
		g_rw_lock_init(Pointer.getPeer(rw_lock));
	}
	protected native static void g_rw_lock_init(@Ptr long rw_lock);
	/**
	 * Original signature : <code>void g_rw_lock_clear(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:175</i>
	 */
	public static void g_rw_lock_clear(Pointer<GtkLibrary.GRWLock > rw_lock) {
		g_rw_lock_clear(Pointer.getPeer(rw_lock));
	}
	protected native static void g_rw_lock_clear(@Ptr long rw_lock);
	/**
	 * Original signature : <code>void g_rw_lock_writer_lock(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:177</i>
	 */
	public static void g_rw_lock_writer_lock(Pointer<GtkLibrary.GRWLock > rw_lock) {
		g_rw_lock_writer_lock(Pointer.getPeer(rw_lock));
	}
	protected native static void g_rw_lock_writer_lock(@Ptr long rw_lock);
	/**
	 * Original signature : <code>gboolean g_rw_lock_writer_trylock(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:179</i>
	 */
	public static GtkLibrary.gboolean g_rw_lock_writer_trylock(Pointer<GtkLibrary.GRWLock > rw_lock) {
		return Pointer.pointerToAddress(g_rw_lock_writer_trylock(Pointer.getPeer(rw_lock)), .class);
	}
	@Ptr 
	protected native static long g_rw_lock_writer_trylock(@Ptr long rw_lock);
	/**
	 * Original signature : <code>void g_rw_lock_writer_unlock(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:181</i>
	 */
	public static void g_rw_lock_writer_unlock(Pointer<GtkLibrary.GRWLock > rw_lock) {
		g_rw_lock_writer_unlock(Pointer.getPeer(rw_lock));
	}
	protected native static void g_rw_lock_writer_unlock(@Ptr long rw_lock);
	/**
	 * Original signature : <code>void g_rw_lock_reader_lock(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:183</i>
	 */
	public static void g_rw_lock_reader_lock(Pointer<GtkLibrary.GRWLock > rw_lock) {
		g_rw_lock_reader_lock(Pointer.getPeer(rw_lock));
	}
	protected native static void g_rw_lock_reader_lock(@Ptr long rw_lock);
	/**
	 * Original signature : <code>gboolean g_rw_lock_reader_trylock(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:185</i>
	 */
	public static GtkLibrary.gboolean g_rw_lock_reader_trylock(Pointer<GtkLibrary.GRWLock > rw_lock) {
		return Pointer.pointerToAddress(g_rw_lock_reader_trylock(Pointer.getPeer(rw_lock)), .class);
	}
	@Ptr 
	protected native static long g_rw_lock_reader_trylock(@Ptr long rw_lock);
	/**
	 * Original signature : <code>void g_rw_lock_reader_unlock(GRWLock*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:187</i>
	 */
	public static void g_rw_lock_reader_unlock(Pointer<GtkLibrary.GRWLock > rw_lock) {
		g_rw_lock_reader_unlock(Pointer.getPeer(rw_lock));
	}
	protected native static void g_rw_lock_reader_unlock(@Ptr long rw_lock);
	/**
	 * Original signature : <code>void g_rec_mutex_init(GRecMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:190</i>
	 */
	public static void g_rec_mutex_init(Pointer<GtkLibrary.GRecMutex > rec_mutex) {
		g_rec_mutex_init(Pointer.getPeer(rec_mutex));
	}
	protected native static void g_rec_mutex_init(@Ptr long rec_mutex);
	/**
	 * Original signature : <code>void g_rec_mutex_clear(GRecMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:192</i>
	 */
	public static void g_rec_mutex_clear(Pointer<GtkLibrary.GRecMutex > rec_mutex) {
		g_rec_mutex_clear(Pointer.getPeer(rec_mutex));
	}
	protected native static void g_rec_mutex_clear(@Ptr long rec_mutex);
	/**
	 * Original signature : <code>void g_rec_mutex_lock(GRecMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:194</i>
	 */
	public static void g_rec_mutex_lock(Pointer<GtkLibrary.GRecMutex > rec_mutex) {
		g_rec_mutex_lock(Pointer.getPeer(rec_mutex));
	}
	protected native static void g_rec_mutex_lock(@Ptr long rec_mutex);
	/**
	 * Original signature : <code>gboolean g_rec_mutex_trylock(GRecMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:196</i>
	 */
	public static GtkLibrary.gboolean g_rec_mutex_trylock(Pointer<GtkLibrary.GRecMutex > rec_mutex) {
		return Pointer.pointerToAddress(g_rec_mutex_trylock(Pointer.getPeer(rec_mutex)), .class);
	}
	@Ptr 
	protected native static long g_rec_mutex_trylock(@Ptr long rec_mutex);
	/**
	 * Original signature : <code>void g_rec_mutex_unlock(GRecMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:198</i>
	 */
	public static void g_rec_mutex_unlock(Pointer<GtkLibrary.GRecMutex > rec_mutex) {
		g_rec_mutex_unlock(Pointer.getPeer(rec_mutex));
	}
	protected native static void g_rec_mutex_unlock(@Ptr long rec_mutex);
	/**
	 * Original signature : <code>void g_cond_init(GCond*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:201</i>
	 */
	public static void g_cond_init(Pointer<GtkLibrary.GCond > cond) {
		g_cond_init(Pointer.getPeer(cond));
	}
	protected native static void g_cond_init(@Ptr long cond);
	/**
	 * Original signature : <code>void g_cond_clear(GCond*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:203</i>
	 */
	public static void g_cond_clear(Pointer<GtkLibrary.GCond > cond) {
		g_cond_clear(Pointer.getPeer(cond));
	}
	protected native static void g_cond_clear(@Ptr long cond);
	/**
	 * Original signature : <code>void g_cond_wait(GCond*, GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:205</i>
	 */
	public static void g_cond_wait(Pointer<GtkLibrary.GCond > cond, Pointer<GtkLibrary.GMutex > mutex) {
		g_cond_wait(Pointer.getPeer(cond), Pointer.getPeer(mutex));
	}
	protected native static void g_cond_wait(@Ptr long cond, @Ptr long mutex);
	/**
	 * Original signature : <code>void g_cond_signal(GCond*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:208</i>
	 */
	public static void g_cond_signal(Pointer<GtkLibrary.GCond > cond) {
		g_cond_signal(Pointer.getPeer(cond));
	}
	protected native static void g_cond_signal(@Ptr long cond);
	/**
	 * Original signature : <code>void g_cond_broadcast(GCond*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:210</i>
	 */
	public static void g_cond_broadcast(Pointer<GtkLibrary.GCond > cond) {
		g_cond_broadcast(Pointer.getPeer(cond));
	}
	protected native static void g_cond_broadcast(@Ptr long cond);
	/**
	 * Original signature : <code>gboolean g_cond_wait_until(GCond*, GMutex*, gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:212</i>
	 */
	public static GtkLibrary.gboolean g_cond_wait_until(Pointer<GtkLibrary.GCond > cond, Pointer<GtkLibrary.GMutex > mutex, gint64 end_time) {
		return Pointer.pointerToAddress(g_cond_wait_until(Pointer.getPeer(cond), Pointer.getPeer(mutex), Pointer.getPeer(end_time)), .class);
	}
	@Ptr 
	protected native static long g_cond_wait_until(@Ptr long cond, @Ptr long mutex, @Ptr long end_time);
	/**
	 * Original signature : <code>gpointer g_private_get(GPrivate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:217</i>
	 */
	public static GtkLibrary.gpointer g_private_get(Pointer<GtkLibrary.GPrivate > key) {
		return Pointer.pointerToAddress(g_private_get(Pointer.getPeer(key)), .class);
	}
	@Ptr 
	protected native static long g_private_get(@Ptr long key);
	/**
	 * Original signature : <code>void g_private_set(GPrivate*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:219</i>
	 */
	public static void g_private_set(Pointer<GtkLibrary.GPrivate > key, GtkLibrary.gpointer value) {
		g_private_set(Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_private_set(@Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>void g_private_replace(GPrivate*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:222</i>
	 */
	public static void g_private_replace(Pointer<GtkLibrary.GPrivate > key, GtkLibrary.gpointer value) {
		g_private_replace(Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_private_replace(@Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>gpointer g_once_impl(GOnce*, GThreadFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:226</i>
	 */
	public static GtkLibrary.gpointer g_once_impl(Pointer<GtkLibrary.GOnce > once, GtkLibrary.GThreadFunc func, GtkLibrary.gpointer arg) {
		return Pointer.pointerToAddress(g_once_impl(Pointer.getPeer(once), Pointer.getPeer(func), Pointer.getPeer(arg)), .class);
	}
	@Ptr 
	protected native static long g_once_impl(@Ptr long once, @Ptr long func, @Ptr long arg);
	/**
	 * Original signature : <code>gboolean g_once_init_enter(volatile void*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:230</i>
	 */
	public static GtkLibrary.gboolean g_once_init_enter(Pointer<? > location) {
		return Pointer.pointerToAddress(g_once_init_enter(Pointer.getPeer(location)), .class);
	}
	@Ptr 
	protected native static long g_once_init_enter(@Ptr long location);
	/**
	 * Original signature : <code>void g_once_init_leave(volatile void*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:232</i>
	 */
	public static void g_once_init_leave(Pointer<? > location, gsize result) {
		g_once_init_leave(Pointer.getPeer(location), Pointer.getPeer(result));
	}
	protected native static void g_once_init_leave(@Ptr long location, @Ptr long result);
	/**
	 * Original signature : <code>guint g_get_num_processors()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthread.h:266</i>
	 */
	public static guint g_get_num_processors() {
		return Pointer.pointerToAddress(g_get_num_processors$2(), .class);
	}
	@Ptr 
	protected native static long g_get_num_processors$2();
	/**
	 * Original signature : <code>GAsyncQueue* g_async_queue_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:38</i>
	 */
	public static Pointer<GtkLibrary.GAsyncQueue > g_async_queue_new() {
		return Pointer.pointerToAddress(g_async_queue_new$2(), GtkLibrary.GAsyncQueue.class);
	}
	@Ptr 
	protected native static long g_async_queue_new$2();
	/**
	 * Original signature : <code>GAsyncQueue* g_async_queue_new_full(GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:40</i>
	 */
	public static Pointer<GtkLibrary.GAsyncQueue > g_async_queue_new_full(GtkLibrary.GDestroyNotify item_free_func) {
		return Pointer.pointerToAddress(g_async_queue_new_full(Pointer.getPeer(item_free_func)), GtkLibrary.GAsyncQueue.class);
	}
	@Ptr 
	protected native static long g_async_queue_new_full(@Ptr long item_free_func);
	/**
	 * Original signature : <code>void g_async_queue_lock(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:42</i>
	 */
	public static void g_async_queue_lock(Pointer<GtkLibrary.GAsyncQueue > queue) {
		g_async_queue_lock(Pointer.getPeer(queue));
	}
	protected native static void g_async_queue_lock(@Ptr long queue);
	/**
	 * Original signature : <code>void g_async_queue_unlock(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:44</i>
	 */
	public static void g_async_queue_unlock(Pointer<GtkLibrary.GAsyncQueue > queue) {
		g_async_queue_unlock(Pointer.getPeer(queue));
	}
	protected native static void g_async_queue_unlock(@Ptr long queue);
	/**
	 * Original signature : <code>GAsyncQueue* g_async_queue_ref(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:46</i>
	 */
	public static Pointer<GtkLibrary.GAsyncQueue > g_async_queue_ref(Pointer<GtkLibrary.GAsyncQueue > queue) {
		return Pointer.pointerToAddress(g_async_queue_ref(Pointer.getPeer(queue)), GtkLibrary.GAsyncQueue.class);
	}
	@Ptr 
	protected native static long g_async_queue_ref(@Ptr long queue);
	/**
	 * Original signature : <code>void g_async_queue_unref(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:48</i>
	 */
	public static void g_async_queue_unref(Pointer<GtkLibrary.GAsyncQueue > queue) {
		g_async_queue_unref(Pointer.getPeer(queue));
	}
	protected native static void g_async_queue_unref(@Ptr long queue);
	/**
	 * Original signature : <code>void g_async_queue_ref_unlocked(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:51</i>
	 */
	public static void g_async_queue_ref_unlocked(Pointer<GtkLibrary.GAsyncQueue > queue) {
		g_async_queue_ref_unlocked(Pointer.getPeer(queue));
	}
	protected native static void g_async_queue_ref_unlocked(@Ptr long queue);
	/**
	 * Original signature : <code>void g_async_queue_unref_and_unlock(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:54</i>
	 */
	public static void g_async_queue_unref_and_unlock(Pointer<GtkLibrary.GAsyncQueue > queue) {
		g_async_queue_unref_and_unlock(Pointer.getPeer(queue));
	}
	protected native static void g_async_queue_unref_and_unlock(@Ptr long queue);
	/**
	 * Original signature : <code>void g_async_queue_push(GAsyncQueue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:57</i>
	 */
	public static void g_async_queue_push(Pointer<GtkLibrary.GAsyncQueue > queue, GtkLibrary.gpointer data) {
		g_async_queue_push(Pointer.getPeer(queue), Pointer.getPeer(data));
	}
	protected native static void g_async_queue_push(@Ptr long queue, @Ptr long data);
	/**
	 * Original signature : <code>void g_async_queue_push_unlocked(GAsyncQueue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:60</i>
	 */
	public static void g_async_queue_push_unlocked(Pointer<GtkLibrary.GAsyncQueue > queue, GtkLibrary.gpointer data) {
		g_async_queue_push_unlocked(Pointer.getPeer(queue), Pointer.getPeer(data));
	}
	protected native static void g_async_queue_push_unlocked(@Ptr long queue, @Ptr long data);
	/**
	 * Original signature : <code>void g_async_queue_push_sorted(GAsyncQueue*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:63</i>
	 */
	public static void g_async_queue_push_sorted(Pointer<GtkLibrary.GAsyncQueue > queue, GtkLibrary.gpointer data, GtkLibrary.GCompareDataFunc func, GtkLibrary.gpointer user_data) {
		g_async_queue_push_sorted(Pointer.getPeer(queue), Pointer.getPeer(data), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_async_queue_push_sorted(@Ptr long queue, @Ptr long data, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_async_queue_push_sorted_unlocked(GAsyncQueue*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:68</i>
	 */
	public static void g_async_queue_push_sorted_unlocked(Pointer<GtkLibrary.GAsyncQueue > queue, GtkLibrary.gpointer data, GtkLibrary.GCompareDataFunc func, GtkLibrary.gpointer user_data) {
		g_async_queue_push_sorted_unlocked(Pointer.getPeer(queue), Pointer.getPeer(data), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_async_queue_push_sorted_unlocked(@Ptr long queue, @Ptr long data, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>gpointer g_async_queue_pop(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:73</i>
	 */
	public static GtkLibrary.gpointer g_async_queue_pop(Pointer<GtkLibrary.GAsyncQueue > queue) {
		return Pointer.pointerToAddress(g_async_queue_pop(Pointer.getPeer(queue)), .class);
	}
	@Ptr 
	protected native static long g_async_queue_pop(@Ptr long queue);
	/**
	 * Original signature : <code>gpointer g_async_queue_pop_unlocked(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:75</i>
	 */
	public static GtkLibrary.gpointer g_async_queue_pop_unlocked(Pointer<GtkLibrary.GAsyncQueue > queue) {
		return Pointer.pointerToAddress(g_async_queue_pop_unlocked(Pointer.getPeer(queue)), .class);
	}
	@Ptr 
	protected native static long g_async_queue_pop_unlocked(@Ptr long queue);
	/**
	 * Original signature : <code>gpointer g_async_queue_try_pop(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:77</i>
	 */
	public static GtkLibrary.gpointer g_async_queue_try_pop(Pointer<GtkLibrary.GAsyncQueue > queue) {
		return Pointer.pointerToAddress(g_async_queue_try_pop(Pointer.getPeer(queue)), .class);
	}
	@Ptr 
	protected native static long g_async_queue_try_pop(@Ptr long queue);
	/**
	 * Original signature : <code>gpointer g_async_queue_try_pop_unlocked(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:79</i>
	 */
	public static GtkLibrary.gpointer g_async_queue_try_pop_unlocked(Pointer<GtkLibrary.GAsyncQueue > queue) {
		return Pointer.pointerToAddress(g_async_queue_try_pop_unlocked(Pointer.getPeer(queue)), .class);
	}
	@Ptr 
	protected native static long g_async_queue_try_pop_unlocked(@Ptr long queue);
	/**
	 * Original signature : <code>gpointer g_async_queue_timeout_pop(GAsyncQueue*, guint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:81</i>
	 */
	public static GtkLibrary.gpointer g_async_queue_timeout_pop(Pointer<GtkLibrary.GAsyncQueue > queue, GtkLibrary.guint64 timeout) {
		return Pointer.pointerToAddress(g_async_queue_timeout_pop(Pointer.getPeer(queue), Pointer.getPeer(timeout)), .class);
	}
	@Ptr 
	protected native static long g_async_queue_timeout_pop(@Ptr long queue, @Ptr long timeout);
	/**
	 * Original signature : <code>gpointer g_async_queue_timeout_pop_unlocked(GAsyncQueue*, guint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:84</i>
	 */
	public static GtkLibrary.gpointer g_async_queue_timeout_pop_unlocked(Pointer<GtkLibrary.GAsyncQueue > queue, GtkLibrary.guint64 timeout) {
		return Pointer.pointerToAddress(g_async_queue_timeout_pop_unlocked(Pointer.getPeer(queue), Pointer.getPeer(timeout)), .class);
	}
	@Ptr 
	protected native static long g_async_queue_timeout_pop_unlocked(@Ptr long queue, @Ptr long timeout);
	/**
	 * Original signature : <code>gint g_async_queue_length(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:87</i>
	 */
	public static GtkLibrary.gint g_async_queue_length(Pointer<GtkLibrary.GAsyncQueue > queue) {
		return Pointer.pointerToAddress(g_async_queue_length(Pointer.getPeer(queue)), .class);
	}
	@Ptr 
	protected native static long g_async_queue_length(@Ptr long queue);
	/**
	 * Original signature : <code>gint g_async_queue_length_unlocked(GAsyncQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:89</i>
	 */
	public static GtkLibrary.gint g_async_queue_length_unlocked(Pointer<GtkLibrary.GAsyncQueue > queue) {
		return Pointer.pointerToAddress(g_async_queue_length_unlocked(Pointer.getPeer(queue)), .class);
	}
	@Ptr 
	protected native static long g_async_queue_length_unlocked(@Ptr long queue);
	/**
	 * Original signature : <code>void g_async_queue_sort(GAsyncQueue*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:91</i>
	 */
	public static void g_async_queue_sort(Pointer<GtkLibrary.GAsyncQueue > queue, GtkLibrary.GCompareDataFunc func, GtkLibrary.gpointer user_data) {
		g_async_queue_sort(Pointer.getPeer(queue), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_async_queue_sort(@Ptr long queue, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_async_queue_sort_unlocked(GAsyncQueue*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:95</i>
	 */
	public static void g_async_queue_sort_unlocked(Pointer<GtkLibrary.GAsyncQueue > queue, GtkLibrary.GCompareDataFunc func, GtkLibrary.gpointer user_data) {
		g_async_queue_sort_unlocked(Pointer.getPeer(queue), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_async_queue_sort_unlocked(@Ptr long queue, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>gpointer g_async_queue_timed_pop(GAsyncQueue*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:100</i>
	 */
	public static GtkLibrary.gpointer g_async_queue_timed_pop(Pointer<GtkLibrary.GAsyncQueue > queue, Pointer<GtkLibrary.GTimeVal > end_time) {
		return Pointer.pointerToAddress(g_async_queue_timed_pop(Pointer.getPeer(queue), Pointer.getPeer(end_time)), .class);
	}
	@Ptr 
	protected native static long g_async_queue_timed_pop(@Ptr long queue, @Ptr long end_time);
	/**
	 * Original signature : <code>gpointer g_async_queue_timed_pop_unlocked(GAsyncQueue*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gasyncqueue.h:103</i>
	 */
	public static GtkLibrary.gpointer g_async_queue_timed_pop_unlocked(Pointer<GtkLibrary.GAsyncQueue > queue, Pointer<GtkLibrary.GTimeVal > end_time) {
		return Pointer.pointerToAddress(g_async_queue_timed_pop_unlocked(Pointer.getPeer(queue), Pointer.getPeer(end_time)), .class);
	}
	@Ptr 
	protected native static long g_async_queue_timed_pop_unlocked(@Ptr long queue, @Ptr long end_time);
	/**
	 * Original signature : <code>void g_on_error_query(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbacktrace.h:37</i>
	 */
	public static void g_on_error_query(Pointer<GtkLibrary.gchar > prg_name) {
		g_on_error_query(Pointer.getPeer(prg_name));
	}
	protected native static void g_on_error_query(@Ptr long prg_name);
	/**
	 * Original signature : <code>void g_on_error_stack_trace(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbacktrace.h:39</i>
	 */
	public static void g_on_error_stack_trace(Pointer<GtkLibrary.gchar > prg_name) {
		g_on_error_stack_trace(Pointer.getPeer(prg_name));
	}
	protected native static void g_on_error_stack_trace(@Ptr long prg_name);
	/**
	 * Original signature : <code>gsize g_base64_encode_step(const guchar*, gsize, gboolean, gchar*, gint*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbase64.h:4</i>
	 */
	public static gsize g_base64_encode_step(Pointer<GtkLibrary.guchar > in, gsize len, GtkLibrary.gboolean break_lines, Pointer<GtkLibrary.gchar > out, Pointer<GtkLibrary.gint > state, Pointer<GtkLibrary.gint > save) {
		return Pointer.pointerToAddress(g_base64_encode_step(Pointer.getPeer(in), Pointer.getPeer(len), Pointer.getPeer(break_lines), Pointer.getPeer(out), Pointer.getPeer(state), Pointer.getPeer(save)), .class);
	}
	@Ptr 
	protected native static long g_base64_encode_step(@Ptr long in, @Ptr long len, @Ptr long break_lines, @Ptr long out, @Ptr long state, @Ptr long save);
	/**
	 * Original signature : <code>gsize g_base64_encode_close(gboolean, gchar*, gint*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbase64.h:11</i>
	 */
	public static gsize g_base64_encode_close(GtkLibrary.gboolean break_lines, Pointer<GtkLibrary.gchar > out, Pointer<GtkLibrary.gint > state, Pointer<GtkLibrary.gint > save) {
		return Pointer.pointerToAddress(g_base64_encode_close(Pointer.getPeer(break_lines), Pointer.getPeer(out), Pointer.getPeer(state), Pointer.getPeer(save)), .class);
	}
	@Ptr 
	protected native static long g_base64_encode_close(@Ptr long break_lines, @Ptr long out, @Ptr long state, @Ptr long save);
	/**
	 * Original signature : <code>gchar* g_base64_encode(const guchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbase64.h:16</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_base64_encode(Pointer<GtkLibrary.guchar > data, gsize len) {
		return Pointer.pointerToAddress(g_base64_encode(Pointer.getPeer(data), Pointer.getPeer(len)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_base64_encode(@Ptr long data, @Ptr long len);
	/**
	 * Original signature : <code>gsize g_base64_decode_step(const gchar*, gsize, guchar*, gint*, guint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbase64.h:19</i>
	 */
	public static gsize g_base64_decode_step(Pointer<GtkLibrary.gchar > in, gsize len, Pointer<GtkLibrary.guchar > out, Pointer<GtkLibrary.gint > state, Pointer<guint > save) {
		return Pointer.pointerToAddress(g_base64_decode_step(Pointer.getPeer(in), Pointer.getPeer(len), Pointer.getPeer(out), Pointer.getPeer(state), Pointer.getPeer(save)), .class);
	}
	@Ptr 
	protected native static long g_base64_decode_step(@Ptr long in, @Ptr long len, @Ptr long out, @Ptr long state, @Ptr long save);
	/**
	 * Original signature : <code>guchar* g_base64_decode(const gchar*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbase64.h:25</i>
	 */
	public static Pointer<GtkLibrary.guchar > g_base64_decode(Pointer<GtkLibrary.gchar > text, Pointer<gsize > out_len) {
		return Pointer.pointerToAddress(g_base64_decode(Pointer.getPeer(text), Pointer.getPeer(out_len)), GtkLibrary.guchar.class);
	}
	@Ptr 
	protected native static long g_base64_decode(@Ptr long text, @Ptr long out_len);
	/**
	 * Original signature : <code>guchar* g_base64_decode_inplace(gchar*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbase64.h:28</i>
	 */
	public static Pointer<GtkLibrary.guchar > g_base64_decode_inplace(Pointer<GtkLibrary.gchar > text, Pointer<gsize > out_len) {
		return Pointer.pointerToAddress(g_base64_decode_inplace(Pointer.getPeer(text), Pointer.getPeer(out_len)), GtkLibrary.guchar.class);
	}
	@Ptr 
	protected native static long g_base64_decode_inplace(@Ptr long text, @Ptr long out_len);
	/**
	 * Original signature : <code>void g_bit_lock(volatile gint*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbitlock.h:8</i>
	 */
	public static void g_bit_lock(Pointer<GtkLibrary.gint > address, GtkLibrary.gint lock_bit) {
		g_bit_lock(Pointer.getPeer(address), Pointer.getPeer(lock_bit));
	}
	protected native static void g_bit_lock(@Ptr long address, @Ptr long lock_bit);
	/**
	 * Original signature : <code>gboolean g_bit_trylock(volatile gint*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbitlock.h:11</i>
	 */
	public static GtkLibrary.gboolean g_bit_trylock(Pointer<GtkLibrary.gint > address, GtkLibrary.gint lock_bit) {
		return Pointer.pointerToAddress(g_bit_trylock(Pointer.getPeer(address), Pointer.getPeer(lock_bit)), .class);
	}
	@Ptr 
	protected native static long g_bit_trylock(@Ptr long address, @Ptr long lock_bit);
	/**
	 * Original signature : <code>void g_bit_unlock(volatile gint*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbitlock.h:14</i>
	 */
	public static void g_bit_unlock(Pointer<GtkLibrary.gint > address, GtkLibrary.gint lock_bit) {
		g_bit_unlock(Pointer.getPeer(address), Pointer.getPeer(lock_bit));
	}
	protected native static void g_bit_unlock(@Ptr long address, @Ptr long lock_bit);
	/**
	 * Original signature : <code>void g_pointer_bit_lock(volatile void*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbitlock.h:18</i>
	 */
	public static void g_pointer_bit_lock(Pointer<? > address, GtkLibrary.gint lock_bit) {
		g_pointer_bit_lock(Pointer.getPeer(address), Pointer.getPeer(lock_bit));
	}
	protected native static void g_pointer_bit_lock(@Ptr long address, @Ptr long lock_bit);
	/**
	 * Original signature : <code>gboolean g_pointer_bit_trylock(volatile void*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbitlock.h:21</i>
	 */
	public static GtkLibrary.gboolean g_pointer_bit_trylock(Pointer<? > address, GtkLibrary.gint lock_bit) {
		return Pointer.pointerToAddress(g_pointer_bit_trylock(Pointer.getPeer(address), Pointer.getPeer(lock_bit)), .class);
	}
	@Ptr 
	protected native static long g_pointer_bit_trylock(@Ptr long address, @Ptr long lock_bit);
	/**
	 * Original signature : <code>void g_pointer_bit_unlock(volatile void*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbitlock.h:24</i>
	 */
	public static void g_pointer_bit_unlock(Pointer<? > address, GtkLibrary.gint lock_bit) {
		g_pointer_bit_unlock(Pointer.getPeer(address), Pointer.getPeer(lock_bit));
	}
	protected native static void g_pointer_bit_unlock(@Ptr long address, @Ptr long lock_bit);
	/**
	 * Original signature : <code>GQuark g_bookmark_file_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:41</i>
	 */
	public static GtkLibrary.GQuark g_bookmark_file_error_quark() {
		return Pointer.pointerToAddress(g_bookmark_file_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_error_quark$2();
	/**
	 * Original signature : <code>GBookmarkFile* g_bookmark_file_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:52</i>
	 */
	public static Pointer<GtkLibrary.GBookmarkFile > g_bookmark_file_new() {
		return Pointer.pointerToAddress(g_bookmark_file_new$2(), GtkLibrary.GBookmarkFile.class);
	}
	@Ptr 
	protected native static long g_bookmark_file_new$2();
	/**
	 * Original signature : <code>void g_bookmark_file_free(GBookmarkFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:54</i>
	 */
	public static void g_bookmark_file_free(Pointer<GtkLibrary.GBookmarkFile > bookmark) {
		g_bookmark_file_free(Pointer.getPeer(bookmark));
	}
	protected native static void g_bookmark_file_free(@Ptr long bookmark);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_load_from_file(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:57</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_load_from_file(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > filename, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_load_from_file(Pointer.getPeer(bookmark), Pointer.getPeer(filename), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_load_from_file(@Ptr long bookmark, @Ptr long filename, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_load_from_data(GBookmarkFile*, const gchar*, gsize, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:61</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_load_from_data(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > data, gsize length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_load_from_data(Pointer.getPeer(bookmark), Pointer.getPeer(data), Pointer.getPeer(length), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_load_from_data(@Ptr long bookmark, @Ptr long data, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_load_from_data_dirs(GBookmarkFile*, const gchar*, gchar**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:66</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_load_from_data_dirs(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > file, Pointer<Pointer<GtkLibrary.gchar > > full_path, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_load_from_data_dirs(Pointer.getPeer(bookmark), Pointer.getPeer(file), Pointer.getPeer(full_path), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_load_from_data_dirs(@Ptr long bookmark, @Ptr long file, @Ptr long full_path, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_bookmark_file_to_data(GBookmarkFile*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:71</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_bookmark_file_to_data(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<gsize > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_to_data(Pointer.getPeer(bookmark), Pointer.getPeer(length), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_bookmark_file_to_data(@Ptr long bookmark, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_to_file(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:75</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_to_file(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > filename, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_to_file(Pointer.getPeer(bookmark), Pointer.getPeer(filename), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_to_file(@Ptr long bookmark, @Ptr long filename, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_title(GBookmarkFile*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:80</i>
	 */
	public static void g_bookmark_file_set_title(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<GtkLibrary.gchar > title) {
		g_bookmark_file_set_title(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(title));
	}
	protected native static void g_bookmark_file_set_title(@Ptr long bookmark, @Ptr long uri, @Ptr long title);
	/**
	 * Original signature : <code>gchar* g_bookmark_file_get_title(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:84</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_bookmark_file_get_title(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_title(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_bookmark_file_get_title(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_description(GBookmarkFile*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:88</i>
	 */
	public static void g_bookmark_file_set_description(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<GtkLibrary.gchar > description) {
		g_bookmark_file_set_description(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(description));
	}
	protected native static void g_bookmark_file_set_description(@Ptr long bookmark, @Ptr long uri, @Ptr long description);
	/**
	 * Original signature : <code>gchar* g_bookmark_file_get_description(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:92</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_bookmark_file_get_description(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_description(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_bookmark_file_get_description(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_mime_type(GBookmarkFile*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:96</i>
	 */
	public static void g_bookmark_file_set_mime_type(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<GtkLibrary.gchar > mime_type) {
		g_bookmark_file_set_mime_type(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(mime_type));
	}
	protected native static void g_bookmark_file_set_mime_type(@Ptr long bookmark, @Ptr long uri, @Ptr long mime_type);
	/**
	 * Original signature : <code>gchar* g_bookmark_file_get_mime_type(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:100</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_bookmark_file_get_mime_type(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_mime_type(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_bookmark_file_get_mime_type(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_groups(GBookmarkFile*, const gchar*, const gchar**, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:104</i>
	 */
	public static void g_bookmark_file_set_groups(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<Pointer<GtkLibrary.gchar > > groups, gsize length) {
		g_bookmark_file_set_groups(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(groups), Pointer.getPeer(length));
	}
	protected native static void g_bookmark_file_set_groups(@Ptr long bookmark, @Ptr long uri, @Ptr long groups, @Ptr long length);
	/**
	 * Original signature : <code>void g_bookmark_file_add_group(GBookmarkFile*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:109</i>
	 */
	public static void g_bookmark_file_add_group(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<GtkLibrary.gchar > group) {
		g_bookmark_file_add_group(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(group));
	}
	protected native static void g_bookmark_file_add_group(@Ptr long bookmark, @Ptr long uri, @Ptr long group);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_has_group(GBookmarkFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:113</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_has_group(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<GtkLibrary.gchar > group, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_has_group(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(group), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_has_group(@Ptr long bookmark, @Ptr long uri, @Ptr long group, @Ptr long error);
	/**
	 * Original signature : <code>gchar** g_bookmark_file_get_groups(GBookmarkFile*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:118</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_bookmark_file_get_groups(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<gsize > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_groups(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(length), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_bookmark_file_get_groups(@Ptr long bookmark, @Ptr long uri, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_add_application(GBookmarkFile*, const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:123</i>
	 */
	public static void g_bookmark_file_add_application(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<GtkLibrary.gchar > name, Pointer<GtkLibrary.gchar > exec) {
		g_bookmark_file_add_application(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(name), Pointer.getPeer(exec));
	}
	protected native static void g_bookmark_file_add_application(@Ptr long bookmark, @Ptr long uri, @Ptr long name, @Ptr long exec);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_has_application(GBookmarkFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:128</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_has_application(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<GtkLibrary.gchar > name, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_has_application(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(name), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_has_application(@Ptr long bookmark, @Ptr long uri, @Ptr long name, @Ptr long error);
	/**
	 * Original signature : <code>gchar** g_bookmark_file_get_applications(GBookmarkFile*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:133</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_bookmark_file_get_applications(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<gsize > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_applications(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(length), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_bookmark_file_get_applications(@Ptr long bookmark, @Ptr long uri, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_set_app_info(GBookmarkFile*, const gchar*, const gchar*, const gchar*, gint, time_t, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:138</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_set_app_info(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<GtkLibrary.gchar > name, Pointer<GtkLibrary.gchar > exec, GtkLibrary.gint count, @org.bridj.ann.CLong long stamp, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_set_app_info(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(name), Pointer.getPeer(exec), Pointer.getPeer(count), stamp, Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_set_app_info(@Ptr long bookmark, @Ptr long uri, @Ptr long name, @Ptr long exec, @Ptr long count, @org.bridj.ann.CLong long stamp, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_get_app_info(GBookmarkFile*, const gchar*, const gchar*, gchar**, guint*, time_t*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:146</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_get_app_info(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<GtkLibrary.gchar > name, Pointer<Pointer<GtkLibrary.gchar > > exec, Pointer<guint > count, Pointer<org.bridj.CLong > stamp, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_app_info(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(name), Pointer.getPeer(exec), Pointer.getPeer(count), Pointer.getPeer(stamp), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_get_app_info(@Ptr long bookmark, @Ptr long uri, @Ptr long name, @Ptr long exec, @Ptr long count, @Ptr long stamp, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_is_private(GBookmarkFile*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:154</i>
	 */
	public static void g_bookmark_file_set_is_private(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, GtkLibrary.gboolean is_private) {
		g_bookmark_file_set_is_private(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(is_private));
	}
	protected native static void g_bookmark_file_set_is_private(@Ptr long bookmark, @Ptr long uri, @Ptr long is_private);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_get_is_private(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:158</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_get_is_private(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_is_private(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_get_is_private(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_icon(GBookmarkFile*, const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:162</i>
	 */
	public static void g_bookmark_file_set_icon(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<GtkLibrary.gchar > href, Pointer<GtkLibrary.gchar > mime_type) {
		g_bookmark_file_set_icon(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(href), Pointer.getPeer(mime_type));
	}
	protected native static void g_bookmark_file_set_icon(@Ptr long bookmark, @Ptr long uri, @Ptr long href, @Ptr long mime_type);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_get_icon(GBookmarkFile*, const gchar*, gchar**, gchar**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:167</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_get_icon(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<Pointer<GtkLibrary.gchar > > href, Pointer<Pointer<GtkLibrary.gchar > > mime_type, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_get_icon(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(href), Pointer.getPeer(mime_type), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_get_icon(@Ptr long bookmark, @Ptr long uri, @Ptr long href, @Ptr long mime_type, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_added(GBookmarkFile*, const gchar*, time_t)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:173</i>
	 */
	public static void g_bookmark_file_set_added(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, @org.bridj.ann.CLong long added) {
		g_bookmark_file_set_added(Pointer.getPeer(bookmark), Pointer.getPeer(uri), added);
	}
	protected native static void g_bookmark_file_set_added(@Ptr long bookmark, @Ptr long uri, @org.bridj.ann.CLong long added);
	/**
	 * Original signature : <code>time_t g_bookmark_file_get_added(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:177</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_bookmark_file_get_added(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_get_added(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_bookmark_file_get_added(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_modified(GBookmarkFile*, const gchar*, time_t)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:181</i>
	 */
	public static void g_bookmark_file_set_modified(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, @org.bridj.ann.CLong long modified) {
		g_bookmark_file_set_modified(Pointer.getPeer(bookmark), Pointer.getPeer(uri), modified);
	}
	protected native static void g_bookmark_file_set_modified(@Ptr long bookmark, @Ptr long uri, @org.bridj.ann.CLong long modified);
	/**
	 * Original signature : <code>time_t g_bookmark_file_get_modified(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:185</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_bookmark_file_get_modified(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_get_modified(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_bookmark_file_get_modified(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>void g_bookmark_file_set_visited(GBookmarkFile*, const gchar*, time_t)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:189</i>
	 */
	public static void g_bookmark_file_set_visited(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, @org.bridj.ann.CLong long visited) {
		g_bookmark_file_set_visited(Pointer.getPeer(bookmark), Pointer.getPeer(uri), visited);
	}
	protected native static void g_bookmark_file_set_visited(@Ptr long bookmark, @Ptr long uri, @org.bridj.ann.CLong long visited);
	/**
	 * Original signature : <code>time_t g_bookmark_file_get_visited(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:193</i>
	 */
	@org.bridj.ann.CLong 
	public static long g_bookmark_file_get_visited(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<Pointer<GError > > error) {
		return g_bookmark_file_get_visited(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error));
	}
	@org.bridj.ann.CLong 
	protected native static long g_bookmark_file_get_visited(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_has_item(GBookmarkFile*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:197</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_has_item(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri) {
		return Pointer.pointerToAddress(g_bookmark_file_has_item(Pointer.getPeer(bookmark), Pointer.getPeer(uri)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_has_item(@Ptr long bookmark, @Ptr long uri);
	/**
	 * Original signature : <code>gint g_bookmark_file_get_size(GBookmarkFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:200</i>
	 */
	public static GtkLibrary.gint g_bookmark_file_get_size(Pointer<GtkLibrary.GBookmarkFile > bookmark) {
		return Pointer.pointerToAddress(g_bookmark_file_get_size(Pointer.getPeer(bookmark)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_get_size(@Ptr long bookmark);
	/**
	 * Original signature : <code>gchar** g_bookmark_file_get_uris(GBookmarkFile*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:202</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_bookmark_file_get_uris(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<gsize > length) {
		return Pointer.pointerToAddress(g_bookmark_file_get_uris(Pointer.getPeer(bookmark), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_bookmark_file_get_uris(@Ptr long bookmark, @Ptr long length);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_remove_group(GBookmarkFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:205</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_remove_group(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<GtkLibrary.gchar > group, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_remove_group(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(group), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_remove_group(@Ptr long bookmark, @Ptr long uri, @Ptr long group, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_remove_application(GBookmarkFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:210</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_remove_application(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<GtkLibrary.gchar > name, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_remove_application(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(name), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_remove_application(@Ptr long bookmark, @Ptr long uri, @Ptr long name, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_remove_item(GBookmarkFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:215</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_remove_item(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > uri, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_remove_item(Pointer.getPeer(bookmark), Pointer.getPeer(uri), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_remove_item(@Ptr long bookmark, @Ptr long uri, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_bookmark_file_move_item(GBookmarkFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbookmarkfile.h:219</i>
	 */
	public static GtkLibrary.gboolean g_bookmark_file_move_item(Pointer<GtkLibrary.GBookmarkFile > bookmark, Pointer<GtkLibrary.gchar > old_uri, Pointer<GtkLibrary.gchar > new_uri, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_bookmark_file_move_item(Pointer.getPeer(bookmark), Pointer.getPeer(old_uri), Pointer.getPeer(new_uri), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_bookmark_file_move_item(@Ptr long bookmark, @Ptr long old_uri, @Ptr long new_uri, @Ptr long error);
	/**
	 * Original signature : <code>GBytes* g_bytes_new(gconstpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:4</i>
	 */
	public static Pointer<GtkLibrary.GBytes > g_bytes_new(GtkLibrary.gconstpointer data, gsize size) {
		return Pointer.pointerToAddress(g_bytes_new(Pointer.getPeer(data), Pointer.getPeer(size)), GtkLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_bytes_new(@Ptr long data, @Ptr long size);
	/**
	 * Original signature : <code>GBytes* g_bytes_new_take(gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:8</i>
	 */
	public static Pointer<GtkLibrary.GBytes > g_bytes_new_take(GtkLibrary.gpointer data, gsize size) {
		return Pointer.pointerToAddress(g_bytes_new_take(Pointer.getPeer(data), Pointer.getPeer(size)), GtkLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_bytes_new_take(@Ptr long data, @Ptr long size);
	/**
	 * Original signature : <code>GBytes* g_bytes_new_static(gconstpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:12</i>
	 */
	public static Pointer<GtkLibrary.GBytes > g_bytes_new_static(GtkLibrary.gconstpointer data, gsize size) {
		return Pointer.pointerToAddress(g_bytes_new_static(Pointer.getPeer(data), Pointer.getPeer(size)), GtkLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_bytes_new_static(@Ptr long data, @Ptr long size);
	/**
	 * Original signature : <code>GBytes* g_bytes_new_with_free_func(gconstpointer, gsize, GDestroyNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:16</i>
	 */
	public static Pointer<GtkLibrary.GBytes > g_bytes_new_with_free_func(GtkLibrary.gconstpointer data, gsize size, GtkLibrary.GDestroyNotify free_func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_bytes_new_with_free_func(Pointer.getPeer(data), Pointer.getPeer(size), Pointer.getPeer(free_func), Pointer.getPeer(user_data)), GtkLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_bytes_new_with_free_func(@Ptr long data, @Ptr long size, @Ptr long free_func, @Ptr long user_data);
	/**
	 * Original signature : <code>GBytes* g_bytes_new_from_bytes(GBytes*, gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:22</i>
	 */
	public static Pointer<GtkLibrary.GBytes > g_bytes_new_from_bytes(Pointer<GtkLibrary.GBytes > bytes, gsize offset, gsize length) {
		return Pointer.pointerToAddress(g_bytes_new_from_bytes(Pointer.getPeer(bytes), Pointer.getPeer(offset), Pointer.getPeer(length)), GtkLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_bytes_new_from_bytes(@Ptr long bytes, @Ptr long offset, @Ptr long length);
	/**
	 * Original signature : <code>gconstpointer g_bytes_get_data(GBytes*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:27</i>
	 */
	public static GtkLibrary.gconstpointer g_bytes_get_data(Pointer<GtkLibrary.GBytes > bytes, Pointer<gsize > size) {
		return Pointer.pointerToAddress(g_bytes_get_data(Pointer.getPeer(bytes), Pointer.getPeer(size)), .class);
	}
	@Ptr 
	protected native static long g_bytes_get_data(@Ptr long bytes, @Ptr long size);
	/**
	 * Original signature : <code>gsize g_bytes_get_size(GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:31</i>
	 */
	public static gsize g_bytes_get_size(Pointer<GtkLibrary.GBytes > bytes) {
		return Pointer.pointerToAddress(g_bytes_get_size(Pointer.getPeer(bytes)), .class);
	}
	@Ptr 
	protected native static long g_bytes_get_size(@Ptr long bytes);
	/**
	 * Original signature : <code>GBytes* g_bytes_ref(GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:34</i>
	 */
	public static Pointer<GtkLibrary.GBytes > g_bytes_ref(Pointer<GtkLibrary.GBytes > bytes) {
		return Pointer.pointerToAddress(g_bytes_ref(Pointer.getPeer(bytes)), GtkLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_bytes_ref(@Ptr long bytes);
	/**
	 * Original signature : <code>void g_bytes_unref(GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:37</i>
	 */
	public static void g_bytes_unref(Pointer<GtkLibrary.GBytes > bytes) {
		g_bytes_unref(Pointer.getPeer(bytes));
	}
	protected native static void g_bytes_unref(@Ptr long bytes);
	/**
	 * Original signature : <code>gpointer g_bytes_unref_to_data(GBytes*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:40</i>
	 */
	public static GtkLibrary.gpointer g_bytes_unref_to_data(Pointer<GtkLibrary.GBytes > bytes, Pointer<gsize > size) {
		return Pointer.pointerToAddress(g_bytes_unref_to_data(Pointer.getPeer(bytes), Pointer.getPeer(size)), .class);
	}
	@Ptr 
	protected native static long g_bytes_unref_to_data(@Ptr long bytes, @Ptr long size);
	/**
	 * Original signature : <code>GByteArray* g_bytes_unref_to_array(GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:44</i>
	 */
	public static Pointer<GtkLibrary.GByteArray > g_bytes_unref_to_array(Pointer<GtkLibrary.GBytes > bytes) {
		return Pointer.pointerToAddress(g_bytes_unref_to_array(Pointer.getPeer(bytes)), GtkLibrary.GByteArray.class);
	}
	@Ptr 
	protected native static long g_bytes_unref_to_array(@Ptr long bytes);
	/**
	 * Original signature : <code>guint g_bytes_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:47</i>
	 */
	public static guint g_bytes_hash(GtkLibrary.gconstpointer bytes) {
		return Pointer.pointerToAddress(g_bytes_hash(Pointer.getPeer(bytes)), .class);
	}
	@Ptr 
	protected native static long g_bytes_hash(@Ptr long bytes);
	/**
	 * Original signature : <code>gboolean g_bytes_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:50</i>
	 */
	public static GtkLibrary.gboolean g_bytes_equal(GtkLibrary.gconstpointer bytes1, GtkLibrary.gconstpointer bytes2) {
		return Pointer.pointerToAddress(g_bytes_equal(Pointer.getPeer(bytes1), Pointer.getPeer(bytes2)), .class);
	}
	@Ptr 
	protected native static long g_bytes_equal(@Ptr long bytes1, @Ptr long bytes2);
	/**
	 * Original signature : <code>gint g_bytes_compare(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gbytes.h:54</i>
	 */
	public static GtkLibrary.gint g_bytes_compare(GtkLibrary.gconstpointer bytes1, GtkLibrary.gconstpointer bytes2) {
		return Pointer.pointerToAddress(g_bytes_compare(Pointer.getPeer(bytes1), Pointer.getPeer(bytes2)), .class);
	}
	@Ptr 
	protected native static long g_bytes_compare(@Ptr long bytes1, @Ptr long bytes2);
	/**
	 * Original signature : <code>gboolean g_get_charset(const char**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gcharset.h:4</i>
	 */
	public static GtkLibrary.gboolean g_get_charset(Pointer<Pointer<Byte > > charset) {
		return Pointer.pointerToAddress(g_get_charset(Pointer.getPeer(charset)), .class);
	}
	@Ptr 
	protected native static long g_get_charset(@Ptr long charset);
	/**
	 * Original signature : <code>gchar* g_get_codeset()</code><br>
	 * <i>native declaration : glib-2.0/glib/gcharset.h:6</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_codeset() {
		return Pointer.pointerToAddress(g_get_codeset$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_codeset$2();
	/**
	 * Original signature : <code>const gchar** g_get_language_names()</code><br>
	 * <i>native declaration : glib-2.0/glib/gcharset.h:9</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_get_language_names() {
		return Pointer.pointerToAddress(g_get_language_names$2(), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_get_language_names$2();
	/**
	 * Original signature : <code>gchar** g_get_locale_variants(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gcharset.h:11</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_get_locale_variants(Pointer<GtkLibrary.gchar > locale) {
		return Pointer.pointerToAddress(g_get_locale_variants(Pointer.getPeer(locale)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_get_locale_variants(@Ptr long locale);
	/**
	 * Original signature : <code>gssize g_checksum_type_get_length(GChecksumType)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:37</i>
	 */
	public static GtkLibrary.gssize g_checksum_type_get_length(GtkLibrary.GChecksumType checksum_type) {
		return Pointer.pointerToAddress(g_checksum_type_get_length(Pointer.getPeer(checksum_type)), .class);
	}
	@Ptr 
	protected native static long g_checksum_type_get_length(@Ptr long checksum_type);
	/**
	 * Original signature : <code>GChecksum* g_checksum_new(GChecksumType)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:40</i>
	 */
	public static Pointer<GtkLibrary.GChecksum > g_checksum_new(GtkLibrary.GChecksumType checksum_type) {
		return Pointer.pointerToAddress(g_checksum_new(Pointer.getPeer(checksum_type)), GtkLibrary.GChecksum.class);
	}
	@Ptr 
	protected native static long g_checksum_new(@Ptr long checksum_type);
	/**
	 * Original signature : <code>void g_checksum_reset(GChecksum*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:42</i>
	 */
	public static void g_checksum_reset(Pointer<GtkLibrary.GChecksum > checksum) {
		g_checksum_reset(Pointer.getPeer(checksum));
	}
	protected native static void g_checksum_reset(@Ptr long checksum);
	/**
	 * Original signature : <code>GChecksum* g_checksum_copy(const GChecksum*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:44</i>
	 */
	public static Pointer<GtkLibrary.GChecksum > g_checksum_copy(Pointer<GtkLibrary.GChecksum > checksum) {
		return Pointer.pointerToAddress(g_checksum_copy(Pointer.getPeer(checksum)), GtkLibrary.GChecksum.class);
	}
	@Ptr 
	protected native static long g_checksum_copy(@Ptr long checksum);
	/**
	 * Original signature : <code>void g_checksum_free(GChecksum*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:46</i>
	 */
	public static void g_checksum_free(Pointer<GtkLibrary.GChecksum > checksum) {
		g_checksum_free(Pointer.getPeer(checksum));
	}
	protected native static void g_checksum_free(@Ptr long checksum);
	/**
	 * Original signature : <code>void g_checksum_update(GChecksum*, const guchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:48</i>
	 */
	public static void g_checksum_update(Pointer<GtkLibrary.GChecksum > checksum, Pointer<GtkLibrary.guchar > data, GtkLibrary.gssize length) {
		g_checksum_update(Pointer.getPeer(checksum), Pointer.getPeer(data), Pointer.getPeer(length));
	}
	protected native static void g_checksum_update(@Ptr long checksum, @Ptr long data, @Ptr long length);
	/**
	 * Original signature : <code>gchar* g_checksum_get_string(GChecksum*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:52</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_checksum_get_string(Pointer<GtkLibrary.GChecksum > checksum) {
		return Pointer.pointerToAddress(g_checksum_get_string(Pointer.getPeer(checksum)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_checksum_get_string(@Ptr long checksum);
	/**
	 * Original signature : <code>void g_checksum_get_digest(GChecksum*, guint8*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:54</i>
	 */
	public static void g_checksum_get_digest(Pointer<GtkLibrary.GChecksum > checksum, Pointer<GtkLibrary.guint8 > buffer, Pointer<gsize > digest_len) {
		g_checksum_get_digest(Pointer.getPeer(checksum), Pointer.getPeer(buffer), Pointer.getPeer(digest_len));
	}
	protected native static void g_checksum_get_digest(@Ptr long checksum, @Ptr long buffer, @Ptr long digest_len);
	/**
	 * Original signature : <code>gchar* g_compute_checksum_for_data(GChecksumType, const guchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:59</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_compute_checksum_for_data(GtkLibrary.GChecksumType checksum_type, Pointer<GtkLibrary.guchar > data, gsize length) {
		return Pointer.pointerToAddress(g_compute_checksum_for_data(Pointer.getPeer(checksum_type), Pointer.getPeer(data), Pointer.getPeer(length)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_compute_checksum_for_data(@Ptr long checksum_type, @Ptr long data, @Ptr long length);
	/**
	 * Original signature : <code>gchar* g_compute_checksum_for_string(GChecksumType, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:63</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_compute_checksum_for_string(GtkLibrary.GChecksumType checksum_type, Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize length) {
		return Pointer.pointerToAddress(g_compute_checksum_for_string(Pointer.getPeer(checksum_type), Pointer.getPeer(str), Pointer.getPeer(length)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_compute_checksum_for_string(@Ptr long checksum_type, @Ptr long str, @Ptr long length);
	/**
	 * Original signature : <code>gchar* g_compute_checksum_for_bytes(GChecksumType, GBytes*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gchecksum.h:68</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_compute_checksum_for_bytes(GtkLibrary.GChecksumType checksum_type, Pointer<GtkLibrary.GBytes > data) {
		return Pointer.pointerToAddress(g_compute_checksum_for_bytes(Pointer.getPeer(checksum_type), Pointer.getPeer(data)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_compute_checksum_for_bytes(@Ptr long checksum_type, @Ptr long data);
	/**
	 * Original signature : <code>GQuark g_convert_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:34</i>
	 */
	public static GtkLibrary.GQuark g_convert_error_quark() {
		return Pointer.pointerToAddress(g_convert_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_convert_error_quark$2();
	/**
	 * Original signature : <code>GIConv g_iconv_open(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:46</i>
	 */
	public static GtkLibrary.GIConv g_iconv_open(Pointer<GtkLibrary.gchar > to_codeset, Pointer<GtkLibrary.gchar > from_codeset) {
		return Pointer.pointerToAddress(g_iconv_open(Pointer.getPeer(to_codeset), Pointer.getPeer(from_codeset)), .class);
	}
	@Ptr 
	protected native static long g_iconv_open(@Ptr long to_codeset, @Ptr long from_codeset);
	/**
	 * Original signature : <code>gsize g_iconv(GIConv, gchar**, gsize*, gchar**, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:49</i>
	 */
	public static gsize g_iconv(GtkLibrary.GIConv converter, Pointer<Pointer<GtkLibrary.gchar > > inbuf, Pointer<gsize > inbytes_left, Pointer<Pointer<GtkLibrary.gchar > > outbuf, Pointer<gsize > outbytes_left) {
		return Pointer.pointerToAddress(g_iconv(Pointer.getPeer(converter), Pointer.getPeer(inbuf), Pointer.getPeer(inbytes_left), Pointer.getPeer(outbuf), Pointer.getPeer(outbytes_left)), .class);
	}
	@Ptr 
	protected native static long g_iconv(@Ptr long converter, @Ptr long inbuf, @Ptr long inbytes_left, @Ptr long outbuf, @Ptr long outbytes_left);
	/**
	 * Original signature : <code>gint g_iconv_close(GIConv)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:55</i>
	 */
	public static GtkLibrary.gint g_iconv_close(GtkLibrary.GIConv converter) {
		return Pointer.pointerToAddress(g_iconv_close(Pointer.getPeer(converter)), .class);
	}
	@Ptr 
	protected native static long g_iconv_close(@Ptr long converter);
	/**
	 * Original signature : <code>gchar* g_convert(const gchar*, gssize, const gchar*, const gchar*, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:59</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_convert(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize len, Pointer<GtkLibrary.gchar > to_codeset, Pointer<GtkLibrary.gchar > from_codeset, Pointer<gsize > bytes_read, Pointer<gsize > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_convert(Pointer.getPeer(str), Pointer.getPeer(len), Pointer.getPeer(to_codeset), Pointer.getPeer(from_codeset), Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_convert(@Ptr long str, @Ptr long len, @Ptr long to_codeset, @Ptr long from_codeset, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_convert_with_iconv(const gchar*, gssize, GIConv, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:67</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_convert_with_iconv(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize len, GtkLibrary.GIConv converter, Pointer<gsize > bytes_read, Pointer<gsize > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_convert_with_iconv(Pointer.getPeer(str), Pointer.getPeer(len), Pointer.getPeer(converter), Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_convert_with_iconv(@Ptr long str, @Ptr long len, @Ptr long converter, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_convert_with_fallback(const gchar*, gssize, const gchar*, const gchar*, const gchar*, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:74</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_convert_with_fallback(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize len, Pointer<GtkLibrary.gchar > to_codeset, Pointer<GtkLibrary.gchar > from_codeset, Pointer<GtkLibrary.gchar > fallback, Pointer<gsize > bytes_read, Pointer<gsize > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_convert_with_fallback(Pointer.getPeer(str), Pointer.getPeer(len), Pointer.getPeer(to_codeset), Pointer.getPeer(from_codeset), Pointer.getPeer(fallback), Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_convert_with_fallback(@Ptr long str, @Ptr long len, @Ptr long to_codeset, @Ptr long from_codeset, @Ptr long fallback, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Convert between libc's idea of strings and UTF-8.<br>
	 * Original signature : <code>gchar* g_locale_to_utf8(const gchar*, gssize, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:87</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_locale_to_utf8(Pointer<GtkLibrary.gchar > opsysstring, GtkLibrary.gssize len, Pointer<gsize > bytes_read, Pointer<gsize > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_locale_to_utf8(Pointer.getPeer(opsysstring), Pointer.getPeer(len), Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_locale_to_utf8(@Ptr long opsysstring, @Ptr long len, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_locale_from_utf8(const gchar*, gssize, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:93</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_locale_from_utf8(Pointer<GtkLibrary.gchar > utf8string, GtkLibrary.gssize len, Pointer<gsize > bytes_read, Pointer<gsize > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_locale_from_utf8(Pointer.getPeer(utf8string), Pointer.getPeer(len), Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_locale_from_utf8(@Ptr long utf8string, @Ptr long len, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Convert between the operating system (or C runtime)<br>
	 * representation of file names and UTF-8.<br>
	 * Original signature : <code>gchar* g_filename_to_utf8(const gchar*, gssize, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:103</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_filename_to_utf8(Pointer<GtkLibrary.gchar > opsysstring, GtkLibrary.gssize len, Pointer<gsize > bytes_read, Pointer<gsize > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_filename_to_utf8(Pointer.getPeer(opsysstring), Pointer.getPeer(len), Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_filename_to_utf8(@Ptr long opsysstring, @Ptr long len, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_filename_from_utf8(const gchar*, gssize, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:109</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_filename_from_utf8(Pointer<GtkLibrary.gchar > utf8string, GtkLibrary.gssize len, Pointer<gsize > bytes_read, Pointer<gsize > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_filename_from_utf8(Pointer.getPeer(utf8string), Pointer.getPeer(len), Pointer.getPeer(bytes_read), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_filename_from_utf8(@Ptr long utf8string, @Ptr long len, @Ptr long bytes_read, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_filename_from_uri(const gchar*, gchar**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:116</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_filename_from_uri(Pointer<GtkLibrary.gchar > uri, Pointer<Pointer<GtkLibrary.gchar > > hostname, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_filename_from_uri(Pointer.getPeer(uri), Pointer.getPeer(hostname), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_filename_from_uri(@Ptr long uri, @Ptr long hostname, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_filename_to_uri(const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:121</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_filename_to_uri(Pointer<GtkLibrary.gchar > filename, Pointer<GtkLibrary.gchar > hostname, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_filename_to_uri(Pointer.getPeer(filename), Pointer.getPeer(hostname), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_filename_to_uri(@Ptr long filename, @Ptr long hostname, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_filename_display_name(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:125</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_filename_display_name(Pointer<GtkLibrary.gchar > filename) {
		return Pointer.pointerToAddress(g_filename_display_name(Pointer.getPeer(filename)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_filename_display_name(@Ptr long filename);
	/**
	 * Original signature : <code>gboolean g_get_filename_charsets(const gchar***)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:127</i>
	 */
	public static GtkLibrary.gboolean g_get_filename_charsets(Pointer<Pointer<Pointer<GtkLibrary.gchar > > > charsets) {
		return Pointer.pointerToAddress(g_get_filename_charsets(Pointer.getPeer(charsets)), .class);
	}
	@Ptr 
	protected native static long g_get_filename_charsets(@Ptr long charsets);
	/**
	 * Original signature : <code>gchar* g_filename_display_basename(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:130</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_filename_display_basename(Pointer<GtkLibrary.gchar > filename) {
		return Pointer.pointerToAddress(g_filename_display_basename(Pointer.getPeer(filename)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_filename_display_basename(@Ptr long filename);
	/**
	 * Original signature : <code>gchar** g_uri_list_extract_uris(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gconvert.h:133</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_uri_list_extract_uris(Pointer<GtkLibrary.gchar > uri_list) {
		return Pointer.pointerToAddress(g_uri_list_extract_uris(Pointer.getPeer(uri_list)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_uri_list_extract_uris(@Ptr long uri_list);
	/**
	 * Keyed Data List<br>
	 * Original signature : <code>void g_datalist_init(GData**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:12</i>
	 */
	public static void g_datalist_init(Pointer<Pointer<GtkLibrary.GData > > datalist) {
		g_datalist_init(Pointer.getPeer(datalist));
	}
	protected native static void g_datalist_init(@Ptr long datalist);
	/**
	 * Original signature : <code>void g_datalist_clear(GData**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:14</i>
	 */
	public static void g_datalist_clear(Pointer<Pointer<GtkLibrary.GData > > datalist) {
		g_datalist_clear(Pointer.getPeer(datalist));
	}
	protected native static void g_datalist_clear(@Ptr long datalist);
	/**
	 * Original signature : <code>gpointer g_datalist_id_get_data(GData**, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:16</i>
	 */
	public static GtkLibrary.gpointer g_datalist_id_get_data(Pointer<Pointer<GtkLibrary.GData > > datalist, GtkLibrary.GQuark key_id) {
		return Pointer.pointerToAddress(g_datalist_id_get_data(Pointer.getPeer(datalist), Pointer.getPeer(key_id)), .class);
	}
	@Ptr 
	protected native static long g_datalist_id_get_data(@Ptr long datalist, @Ptr long key_id);
	/**
	 * Original signature : <code>void g_datalist_id_set_data_full(GData**, GQuark, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:19</i>
	 */
	public static void g_datalist_id_set_data_full(Pointer<Pointer<GtkLibrary.GData > > datalist, GtkLibrary.GQuark key_id, GtkLibrary.gpointer data, GtkLibrary.GDestroyNotify destroy_func) {
		g_datalist_id_set_data_full(Pointer.getPeer(datalist), Pointer.getPeer(key_id), Pointer.getPeer(data), Pointer.getPeer(destroy_func));
	}
	protected native static void g_datalist_id_set_data_full(@Ptr long datalist, @Ptr long key_id, @Ptr long data, @Ptr long destroy_func);
	/**
	 * Original signature : <code>gpointer g_datalist_id_dup_data(GData**, GQuark, GDuplicateFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:27</i>
	 */
	public static GtkLibrary.gpointer g_datalist_id_dup_data(Pointer<Pointer<GtkLibrary.GData > > datalist, GtkLibrary.GQuark key_id, GtkLibrary.GDuplicateFunc dup_func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_datalist_id_dup_data(Pointer.getPeer(datalist), Pointer.getPeer(key_id), Pointer.getPeer(dup_func), Pointer.getPeer(user_data)), .class);
	}
	@Ptr 
	protected native static long g_datalist_id_dup_data(@Ptr long datalist, @Ptr long key_id, @Ptr long dup_func, @Ptr long user_data);
	/**
	 * Original signature : <code>gboolean g_datalist_id_replace_data(GData**, GQuark, gpointer, gpointer, GDestroyNotify, GDestroyNotify*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:32</i>
	 */
	public static GtkLibrary.gboolean g_datalist_id_replace_data(Pointer<Pointer<GtkLibrary.GData > > datalist, GtkLibrary.GQuark key_id, GtkLibrary.gpointer oldval, GtkLibrary.gpointer newval, GtkLibrary.GDestroyNotify destroy, Pointer<GtkLibrary.GDestroyNotify > old_destroy) {
		return Pointer.pointerToAddress(g_datalist_id_replace_data(Pointer.getPeer(datalist), Pointer.getPeer(key_id), Pointer.getPeer(oldval), Pointer.getPeer(newval), Pointer.getPeer(destroy), Pointer.getPeer(old_destroy)), .class);
	}
	@Ptr 
	protected native static long g_datalist_id_replace_data(@Ptr long datalist, @Ptr long key_id, @Ptr long oldval, @Ptr long newval, @Ptr long destroy, @Ptr long old_destroy);
	/**
	 * Original signature : <code>gpointer g_datalist_id_remove_no_notify(GData**, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:40</i>
	 */
	public static GtkLibrary.gpointer g_datalist_id_remove_no_notify(Pointer<Pointer<GtkLibrary.GData > > datalist, GtkLibrary.GQuark key_id) {
		return Pointer.pointerToAddress(g_datalist_id_remove_no_notify(Pointer.getPeer(datalist), Pointer.getPeer(key_id)), .class);
	}
	@Ptr 
	protected native static long g_datalist_id_remove_no_notify(@Ptr long datalist, @Ptr long key_id);
	/**
	 * Original signature : <code>void g_datalist_foreach(GData**, GDataForeachFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:43</i>
	 */
	public static void g_datalist_foreach(Pointer<Pointer<GtkLibrary.GData > > datalist, GtkLibrary.GDataForeachFunc func, GtkLibrary.gpointer user_data) {
		g_datalist_foreach(Pointer.getPeer(datalist), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_datalist_foreach(@Ptr long datalist, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_datalist_set_flags(GData**, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:57</i>
	 */
	public static void g_datalist_set_flags(Pointer<Pointer<GtkLibrary.GData > > datalist, guint flags) {
		g_datalist_set_flags(Pointer.getPeer(datalist), Pointer.getPeer(flags));
	}
	protected native static void g_datalist_set_flags(@Ptr long datalist, @Ptr long flags);
	/**
	 * Original signature : <code>void g_datalist_unset_flags(GData**, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:60</i>
	 */
	public static void g_datalist_unset_flags(Pointer<Pointer<GtkLibrary.GData > > datalist, guint flags) {
		g_datalist_unset_flags(Pointer.getPeer(datalist), Pointer.getPeer(flags));
	}
	protected native static void g_datalist_unset_flags(@Ptr long datalist, @Ptr long flags);
	/**
	 * Original signature : <code>guint g_datalist_get_flags(GData**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:63</i>
	 */
	public static guint g_datalist_get_flags(Pointer<Pointer<GtkLibrary.GData > > datalist) {
		return Pointer.pointerToAddress(g_datalist_get_flags(Pointer.getPeer(datalist)), .class);
	}
	@Ptr 
	protected native static long g_datalist_get_flags(@Ptr long datalist);
	/**
	 * Location Associated Keyed Data<br>
	 * Original signature : <code>void g_dataset_destroy(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:81</i>
	 */
	public static void g_dataset_destroy(GtkLibrary.gconstpointer dataset_location) {
		g_dataset_destroy(Pointer.getPeer(dataset_location));
	}
	protected native static void g_dataset_destroy(@Ptr long dataset_location);
	/**
	 * Original signature : <code>gpointer g_dataset_id_get_data(gconstpointer, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:83</i>
	 */
	public static GtkLibrary.gpointer g_dataset_id_get_data(GtkLibrary.gconstpointer dataset_location, GtkLibrary.GQuark key_id) {
		return Pointer.pointerToAddress(g_dataset_id_get_data(Pointer.getPeer(dataset_location), Pointer.getPeer(key_id)), .class);
	}
	@Ptr 
	protected native static long g_dataset_id_get_data(@Ptr long dataset_location, @Ptr long key_id);
	/**
	 * Original signature : <code>gpointer g_datalist_get_data(GData**, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:86</i>
	 */
	public static GtkLibrary.gpointer g_datalist_get_data(Pointer<Pointer<GtkLibrary.GData > > datalist, Pointer<GtkLibrary.gchar > key) {
		return Pointer.pointerToAddress(g_datalist_get_data(Pointer.getPeer(datalist), Pointer.getPeer(key)), .class);
	}
	@Ptr 
	protected native static long g_datalist_get_data(@Ptr long datalist, @Ptr long key);
	/**
	 * Original signature : <code>void g_dataset_id_set_data_full(gconstpointer, GQuark, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:89</i>
	 */
	public static void g_dataset_id_set_data_full(GtkLibrary.gconstpointer dataset_location, GtkLibrary.GQuark key_id, GtkLibrary.gpointer data, GtkLibrary.GDestroyNotify destroy_func) {
		g_dataset_id_set_data_full(Pointer.getPeer(dataset_location), Pointer.getPeer(key_id), Pointer.getPeer(data), Pointer.getPeer(destroy_func));
	}
	protected native static void g_dataset_id_set_data_full(@Ptr long dataset_location, @Ptr long key_id, @Ptr long data, @Ptr long destroy_func);
	/**
	 * Original signature : <code>gpointer g_dataset_id_remove_no_notify(gconstpointer, GQuark)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:94</i>
	 */
	public static GtkLibrary.gpointer g_dataset_id_remove_no_notify(GtkLibrary.gconstpointer dataset_location, GtkLibrary.GQuark key_id) {
		return Pointer.pointerToAddress(g_dataset_id_remove_no_notify(Pointer.getPeer(dataset_location), Pointer.getPeer(key_id)), .class);
	}
	@Ptr 
	protected native static long g_dataset_id_remove_no_notify(@Ptr long dataset_location, @Ptr long key_id);
	/**
	 * Original signature : <code>void g_dataset_foreach(gconstpointer, GDataForeachFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdataset.h:97</i>
	 */
	public static void g_dataset_foreach(GtkLibrary.gconstpointer dataset_location, GtkLibrary.GDataForeachFunc func, GtkLibrary.gpointer user_data) {
		g_dataset_foreach(Pointer.getPeer(dataset_location), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_dataset_foreach(@Ptr long dataset_location, @Ptr long func, @Ptr long user_data);
	/**
	 * g_date_new() returns an invalid date, you then have to _set() stuff<br>
	 * to get a usable object. You can also allocate a GDate statically,<br>
	 * then call g_date_clear() to initialize.<br>
	 * Original signature : <code>GDate* g_date_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:85</i>
	 */
	public static Pointer<GtkLibrary.GDate > g_date_new() {
		return Pointer.pointerToAddress(g_date_new$2(), GtkLibrary.GDate.class);
	}
	@Ptr 
	protected native static long g_date_new$2();
	/**
	 * Original signature : <code>GDate* g_date_new_dmy(GDateDay, GDateMonth, GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:87</i>
	 */
	public static Pointer<GtkLibrary.GDate > g_date_new_dmy(GtkLibrary.GDateDay day, GtkLibrary.GDateMonth month, GtkLibrary.GDateYear year) {
		return Pointer.pointerToAddress(g_date_new_dmy(Pointer.getPeer(day), Pointer.getPeer(month), Pointer.getPeer(year)), GtkLibrary.GDate.class);
	}
	@Ptr 
	protected native static long g_date_new_dmy(@Ptr long day, @Ptr long month, @Ptr long year);
	/**
	 * Original signature : <code>GDate* g_date_new_julian(guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:91</i>
	 */
	public static Pointer<GtkLibrary.GDate > g_date_new_julian(GtkLibrary.guint32 julian_day) {
		return Pointer.pointerToAddress(g_date_new_julian(Pointer.getPeer(julian_day)), GtkLibrary.GDate.class);
	}
	@Ptr 
	protected native static long g_date_new_julian(@Ptr long julian_day);
	/**
	 * Original signature : <code>void g_date_free(GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:93</i>
	 */
	public static void g_date_free(Pointer<GtkLibrary.GDate > date) {
		g_date_free(Pointer.getPeer(date));
	}
	protected native static void g_date_free(@Ptr long date);
	/**
	 * check g_date_valid() after doing an operation that might fail, like<br>
	 * _parse.  Almost all g_date operations are undefined on invalid<br>
	 * dates (the exceptions are the mutators, since you need those to<br>
	 * return to validity).<br>
	 * Original signature : <code>gboolean g_date_valid(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:101</i>
	 */
	public static GtkLibrary.gboolean g_date_valid(Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_valid(Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_valid(@Ptr long date);
	/**
	 * Original signature : <code>gboolean g_date_valid_day(GDateDay)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:103</i>
	 */
	public static GtkLibrary.gboolean g_date_valid_day(GtkLibrary.GDateDay day) {
		return Pointer.pointerToAddress(g_date_valid_day(Pointer.getPeer(day)), .class);
	}
	@Ptr 
	protected native static long g_date_valid_day(@Ptr long day);
	/**
	 * Original signature : <code>gboolean g_date_valid_month(GDateMonth)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:105</i>
	 */
	public static GtkLibrary.gboolean g_date_valid_month(GtkLibrary.GDateMonth month) {
		return Pointer.pointerToAddress(g_date_valid_month(Pointer.getPeer(month)), .class);
	}
	@Ptr 
	protected native static long g_date_valid_month(@Ptr long month);
	/**
	 * Original signature : <code>gboolean g_date_valid_year(GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:107</i>
	 */
	public static GtkLibrary.gboolean g_date_valid_year(GtkLibrary.GDateYear year) {
		return Pointer.pointerToAddress(g_date_valid_year(Pointer.getPeer(year)), .class);
	}
	@Ptr 
	protected native static long g_date_valid_year(@Ptr long year);
	/**
	 * Original signature : <code>gboolean g_date_valid_weekday(GDateWeekday)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:109</i>
	 */
	public static GtkLibrary.gboolean g_date_valid_weekday(GtkLibrary.GDateWeekday weekday) {
		return Pointer.pointerToAddress(g_date_valid_weekday(Pointer.getPeer(weekday)), .class);
	}
	@Ptr 
	protected native static long g_date_valid_weekday(@Ptr long weekday);
	/**
	 * Original signature : <code>gboolean g_date_valid_julian(guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:111</i>
	 */
	public static GtkLibrary.gboolean g_date_valid_julian(GtkLibrary.guint32 julian_date) {
		return Pointer.pointerToAddress(g_date_valid_julian(Pointer.getPeer(julian_date)), .class);
	}
	@Ptr 
	protected native static long g_date_valid_julian(@Ptr long julian_date);
	/**
	 * Original signature : <code>gboolean g_date_valid_dmy(GDateDay, GDateMonth, GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:113</i>
	 */
	public static GtkLibrary.gboolean g_date_valid_dmy(GtkLibrary.GDateDay day, GtkLibrary.GDateMonth month, GtkLibrary.GDateYear year) {
		return Pointer.pointerToAddress(g_date_valid_dmy(Pointer.getPeer(day), Pointer.getPeer(month), Pointer.getPeer(year)), .class);
	}
	@Ptr 
	protected native static long g_date_valid_dmy(@Ptr long day, @Ptr long month, @Ptr long year);
	/**
	 * Original signature : <code>GDateWeekday g_date_get_weekday(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:118</i>
	 */
	public static GtkLibrary.GDateWeekday g_date_get_weekday(Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_get_weekday(Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_get_weekday(@Ptr long date);
	/**
	 * Original signature : <code>GDateMonth g_date_get_month(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:120</i>
	 */
	public static GtkLibrary.GDateMonth g_date_get_month(Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_get_month(Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_get_month(@Ptr long date);
	/**
	 * Original signature : <code>GDateYear g_date_get_year(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:122</i>
	 */
	public static GtkLibrary.GDateYear g_date_get_year(Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_get_year(Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_get_year(@Ptr long date);
	/**
	 * Original signature : <code>GDateDay g_date_get_day(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:124</i>
	 */
	public static GtkLibrary.GDateDay g_date_get_day(Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_get_day(Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_get_day(@Ptr long date);
	/**
	 * Original signature : <code>guint32 g_date_get_julian(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:126</i>
	 */
	public static GtkLibrary.guint32 g_date_get_julian(Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_get_julian(Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_get_julian(@Ptr long date);
	/**
	 * Original signature : <code>guint g_date_get_day_of_year(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:128</i>
	 */
	public static guint g_date_get_day_of_year(Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_get_day_of_year(Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_get_day_of_year(@Ptr long date);
	/**
	 * First monday/sunday is the start of week 1; if we haven't reached<br>
	 * that day, return 0. These are not ISO weeks of the year; that<br>
	 * routine needs to be added.<br>
	 * these functions return the number of weeks, starting on the<br>
	 * corrsponding day<br>
	 * Original signature : <code>guint g_date_get_monday_week_of_year(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:136</i>
	 */
	public static guint g_date_get_monday_week_of_year(Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_get_monday_week_of_year(Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_get_monday_week_of_year(@Ptr long date);
	/**
	 * Original signature : <code>guint g_date_get_sunday_week_of_year(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:138</i>
	 */
	public static guint g_date_get_sunday_week_of_year(Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_get_sunday_week_of_year(Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_get_sunday_week_of_year(@Ptr long date);
	/**
	 * Original signature : <code>guint g_date_get_iso8601_week_of_year(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:140</i>
	 */
	public static guint g_date_get_iso8601_week_of_year(Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_get_iso8601_week_of_year(Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_get_iso8601_week_of_year(@Ptr long date);
	/**
	 * If you create a static date struct you need to clear it to get it<br>
	 * in a sane state before use. You can clear a whole array at<br>
	 * once with the ndates argument.<br>
	 * Original signature : <code>void g_date_clear(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:147</i>
	 */
	public static void g_date_clear(Pointer<GtkLibrary.GDate > date, guint n_dates) {
		g_date_clear(Pointer.getPeer(date), Pointer.getPeer(n_dates));
	}
	protected native static void g_date_clear(@Ptr long date, @Ptr long n_dates);
	/**
	 * The parse routine is meant for dates typed in by a user, so it<br>
	 * permits many formats but tries to catch common typos. If your data<br>
	 * needs to be strictly validated, it is not an appropriate function.<br>
	 * Original signature : <code>void g_date_set_parse(GDate*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:155</i>
	 */
	public static void g_date_set_parse(Pointer<GtkLibrary.GDate > date, Pointer<GtkLibrary.gchar > str) {
		g_date_set_parse(Pointer.getPeer(date), Pointer.getPeer(str));
	}
	protected native static void g_date_set_parse(@Ptr long date, @Ptr long str);
	/**
	 * Original signature : <code>void g_date_set_time_t(GDate*, time_t)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:158</i>
	 */
	public static void g_date_set_time_t(Pointer<GtkLibrary.GDate > date, @org.bridj.ann.CLong long timet) {
		g_date_set_time_t(Pointer.getPeer(date), timet);
	}
	protected native static void g_date_set_time_t(@Ptr long date, @org.bridj.ann.CLong long timet);
	/**
	 * Original signature : <code>void g_date_set_time_val(GDate*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:161</i>
	 */
	public static void g_date_set_time_val(Pointer<GtkLibrary.GDate > date, Pointer<GtkLibrary.GTimeVal > timeval) {
		g_date_set_time_val(Pointer.getPeer(date), Pointer.getPeer(timeval));
	}
	protected native static void g_date_set_time_val(@Ptr long date, @Ptr long timeval);
	/**
	 * Original signature : <code>void g_date_set_time(GDate*, GTime)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:165</i>
	 */
	public static void g_date_set_time(Pointer<GtkLibrary.GDate > date, GtkLibrary.GTime time_) {
		g_date_set_time(Pointer.getPeer(date), Pointer.getPeer(time_));
	}
	protected native static void g_date_set_time(@Ptr long date, @Ptr long time_);
	/**
	 * Original signature : <code>void g_date_set_month(GDate*, GDateMonth)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:169</i>
	 */
	public static void g_date_set_month(Pointer<GtkLibrary.GDate > date, GtkLibrary.GDateMonth month) {
		g_date_set_month(Pointer.getPeer(date), Pointer.getPeer(month));
	}
	protected native static void g_date_set_month(@Ptr long date, @Ptr long month);
	/**
	 * Original signature : <code>void g_date_set_day(GDate*, GDateDay)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:172</i>
	 */
	public static void g_date_set_day(Pointer<GtkLibrary.GDate > date, GtkLibrary.GDateDay day) {
		g_date_set_day(Pointer.getPeer(date), Pointer.getPeer(day));
	}
	protected native static void g_date_set_day(@Ptr long date, @Ptr long day);
	/**
	 * Original signature : <code>void g_date_set_year(GDate*, GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:175</i>
	 */
	public static void g_date_set_year(Pointer<GtkLibrary.GDate > date, GtkLibrary.GDateYear year) {
		g_date_set_year(Pointer.getPeer(date), Pointer.getPeer(year));
	}
	protected native static void g_date_set_year(@Ptr long date, @Ptr long year);
	/**
	 * Original signature : <code>void g_date_set_dmy(GDate*, GDateDay, GDateMonth, GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:178</i>
	 */
	public static void g_date_set_dmy(Pointer<GtkLibrary.GDate > date, GtkLibrary.GDateDay day, GtkLibrary.GDateMonth month, GtkLibrary.GDateYear y) {
		g_date_set_dmy(Pointer.getPeer(date), Pointer.getPeer(day), Pointer.getPeer(month), Pointer.getPeer(y));
	}
	protected native static void g_date_set_dmy(@Ptr long date, @Ptr long day, @Ptr long month, @Ptr long y);
	/**
	 * Original signature : <code>void g_date_set_julian(GDate*, guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:183</i>
	 */
	public static void g_date_set_julian(Pointer<GtkLibrary.GDate > date, GtkLibrary.guint32 julian_date) {
		g_date_set_julian(Pointer.getPeer(date), Pointer.getPeer(julian_date));
	}
	protected native static void g_date_set_julian(@Ptr long date, @Ptr long julian_date);
	/**
	 * Original signature : <code>gboolean g_date_is_first_of_month(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:186</i>
	 */
	public static GtkLibrary.gboolean g_date_is_first_of_month(Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_is_first_of_month(Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_is_first_of_month(@Ptr long date);
	/**
	 * Original signature : <code>gboolean g_date_is_last_of_month(const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:188</i>
	 */
	public static GtkLibrary.gboolean g_date_is_last_of_month(Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_is_last_of_month(Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_is_last_of_month(@Ptr long date);
	/**
	 * To go forward by some number of weeks just go forward weeks*7 days<br>
	 * Original signature : <code>void g_date_add_days(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:192</i>
	 */
	public static void g_date_add_days(Pointer<GtkLibrary.GDate > date, guint n_days) {
		g_date_add_days(Pointer.getPeer(date), Pointer.getPeer(n_days));
	}
	protected native static void g_date_add_days(@Ptr long date, @Ptr long n_days);
	/**
	 * Original signature : <code>void g_date_subtract_days(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:195</i>
	 */
	public static void g_date_subtract_days(Pointer<GtkLibrary.GDate > date, guint n_days) {
		g_date_subtract_days(Pointer.getPeer(date), Pointer.getPeer(n_days));
	}
	protected native static void g_date_subtract_days(@Ptr long date, @Ptr long n_days);
	/**
	 * If you add/sub months while day > 28, the day might change<br>
	 * Original signature : <code>void g_date_add_months(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:200</i>
	 */
	public static void g_date_add_months(Pointer<GtkLibrary.GDate > date, guint n_months) {
		g_date_add_months(Pointer.getPeer(date), Pointer.getPeer(n_months));
	}
	protected native static void g_date_add_months(@Ptr long date, @Ptr long n_months);
	/**
	 * Original signature : <code>void g_date_subtract_months(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:203</i>
	 */
	public static void g_date_subtract_months(Pointer<GtkLibrary.GDate > date, guint n_months) {
		g_date_subtract_months(Pointer.getPeer(date), Pointer.getPeer(n_months));
	}
	protected native static void g_date_subtract_months(@Ptr long date, @Ptr long n_months);
	/**
	 * If it's feb 29, changing years can move you to the 28th<br>
	 * Original signature : <code>void g_date_add_years(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:208</i>
	 */
	public static void g_date_add_years(Pointer<GtkLibrary.GDate > date, guint n_years) {
		g_date_add_years(Pointer.getPeer(date), Pointer.getPeer(n_years));
	}
	protected native static void g_date_add_years(@Ptr long date, @Ptr long n_years);
	/**
	 * Original signature : <code>void g_date_subtract_years(GDate*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:211</i>
	 */
	public static void g_date_subtract_years(Pointer<GtkLibrary.GDate > date, guint n_years) {
		g_date_subtract_years(Pointer.getPeer(date), Pointer.getPeer(n_years));
	}
	protected native static void g_date_subtract_years(@Ptr long date, @Ptr long n_years);
	/**
	 * Original signature : <code>gboolean g_date_is_leap_year(GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:214</i>
	 */
	public static GtkLibrary.gboolean g_date_is_leap_year(GtkLibrary.GDateYear year) {
		return Pointer.pointerToAddress(g_date_is_leap_year(Pointer.getPeer(year)), .class);
	}
	@Ptr 
	protected native static long g_date_is_leap_year(@Ptr long year);
	/**
	 * Original signature : <code>guint8 g_date_get_days_in_month(GDateMonth, GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:216</i>
	 */
	public static GtkLibrary.guint8 g_date_get_days_in_month(GtkLibrary.GDateMonth month, GtkLibrary.GDateYear year) {
		return Pointer.pointerToAddress(g_date_get_days_in_month(Pointer.getPeer(month), Pointer.getPeer(year)), .class);
	}
	@Ptr 
	protected native static long g_date_get_days_in_month(@Ptr long month, @Ptr long year);
	/**
	 * Original signature : <code>guint8 g_date_get_monday_weeks_in_year(GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:219</i>
	 */
	public static GtkLibrary.guint8 g_date_get_monday_weeks_in_year(GtkLibrary.GDateYear year) {
		return Pointer.pointerToAddress(g_date_get_monday_weeks_in_year(Pointer.getPeer(year)), .class);
	}
	@Ptr 
	protected native static long g_date_get_monday_weeks_in_year(@Ptr long year);
	/**
	 * Original signature : <code>guint8 g_date_get_sunday_weeks_in_year(GDateYear)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:221</i>
	 */
	public static GtkLibrary.guint8 g_date_get_sunday_weeks_in_year(GtkLibrary.GDateYear year) {
		return Pointer.pointerToAddress(g_date_get_sunday_weeks_in_year(Pointer.getPeer(year)), .class);
	}
	@Ptr 
	protected native static long g_date_get_sunday_weeks_in_year(@Ptr long year);
	/**
	 * Returns the number of days between the two dates.  If date2 comes<br>
	 * before date1, a negative value is return.<br>
	 * Original signature : <code>gint g_date_days_between(const GDate*, const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:226</i>
	 */
	public static GtkLibrary.gint g_date_days_between(Pointer<GtkLibrary.GDate > date1, Pointer<GtkLibrary.GDate > date2) {
		return Pointer.pointerToAddress(g_date_days_between(Pointer.getPeer(date1), Pointer.getPeer(date2)), .class);
	}
	@Ptr 
	protected native static long g_date_days_between(@Ptr long date1, @Ptr long date2);
	/**
	 * qsort-friendly (with a cast...)<br>
	 * Original signature : <code>gint g_date_compare(const GDate*, const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:231</i>
	 */
	public static GtkLibrary.gint g_date_compare(Pointer<GtkLibrary.GDate > lhs, Pointer<GtkLibrary.GDate > rhs) {
		return Pointer.pointerToAddress(g_date_compare(Pointer.getPeer(lhs), Pointer.getPeer(rhs)), .class);
	}
	@Ptr 
	protected native static long g_date_compare(@Ptr long lhs, @Ptr long rhs);
	/**
	 * Original signature : <code>void g_date_to_struct_tm(const GDate*, tm*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:234</i>
	 */
	public static void g_date_to_struct_tm(Pointer<GtkLibrary.GDate > date, Pointer tm) {
		g_date_to_struct_tm(Pointer.getPeer(date), Pointer.getPeer(tm));
	}
	protected native static void g_date_to_struct_tm(@Ptr long date, @Ptr long tm);
	/**
	 * Original signature : <code>void g_date_clamp(GDate*, const GDate*, const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:238</i>
	 */
	public static void g_date_clamp(Pointer<GtkLibrary.GDate > date, Pointer<GtkLibrary.GDate > min_date, Pointer<GtkLibrary.GDate > max_date) {
		g_date_clamp(Pointer.getPeer(date), Pointer.getPeer(min_date), Pointer.getPeer(max_date));
	}
	protected native static void g_date_clamp(@Ptr long date, @Ptr long min_date, @Ptr long max_date);
	/**
	 * Swap date1 and date2's values if date1 > date2.<br>
	 * Original signature : <code>void g_date_order(GDate*, GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:244</i>
	 */
	public static void g_date_order(Pointer<GtkLibrary.GDate > date1, Pointer<GtkLibrary.GDate > date2) {
		g_date_order(Pointer.getPeer(date1), Pointer.getPeer(date2));
	}
	protected native static void g_date_order(@Ptr long date1, @Ptr long date2);
	/**
	 * Just like strftime() except you can only use date-related formats.<br>
	 *   Using a time format is undefined.<br>
	 * Original signature : <code>gsize g_date_strftime(gchar*, gsize, const gchar*, const GDate*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdate.h:250</i>
	 */
	public static gsize g_date_strftime(Pointer<GtkLibrary.gchar > s, gsize slen, Pointer<GtkLibrary.gchar > format, Pointer<GtkLibrary.GDate > date) {
		return Pointer.pointerToAddress(g_date_strftime(Pointer.getPeer(s), Pointer.getPeer(slen), Pointer.getPeer(format), Pointer.getPeer(date)), .class);
	}
	@Ptr 
	protected native static long g_date_strftime(@Ptr long s, @Ptr long slen, @Ptr long format, @Ptr long date);
	/**
	 * Original signature : <code>GTimeZone* g_time_zone_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:28</i>
	 */
	public static Pointer<GtkLibrary.GTimeZone > g_time_zone_new(Pointer<GtkLibrary.gchar > identifier) {
		return Pointer.pointerToAddress(g_time_zone_new(Pointer.getPeer(identifier)), GtkLibrary.GTimeZone.class);
	}
	@Ptr 
	protected native static long g_time_zone_new(@Ptr long identifier);
	/**
	 * Original signature : <code>GTimeZone* g_time_zone_new_utc()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:30</i>
	 */
	public static Pointer<GtkLibrary.GTimeZone > g_time_zone_new_utc() {
		return Pointer.pointerToAddress(g_time_zone_new_utc$2(), GtkLibrary.GTimeZone.class);
	}
	@Ptr 
	protected native static long g_time_zone_new_utc$2();
	/**
	 * Original signature : <code>GTimeZone* g_time_zone_new_local()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:32</i>
	 */
	public static Pointer<GtkLibrary.GTimeZone > g_time_zone_new_local() {
		return Pointer.pointerToAddress(g_time_zone_new_local$2(), GtkLibrary.GTimeZone.class);
	}
	@Ptr 
	protected native static long g_time_zone_new_local$2();
	/**
	 * Original signature : <code>GTimeZone* g_time_zone_ref(GTimeZone*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:35</i>
	 */
	public static Pointer<GtkLibrary.GTimeZone > g_time_zone_ref(Pointer<GtkLibrary.GTimeZone > tz) {
		return Pointer.pointerToAddress(g_time_zone_ref(Pointer.getPeer(tz)), GtkLibrary.GTimeZone.class);
	}
	@Ptr 
	protected native static long g_time_zone_ref(@Ptr long tz);
	/**
	 * Original signature : <code>void g_time_zone_unref(GTimeZone*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:37</i>
	 */
	public static void g_time_zone_unref(Pointer<GtkLibrary.GTimeZone > tz) {
		g_time_zone_unref(Pointer.getPeer(tz));
	}
	protected native static void g_time_zone_unref(@Ptr long tz);
	/**
	 * Original signature : <code>gint g_time_zone_find_interval(GTimeZone*, GTimeType, gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:40</i>
	 */
	public static GtkLibrary.gint g_time_zone_find_interval(Pointer<GtkLibrary.GTimeZone > tz, GtkLibrary.GTimeType type, gint64 time_) {
		return Pointer.pointerToAddress(g_time_zone_find_interval(Pointer.getPeer(tz), Pointer.getPeer(type), Pointer.getPeer(time_)), .class);
	}
	@Ptr 
	protected native static long g_time_zone_find_interval(@Ptr long tz, @Ptr long type, @Ptr long time_);
	/**
	 * Original signature : <code>gint g_time_zone_adjust_time(GTimeZone*, GTimeType, gint64*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:45</i>
	 */
	public static GtkLibrary.gint g_time_zone_adjust_time(Pointer<GtkLibrary.GTimeZone > tz, GtkLibrary.GTimeType type, Pointer<gint64 > time_) {
		return Pointer.pointerToAddress(g_time_zone_adjust_time(Pointer.getPeer(tz), Pointer.getPeer(type), Pointer.getPeer(time_)), .class);
	}
	@Ptr 
	protected native static long g_time_zone_adjust_time(@Ptr long tz, @Ptr long type, @Ptr long time_);
	/**
	 * Original signature : <code>gchar* g_time_zone_get_abbreviation(GTimeZone*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:50</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_time_zone_get_abbreviation(Pointer<GtkLibrary.GTimeZone > tz, GtkLibrary.gint interval) {
		return Pointer.pointerToAddress(g_time_zone_get_abbreviation(Pointer.getPeer(tz), Pointer.getPeer(interval)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_time_zone_get_abbreviation(@Ptr long tz, @Ptr long interval);
	/**
	 * Original signature : <code>gint32 g_time_zone_get_offset(GTimeZone*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:53</i>
	 */
	public static GtkLibrary.gint32 g_time_zone_get_offset(Pointer<GtkLibrary.GTimeZone > tz, GtkLibrary.gint interval) {
		return Pointer.pointerToAddress(g_time_zone_get_offset(Pointer.getPeer(tz), Pointer.getPeer(interval)), .class);
	}
	@Ptr 
	protected native static long g_time_zone_get_offset(@Ptr long tz, @Ptr long interval);
	/**
	 * Original signature : <code>gboolean g_time_zone_is_dst(GTimeZone*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimezone.h:56</i>
	 */
	public static GtkLibrary.gboolean g_time_zone_is_dst(Pointer<GtkLibrary.GTimeZone > tz, GtkLibrary.gint interval) {
		return Pointer.pointerToAddress(g_time_zone_is_dst(Pointer.getPeer(tz), Pointer.getPeer(interval)), .class);
	}
	@Ptr 
	protected native static long g_time_zone_is_dst(@Ptr long tz, @Ptr long interval);
	/**
	 * Original signature : <code>void g_date_time_unref(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:99</i>
	 */
	public static void g_date_time_unref(Pointer<GtkLibrary.GDateTime > datetime) {
		g_date_time_unref(Pointer.getPeer(datetime));
	}
	protected native static void g_date_time_unref(@Ptr long datetime);
	/**
	 * Original signature : <code>GDateTime* g_date_time_ref(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:101</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_ref(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_ref(Pointer.getPeer(datetime)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_ref(@Ptr long datetime);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_now(GTimeZone*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:104</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_new_now(Pointer<GtkLibrary.GTimeZone > tz) {
		return Pointer.pointerToAddress(g_date_time_new_now(Pointer.getPeer(tz)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_now(@Ptr long tz);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_now_local()</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:106</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_new_now_local() {
		return Pointer.pointerToAddress(g_date_time_new_now_local$2(), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_now_local$2();
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_now_utc()</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:108</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_new_now_utc() {
		return Pointer.pointerToAddress(g_date_time_new_now_utc$2(), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_now_utc$2();
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_from_unix_local(gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:111</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_new_from_unix_local(gint64 t) {
		return Pointer.pointerToAddress(g_date_time_new_from_unix_local(Pointer.getPeer(t)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_from_unix_local(@Ptr long t);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_from_unix_utc(gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:113</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_new_from_unix_utc(gint64 t) {
		return Pointer.pointerToAddress(g_date_time_new_from_unix_utc(Pointer.getPeer(t)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_from_unix_utc(@Ptr long t);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_from_timeval_local(const GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:116</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_new_from_timeval_local(Pointer<GtkLibrary.GTimeVal > tv) {
		return Pointer.pointerToAddress(g_date_time_new_from_timeval_local(Pointer.getPeer(tv)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_from_timeval_local(@Ptr long tv);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_from_timeval_utc(const GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:118</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_new_from_timeval_utc(Pointer<GtkLibrary.GTimeVal > tv) {
		return Pointer.pointerToAddress(g_date_time_new_from_timeval_utc(Pointer.getPeer(tv)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_from_timeval_utc(@Ptr long tv);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new(GTimeZone*, gint, gint, gint, gint, gint, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:121</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_new(Pointer<GtkLibrary.GTimeZone > tz, GtkLibrary.gint year, GtkLibrary.gint month, GtkLibrary.gint day, GtkLibrary.gint hour, GtkLibrary.gint minute, GtkLibrary.gdouble seconds) {
		return Pointer.pointerToAddress(g_date_time_new(Pointer.getPeer(tz), Pointer.getPeer(year), Pointer.getPeer(month), Pointer.getPeer(day), Pointer.getPeer(hour), Pointer.getPeer(minute), Pointer.getPeer(seconds)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new(@Ptr long tz, @Ptr long year, @Ptr long month, @Ptr long day, @Ptr long hour, @Ptr long minute, @Ptr long seconds);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_local(gint, gint, gint, gint, gint, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:129</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_new_local(GtkLibrary.gint year, GtkLibrary.gint month, GtkLibrary.gint day, GtkLibrary.gint hour, GtkLibrary.gint minute, GtkLibrary.gdouble seconds) {
		return Pointer.pointerToAddress(g_date_time_new_local(Pointer.getPeer(year), Pointer.getPeer(month), Pointer.getPeer(day), Pointer.getPeer(hour), Pointer.getPeer(minute), Pointer.getPeer(seconds)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_local(@Ptr long year, @Ptr long month, @Ptr long day, @Ptr long hour, @Ptr long minute, @Ptr long seconds);
	/**
	 * Original signature : <code>GDateTime* g_date_time_new_utc(gint, gint, gint, gint, gint, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:136</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_new_utc(GtkLibrary.gint year, GtkLibrary.gint month, GtkLibrary.gint day, GtkLibrary.gint hour, GtkLibrary.gint minute, GtkLibrary.gdouble seconds) {
		return Pointer.pointerToAddress(g_date_time_new_utc(Pointer.getPeer(year), Pointer.getPeer(month), Pointer.getPeer(day), Pointer.getPeer(hour), Pointer.getPeer(minute), Pointer.getPeer(seconds)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_new_utc(@Ptr long year, @Ptr long month, @Ptr long day, @Ptr long hour, @Ptr long minute, @Ptr long seconds);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add(GDateTime*, GTimeSpan)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:144</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_add(Pointer<GtkLibrary.GDateTime > datetime, GtkLibrary.GTimeSpan timespan) {
		return Pointer.pointerToAddress(g_date_time_add(Pointer.getPeer(datetime), Pointer.getPeer(timespan)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add(@Ptr long datetime, @Ptr long timespan);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_years(GDateTime*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:149</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_add_years(Pointer<GtkLibrary.GDateTime > datetime, GtkLibrary.gint years) {
		return Pointer.pointerToAddress(g_date_time_add_years(Pointer.getPeer(datetime), Pointer.getPeer(years)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_years(@Ptr long datetime, @Ptr long years);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_months(GDateTime*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:153</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_add_months(Pointer<GtkLibrary.GDateTime > datetime, GtkLibrary.gint months) {
		return Pointer.pointerToAddress(g_date_time_add_months(Pointer.getPeer(datetime), Pointer.getPeer(months)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_months(@Ptr long datetime, @Ptr long months);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_weeks(GDateTime*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:157</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_add_weeks(Pointer<GtkLibrary.GDateTime > datetime, GtkLibrary.gint weeks) {
		return Pointer.pointerToAddress(g_date_time_add_weeks(Pointer.getPeer(datetime), Pointer.getPeer(weeks)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_weeks(@Ptr long datetime, @Ptr long weeks);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_days(GDateTime*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:161</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_add_days(Pointer<GtkLibrary.GDateTime > datetime, GtkLibrary.gint days) {
		return Pointer.pointerToAddress(g_date_time_add_days(Pointer.getPeer(datetime), Pointer.getPeer(days)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_days(@Ptr long datetime, @Ptr long days);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_hours(GDateTime*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:166</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_add_hours(Pointer<GtkLibrary.GDateTime > datetime, GtkLibrary.gint hours) {
		return Pointer.pointerToAddress(g_date_time_add_hours(Pointer.getPeer(datetime), Pointer.getPeer(hours)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_hours(@Ptr long datetime, @Ptr long hours);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_minutes(GDateTime*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:170</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_add_minutes(Pointer<GtkLibrary.GDateTime > datetime, GtkLibrary.gint minutes) {
		return Pointer.pointerToAddress(g_date_time_add_minutes(Pointer.getPeer(datetime), Pointer.getPeer(minutes)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_minutes(@Ptr long datetime, @Ptr long minutes);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_seconds(GDateTime*, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:174</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_add_seconds(Pointer<GtkLibrary.GDateTime > datetime, GtkLibrary.gdouble seconds) {
		return Pointer.pointerToAddress(g_date_time_add_seconds(Pointer.getPeer(datetime), Pointer.getPeer(seconds)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_seconds(@Ptr long datetime, @Ptr long seconds);
	/**
	 * Original signature : <code>GDateTime* g_date_time_add_full(GDateTime*, gint, gint, gint, gint, gint, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:179</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_add_full(Pointer<GtkLibrary.GDateTime > datetime, GtkLibrary.gint years, GtkLibrary.gint months, GtkLibrary.gint days, GtkLibrary.gint hours, GtkLibrary.gint minutes, GtkLibrary.gdouble seconds) {
		return Pointer.pointerToAddress(g_date_time_add_full(Pointer.getPeer(datetime), Pointer.getPeer(years), Pointer.getPeer(months), Pointer.getPeer(days), Pointer.getPeer(hours), Pointer.getPeer(minutes), Pointer.getPeer(seconds)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_add_full(@Ptr long datetime, @Ptr long years, @Ptr long months, @Ptr long days, @Ptr long hours, @Ptr long minutes, @Ptr long seconds);
	/**
	 * Original signature : <code>gint g_date_time_compare(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:189</i>
	 */
	public static GtkLibrary.gint g_date_time_compare(GtkLibrary.gconstpointer dt1, GtkLibrary.gconstpointer dt2) {
		return Pointer.pointerToAddress(g_date_time_compare(Pointer.getPeer(dt1), Pointer.getPeer(dt2)), .class);
	}
	@Ptr 
	protected native static long g_date_time_compare(@Ptr long dt1, @Ptr long dt2);
	/**
	 * Original signature : <code>GTimeSpan g_date_time_difference(GDateTime*, GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:192</i>
	 */
	public static GtkLibrary.GTimeSpan g_date_time_difference(Pointer<GtkLibrary.GDateTime > end, Pointer<GtkLibrary.GDateTime > begin) {
		return Pointer.pointerToAddress(g_date_time_difference(Pointer.getPeer(end), Pointer.getPeer(begin)), .class);
	}
	@Ptr 
	protected native static long g_date_time_difference(@Ptr long end, @Ptr long begin);
	/**
	 * Original signature : <code>guint g_date_time_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:195</i>
	 */
	public static guint g_date_time_hash(GtkLibrary.gconstpointer datetime) {
		return Pointer.pointerToAddress(g_date_time_hash(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_hash(@Ptr long datetime);
	/**
	 * Original signature : <code>gboolean g_date_time_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:197</i>
	 */
	public static GtkLibrary.gboolean g_date_time_equal(GtkLibrary.gconstpointer dt1, GtkLibrary.gconstpointer dt2) {
		return Pointer.pointerToAddress(g_date_time_equal(Pointer.getPeer(dt1), Pointer.getPeer(dt2)), .class);
	}
	@Ptr 
	protected native static long g_date_time_equal(@Ptr long dt1, @Ptr long dt2);
	/**
	 * Original signature : <code>void g_date_time_get_ymd(GDateTime*, gint*, gint*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:201</i>
	 */
	public static void g_date_time_get_ymd(Pointer<GtkLibrary.GDateTime > datetime, Pointer<GtkLibrary.gint > year, Pointer<GtkLibrary.gint > month, Pointer<GtkLibrary.gint > day) {
		g_date_time_get_ymd(Pointer.getPeer(datetime), Pointer.getPeer(year), Pointer.getPeer(month), Pointer.getPeer(day));
	}
	protected native static void g_date_time_get_ymd(@Ptr long datetime, @Ptr long year, @Ptr long month, @Ptr long day);
	/**
	 * Original signature : <code>gint g_date_time_get_year(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:207</i>
	 */
	public static GtkLibrary.gint g_date_time_get_year(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_year(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_year(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_month(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:209</i>
	 */
	public static GtkLibrary.gint g_date_time_get_month(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_month(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_month(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_day_of_month(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:211</i>
	 */
	public static GtkLibrary.gint g_date_time_get_day_of_month(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_day_of_month(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_day_of_month(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_week_numbering_year(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:214</i>
	 */
	public static GtkLibrary.gint g_date_time_get_week_numbering_year(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_week_numbering_year(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_week_numbering_year(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_week_of_year(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:216</i>
	 */
	public static GtkLibrary.gint g_date_time_get_week_of_year(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_week_of_year(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_week_of_year(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_day_of_week(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:218</i>
	 */
	public static GtkLibrary.gint g_date_time_get_day_of_week(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_day_of_week(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_day_of_week(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_day_of_year(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:221</i>
	 */
	public static GtkLibrary.gint g_date_time_get_day_of_year(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_day_of_year(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_day_of_year(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_hour(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:224</i>
	 */
	public static GtkLibrary.gint g_date_time_get_hour(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_hour(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_hour(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_minute(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:226</i>
	 */
	public static GtkLibrary.gint g_date_time_get_minute(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_minute(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_minute(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_second(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:228</i>
	 */
	public static GtkLibrary.gint g_date_time_get_second(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_second(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_second(@Ptr long datetime);
	/**
	 * Original signature : <code>gint g_date_time_get_microsecond(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:230</i>
	 */
	public static GtkLibrary.gint g_date_time_get_microsecond(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_microsecond(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_microsecond(@Ptr long datetime);
	/**
	 * Original signature : <code>gdouble g_date_time_get_seconds(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:232</i>
	 */
	public static GtkLibrary.gdouble g_date_time_get_seconds(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_seconds(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_seconds(@Ptr long datetime);
	/**
	 * Original signature : <code>gint64 g_date_time_to_unix(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:235</i>
	 */
	public static gint64 g_date_time_to_unix(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_to_unix(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_to_unix(@Ptr long datetime);
	/**
	 * Original signature : <code>gboolean g_date_time_to_timeval(GDateTime*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:237</i>
	 */
	public static GtkLibrary.gboolean g_date_time_to_timeval(Pointer<GtkLibrary.GDateTime > datetime, Pointer<GtkLibrary.GTimeVal > tv) {
		return Pointer.pointerToAddress(g_date_time_to_timeval(Pointer.getPeer(datetime), Pointer.getPeer(tv)), .class);
	}
	@Ptr 
	protected native static long g_date_time_to_timeval(@Ptr long datetime, @Ptr long tv);
	/**
	 * Original signature : <code>GTimeSpan g_date_time_get_utc_offset(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:241</i>
	 */
	public static GtkLibrary.GTimeSpan g_date_time_get_utc_offset(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_utc_offset(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_get_utc_offset(@Ptr long datetime);
	/**
	 * Original signature : <code>gchar* g_date_time_get_timezone_abbreviation(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:243</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_date_time_get_timezone_abbreviation(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_get_timezone_abbreviation(Pointer.getPeer(datetime)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_date_time_get_timezone_abbreviation(@Ptr long datetime);
	/**
	 * Original signature : <code>gboolean g_date_time_is_daylight_savings(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:245</i>
	 */
	public static GtkLibrary.gboolean g_date_time_is_daylight_savings(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_is_daylight_savings(Pointer.getPeer(datetime)), .class);
	}
	@Ptr 
	protected native static long g_date_time_is_daylight_savings(@Ptr long datetime);
	/**
	 * Original signature : <code>GDateTime* g_date_time_to_timezone(GDateTime*, GTimeZone*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:248</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_to_timezone(Pointer<GtkLibrary.GDateTime > datetime, Pointer<GtkLibrary.GTimeZone > tz) {
		return Pointer.pointerToAddress(g_date_time_to_timezone(Pointer.getPeer(datetime), Pointer.getPeer(tz)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_to_timezone(@Ptr long datetime, @Ptr long tz);
	/**
	 * Original signature : <code>GDateTime* g_date_time_to_local(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:251</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_to_local(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_to_local(Pointer.getPeer(datetime)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_to_local(@Ptr long datetime);
	/**
	 * Original signature : <code>GDateTime* g_date_time_to_utc(GDateTime*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:253</i>
	 */
	public static Pointer<GtkLibrary.GDateTime > g_date_time_to_utc(Pointer<GtkLibrary.GDateTime > datetime) {
		return Pointer.pointerToAddress(g_date_time_to_utc(Pointer.getPeer(datetime)), GtkLibrary.GDateTime.class);
	}
	@Ptr 
	protected native static long g_date_time_to_utc(@Ptr long datetime);
	/**
	 * Original signature : <code>gchar* g_date_time_format(GDateTime*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdatetime.h:256</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_date_time_format(Pointer<GtkLibrary.GDateTime > datetime, Pointer<GtkLibrary.gchar > format) {
		return Pointer.pointerToAddress(g_date_time_format(Pointer.getPeer(datetime), Pointer.getPeer(format)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_date_time_format(@Ptr long datetime, @Ptr long format);
	/**
	 * Original signature : <code>GDir* g_dir_open(const gchar*, guint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdir.h:38</i>
	 */
	public static Pointer<GtkLibrary.GDir > g_dir_open(Pointer<GtkLibrary.gchar > path, guint flags, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_dir_open(Pointer.getPeer(path), Pointer.getPeer(flags), Pointer.getPeer(error)), GtkLibrary.GDir.class);
	}
	@Ptr 
	protected native static long g_dir_open(@Ptr long path, @Ptr long flags, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_dir_read_name(GDir*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdir.h:42</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_dir_read_name(Pointer<GtkLibrary.GDir > dir) {
		return Pointer.pointerToAddress(g_dir_read_name(Pointer.getPeer(dir)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_dir_read_name(@Ptr long dir);
	/**
	 * Original signature : <code>void g_dir_rewind(GDir*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdir.h:44</i>
	 */
	public static void g_dir_rewind(Pointer<GtkLibrary.GDir > dir) {
		g_dir_rewind(Pointer.getPeer(dir));
	}
	protected native static void g_dir_rewind(@Ptr long dir);
	/**
	 * Original signature : <code>void g_dir_close(GDir*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gdir.h:46</i>
	 */
	public static void g_dir_close(Pointer<GtkLibrary.GDir > dir) {
		g_dir_close(Pointer.getPeer(dir));
	}
	protected native static void g_dir_close(@Ptr long dir);
	/**
	 * Original signature : <code>gchar* g_getenv(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:4</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_getenv(Pointer<GtkLibrary.gchar > variable) {
		return Pointer.pointerToAddress(g_getenv(Pointer.getPeer(variable)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_getenv(@Ptr long variable);
	/**
	 * Original signature : <code>gboolean g_setenv(const gchar*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:6</i>
	 */
	public static GtkLibrary.gboolean g_setenv(Pointer<GtkLibrary.gchar > variable, Pointer<GtkLibrary.gchar > value, GtkLibrary.gboolean overwrite) {
		return Pointer.pointerToAddress(g_setenv(Pointer.getPeer(variable), Pointer.getPeer(value), Pointer.getPeer(overwrite)), .class);
	}
	@Ptr 
	protected native static long g_setenv(@Ptr long variable, @Ptr long value, @Ptr long overwrite);
	/**
	 * Original signature : <code>void g_unsetenv(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:10</i>
	 */
	public static void g_unsetenv(Pointer<GtkLibrary.gchar > variable) {
		g_unsetenv(Pointer.getPeer(variable));
	}
	protected native static void g_unsetenv(@Ptr long variable);
	/**
	 * Original signature : <code>gchar** g_listenv()</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:12</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_listenv() {
		return Pointer.pointerToAddress(g_listenv$2(), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_listenv$2();
	/**
	 * Original signature : <code>gchar** g_get_environ()</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:15</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_get_environ() {
		return Pointer.pointerToAddress(g_get_environ$2(), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_get_environ$2();
	/**
	 * Original signature : <code>gchar* g_environ_getenv(gchar**, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:17</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_environ_getenv(Pointer<Pointer<GtkLibrary.gchar > > envp, Pointer<GtkLibrary.gchar > variable) {
		return Pointer.pointerToAddress(g_environ_getenv(Pointer.getPeer(envp), Pointer.getPeer(variable)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_environ_getenv(@Ptr long envp, @Ptr long variable);
	/**
	 * Original signature : <code>gchar** g_environ_setenv(gchar**, const gchar*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:20</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_environ_setenv(Pointer<Pointer<GtkLibrary.gchar > > envp, Pointer<GtkLibrary.gchar > variable, Pointer<GtkLibrary.gchar > value, GtkLibrary.gboolean overwrite) {
		return Pointer.pointerToAddress(g_environ_setenv(Pointer.getPeer(envp), Pointer.getPeer(variable), Pointer.getPeer(value), Pointer.getPeer(overwrite)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_environ_setenv(@Ptr long envp, @Ptr long variable, @Ptr long value, @Ptr long overwrite);
	/**
	 * Original signature : <code>gchar** g_environ_unsetenv(gchar**, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/genviron.h:25</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_environ_unsetenv(Pointer<Pointer<GtkLibrary.gchar > > envp, Pointer<GtkLibrary.gchar > variable) {
		return Pointer.pointerToAddress(g_environ_unsetenv(Pointer.getPeer(envp), Pointer.getPeer(variable)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_environ_unsetenv(@Ptr long envp, @Ptr long variable);
	/**
	 * Original signature : <code>GQuark g_file_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:48</i>
	 */
	public static GtkLibrary.GQuark g_file_error_quark() {
		return Pointer.pointerToAddress(g_file_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_file_error_quark$2();
	/**
	 * So other code can generate a GFileError<br>
	 * Original signature : <code>GFileError g_file_error_from_errno(gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:51</i>
	 */
	public static GtkLibrary.GFileError g_file_error_from_errno(GtkLibrary.gint err_no) {
		return Pointer.pointerToAddress(g_file_error_from_errno(Pointer.getPeer(err_no)), .class);
	}
	@Ptr 
	protected native static long g_file_error_from_errno(@Ptr long err_no);
	/**
	 * Original signature : <code>gboolean g_file_test(const gchar*, GFileTest)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:54</i>
	 */
	public static GtkLibrary.gboolean g_file_test(Pointer<GtkLibrary.gchar > filename, GtkLibrary.GFileTest test) {
		return Pointer.pointerToAddress(g_file_test(Pointer.getPeer(filename), Pointer.getPeer(test)), .class);
	}
	@Ptr 
	protected native static long g_file_test(@Ptr long filename, @Ptr long test);
	/**
	 * Original signature : <code>gboolean g_file_get_contents(const gchar*, gchar**, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:57</i>
	 */
	public static GtkLibrary.gboolean g_file_get_contents(Pointer<GtkLibrary.gchar > filename, Pointer<Pointer<GtkLibrary.gchar > > contents, Pointer<gsize > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_file_get_contents(Pointer.getPeer(filename), Pointer.getPeer(contents), Pointer.getPeer(length), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_file_get_contents(@Ptr long filename, @Ptr long contents, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_file_set_contents(const gchar*, const gchar*, gssize, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:62</i>
	 */
	public static GtkLibrary.gboolean g_file_set_contents(Pointer<GtkLibrary.gchar > filename, Pointer<GtkLibrary.gchar > contents, GtkLibrary.gssize length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_file_set_contents(Pointer.getPeer(filename), Pointer.getPeer(contents), Pointer.getPeer(length), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_file_set_contents(@Ptr long filename, @Ptr long contents, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_file_read_link(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:67</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_file_read_link(Pointer<GtkLibrary.gchar > filename, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_file_read_link(Pointer.getPeer(filename), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_file_read_link(@Ptr long filename, @Ptr long error);
	/**
	 * Wrapper / workalike for mkdtemp()<br>
	 * Original signature : <code>gchar* g_mkdtemp(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:72</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_mkdtemp(Pointer<GtkLibrary.gchar > tmpl) {
		return Pointer.pointerToAddress(g_mkdtemp(Pointer.getPeer(tmpl)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_mkdtemp(@Ptr long tmpl);
	/**
	 * Original signature : <code>gchar* g_mkdtemp_full(gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:74</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_mkdtemp_full(Pointer<GtkLibrary.gchar > tmpl, GtkLibrary.gint mode) {
		return Pointer.pointerToAddress(g_mkdtemp_full(Pointer.getPeer(tmpl), Pointer.getPeer(mode)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_mkdtemp_full(@Ptr long tmpl, @Ptr long mode);
	/**
	 * Wrapper / workalike for mkstemp()<br>
	 * Original signature : <code>gint g_mkstemp(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:79</i>
	 */
	public static GtkLibrary.gint g_mkstemp(Pointer<GtkLibrary.gchar > tmpl) {
		return Pointer.pointerToAddress(g_mkstemp(Pointer.getPeer(tmpl)), .class);
	}
	@Ptr 
	protected native static long g_mkstemp(@Ptr long tmpl);
	/**
	 * Original signature : <code>gint g_mkstemp_full(gchar*, gint, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:81</i>
	 */
	public static GtkLibrary.gint g_mkstemp_full(Pointer<GtkLibrary.gchar > tmpl, GtkLibrary.gint flags, GtkLibrary.gint mode) {
		return Pointer.pointerToAddress(g_mkstemp_full(Pointer.getPeer(tmpl), Pointer.getPeer(flags), Pointer.getPeer(mode)), .class);
	}
	@Ptr 
	protected native static long g_mkstemp_full(@Ptr long tmpl, @Ptr long flags, @Ptr long mode);
	/**
	 * Wrappers for g_mkstemp and g_mkdtemp()<br>
	 * Original signature : <code>gint g_file_open_tmp(const gchar*, gchar**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:87</i>
	 */
	public static GtkLibrary.gint g_file_open_tmp(Pointer<GtkLibrary.gchar > tmpl, Pointer<Pointer<GtkLibrary.gchar > > name_used, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_file_open_tmp(Pointer.getPeer(tmpl), Pointer.getPeer(name_used), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_file_open_tmp(@Ptr long tmpl, @Ptr long name_used, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_dir_make_tmp(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:91</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_dir_make_tmp(Pointer<GtkLibrary.gchar > tmpl, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_dir_make_tmp(Pointer.getPeer(tmpl), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_dir_make_tmp(@Ptr long tmpl, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_build_path(const gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:95</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_build_path(Pointer<GtkLibrary.gchar > separator, Pointer<GtkLibrary.gchar > first_element, Object... varargs) {
		return Pointer.pointerToAddress(g_build_path(Pointer.getPeer(separator), Pointer.getPeer(first_element), varargs), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_build_path(@Ptr long separator, @Ptr long first_element, Object... varargs);
	/**
	 * Original signature : <code>gchar* g_build_pathv(const gchar*, gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:99</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_build_pathv(Pointer<GtkLibrary.gchar > separator, Pointer<Pointer<GtkLibrary.gchar > > args) {
		return Pointer.pointerToAddress(g_build_pathv(Pointer.getPeer(separator), Pointer.getPeer(args)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_build_pathv(@Ptr long separator, @Ptr long args);
	/**
	 * Original signature : <code>gchar* g_build_filename(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:103</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_build_filename(Pointer<GtkLibrary.gchar > first_element, Object... varargs) {
		return Pointer.pointerToAddress(g_build_filename(Pointer.getPeer(first_element), varargs), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_build_filename(@Ptr long first_element, Object... varargs);
	/**
	 * Original signature : <code>gchar* g_build_filenamev(gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:106</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_build_filenamev(Pointer<Pointer<GtkLibrary.gchar > > args) {
		return Pointer.pointerToAddress(g_build_filenamev(Pointer.getPeer(args)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_build_filenamev(@Ptr long args);
	/**
	 * Original signature : <code>gint g_mkdir_with_parents(const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:109</i>
	 */
	public static GtkLibrary.gint g_mkdir_with_parents(Pointer<GtkLibrary.gchar > pathname, GtkLibrary.gint mode) {
		return Pointer.pointerToAddress(g_mkdir_with_parents(Pointer.getPeer(pathname), Pointer.getPeer(mode)), .class);
	}
	@Ptr 
	protected native static long g_mkdir_with_parents(@Ptr long pathname, @Ptr long mode);
	/**
	 * Original signature : <code>gboolean g_path_is_absolute(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:135</i>
	 */
	public static GtkLibrary.gboolean g_path_is_absolute(Pointer<GtkLibrary.gchar > file_name) {
		return Pointer.pointerToAddress(g_path_is_absolute(Pointer.getPeer(file_name)), .class);
	}
	@Ptr 
	protected native static long g_path_is_absolute(@Ptr long file_name);
	/**
	 * Original signature : <code>gchar* g_path_skip_root(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:137</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_path_skip_root(Pointer<GtkLibrary.gchar > file_name) {
		return Pointer.pointerToAddress(g_path_skip_root(Pointer.getPeer(file_name)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_path_skip_root(@Ptr long file_name);
	/**
	 * Original signature : <code>gchar* g_basename(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:140</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_basename(Pointer<GtkLibrary.gchar > file_name) {
		return Pointer.pointerToAddress(g_basename(Pointer.getPeer(file_name)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_basename(@Ptr long file_name);
	/**
	 * Original signature : <code>gchar* g_get_current_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:146</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_current_dir() {
		return Pointer.pointerToAddress(g_get_current_dir$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_current_dir$2();
	/**
	 * Original signature : <code>gchar* g_path_get_basename(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:148</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_path_get_basename(Pointer<GtkLibrary.gchar > file_name) {
		return Pointer.pointerToAddress(g_path_get_basename(Pointer.getPeer(file_name)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_path_get_basename(@Ptr long file_name);
	/**
	 * Original signature : <code>gchar* g_path_get_dirname(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gfileutils.h:150</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_path_get_dirname(Pointer<GtkLibrary.gchar > file_name) {
		return Pointer.pointerToAddress(g_path_get_dirname(Pointer.getPeer(file_name)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_path_get_dirname(@Ptr long file_name);
	/**
	 * Original signature : <code>gchar* g_strip_context(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ggettext.h:4</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strip_context(Pointer<GtkLibrary.gchar > msgid, Pointer<GtkLibrary.gchar > msgval) {
		return Pointer.pointerToAddress(g_strip_context(Pointer.getPeer(msgid), Pointer.getPeer(msgval)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strip_context(@Ptr long msgid, @Ptr long msgval);
	/**
	 * Original signature : <code>gchar* g_dgettext(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ggettext.h:8</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_dgettext(Pointer<GtkLibrary.gchar > domain, Pointer<GtkLibrary.gchar > msgid) {
		return Pointer.pointerToAddress(g_dgettext(Pointer.getPeer(domain), Pointer.getPeer(msgid)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_dgettext(@Ptr long domain, @Ptr long msgid);
	/**
	 * Original signature : <code>gchar* g_dcgettext(const gchar*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/ggettext.h:11</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_dcgettext(Pointer<GtkLibrary.gchar > domain, Pointer<GtkLibrary.gchar > msgid, GtkLibrary.gint category) {
		return Pointer.pointerToAddress(g_dcgettext(Pointer.getPeer(domain), Pointer.getPeer(msgid), Pointer.getPeer(category)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_dcgettext(@Ptr long domain, @Ptr long msgid, @Ptr long category);
	/**
	 * Original signature : <code>gchar* g_dngettext(const gchar*, const gchar*, const gchar*, gulong)</code><br>
	 * <i>native declaration : glib-2.0/glib/ggettext.h:15</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_dngettext(Pointer<GtkLibrary.gchar > domain, Pointer<GtkLibrary.gchar > msgid, Pointer<GtkLibrary.gchar > msgid_plural, GtkLibrary.gulong n) {
		return Pointer.pointerToAddress(g_dngettext(Pointer.getPeer(domain), Pointer.getPeer(msgid), Pointer.getPeer(msgid_plural), Pointer.getPeer(n)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_dngettext(@Ptr long domain, @Ptr long msgid, @Ptr long msgid_plural, @Ptr long n);
	/**
	 * Original signature : <code>gchar* g_dpgettext(const gchar*, const gchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/ggettext.h:20</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_dpgettext(Pointer<GtkLibrary.gchar > domain, Pointer<GtkLibrary.gchar > msgctxtid, gsize msgidoffset) {
		return Pointer.pointerToAddress(g_dpgettext(Pointer.getPeer(domain), Pointer.getPeer(msgctxtid), Pointer.getPeer(msgidoffset)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_dpgettext(@Ptr long domain, @Ptr long msgctxtid, @Ptr long msgidoffset);
	/**
	 * Original signature : <code>gchar* g_dpgettext2(const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ggettext.h:24</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_dpgettext2(Pointer<GtkLibrary.gchar > domain, Pointer<GtkLibrary.gchar > context, Pointer<GtkLibrary.gchar > msgid) {
		return Pointer.pointerToAddress(g_dpgettext2(Pointer.getPeer(domain), Pointer.getPeer(context), Pointer.getPeer(msgid)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_dpgettext2(@Ptr long domain, @Ptr long context, @Ptr long msgid);
	/**
	 * Original signature : <code>void g_free(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:36</i>
	 */
	public static void g_free(GtkLibrary.gpointer mem) {
		g_free(Pointer.getPeer(mem));
	}
	protected native static void g_free(@Ptr long mem);
	/**
	 * Original signature : <code>void g_clear_pointer(gpointer*, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:39</i>
	 */
	public static void g_clear_pointer(Pointer<GtkLibrary.gpointer > pp, GtkLibrary.GDestroyNotify destroy) {
		g_clear_pointer(Pointer.getPeer(pp), Pointer.getPeer(destroy));
	}
	protected native static void g_clear_pointer(@Ptr long pp, @Ptr long destroy);
	/**
	 * Original signature : <code>gpointer g_malloc(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:43</i>
	 */
	public static GtkLibrary.gpointer g_malloc(gsize n_bytes) {
		return Pointer.pointerToAddress(g_malloc(Pointer.getPeer(n_bytes)), .class);
	}
	@Ptr 
	protected native static long g_malloc(@Ptr long n_bytes);
	/**
	 * Original signature : <code>gpointer g_malloc0(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:45</i>
	 */
	public static GtkLibrary.gpointer g_malloc0(gsize n_bytes) {
		return Pointer.pointerToAddress(g_malloc0(Pointer.getPeer(n_bytes)), .class);
	}
	@Ptr 
	protected native static long g_malloc0(@Ptr long n_bytes);
	/**
	 * Original signature : <code>gpointer g_realloc(gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:47</i>
	 */
	public static GtkLibrary.gpointer g_realloc(GtkLibrary.gpointer mem, gsize n_bytes) {
		return Pointer.pointerToAddress(g_realloc(Pointer.getPeer(mem), Pointer.getPeer(n_bytes)), .class);
	}
	@Ptr 
	protected native static long g_realloc(@Ptr long mem, @Ptr long n_bytes);
	/**
	 * Original signature : <code>gpointer g_try_malloc(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:50</i>
	 */
	public static GtkLibrary.gpointer g_try_malloc(gsize n_bytes) {
		return Pointer.pointerToAddress(g_try_malloc(Pointer.getPeer(n_bytes)), .class);
	}
	@Ptr 
	protected native static long g_try_malloc(@Ptr long n_bytes);
	/**
	 * Original signature : <code>gpointer g_try_malloc0(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:52</i>
	 */
	public static GtkLibrary.gpointer g_try_malloc0(gsize n_bytes) {
		return Pointer.pointerToAddress(g_try_malloc0(Pointer.getPeer(n_bytes)), .class);
	}
	@Ptr 
	protected native static long g_try_malloc0(@Ptr long n_bytes);
	/**
	 * Original signature : <code>gpointer g_try_realloc(gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:54</i>
	 */
	public static GtkLibrary.gpointer g_try_realloc(GtkLibrary.gpointer mem, gsize n_bytes) {
		return Pointer.pointerToAddress(g_try_realloc(Pointer.getPeer(mem), Pointer.getPeer(n_bytes)), .class);
	}
	@Ptr 
	protected native static long g_try_realloc(@Ptr long mem, @Ptr long n_bytes);
	/**
	 * Original signature : <code>gpointer g_malloc_n(gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:58</i>
	 */
	public static GtkLibrary.gpointer g_malloc_n(gsize n_blocks, gsize n_block_bytes) {
		return Pointer.pointerToAddress(g_malloc_n(Pointer.getPeer(n_blocks), Pointer.getPeer(n_block_bytes)), .class);
	}
	@Ptr 
	protected native static long g_malloc_n(@Ptr long n_blocks, @Ptr long n_block_bytes);
	/**
	 * Original signature : <code>gpointer g_malloc0_n(gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:61</i>
	 */
	public static GtkLibrary.gpointer g_malloc0_n(gsize n_blocks, gsize n_block_bytes) {
		return Pointer.pointerToAddress(g_malloc0_n(Pointer.getPeer(n_blocks), Pointer.getPeer(n_block_bytes)), .class);
	}
	@Ptr 
	protected native static long g_malloc0_n(@Ptr long n_blocks, @Ptr long n_block_bytes);
	/**
	 * Original signature : <code>gpointer g_realloc_n(gpointer, gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:64</i>
	 */
	public static GtkLibrary.gpointer g_realloc_n(GtkLibrary.gpointer mem, gsize n_blocks, gsize n_block_bytes) {
		return Pointer.pointerToAddress(g_realloc_n(Pointer.getPeer(mem), Pointer.getPeer(n_blocks), Pointer.getPeer(n_block_bytes)), .class);
	}
	@Ptr 
	protected native static long g_realloc_n(@Ptr long mem, @Ptr long n_blocks, @Ptr long n_block_bytes);
	/**
	 * Original signature : <code>gpointer g_try_malloc_n(gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:68</i>
	 */
	public static GtkLibrary.gpointer g_try_malloc_n(gsize n_blocks, gsize n_block_bytes) {
		return Pointer.pointerToAddress(g_try_malloc_n(Pointer.getPeer(n_blocks), Pointer.getPeer(n_block_bytes)), .class);
	}
	@Ptr 
	protected native static long g_try_malloc_n(@Ptr long n_blocks, @Ptr long n_block_bytes);
	/**
	 * Original signature : <code>gpointer g_try_malloc0_n(gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:71</i>
	 */
	public static GtkLibrary.gpointer g_try_malloc0_n(gsize n_blocks, gsize n_block_bytes) {
		return Pointer.pointerToAddress(g_try_malloc0_n(Pointer.getPeer(n_blocks), Pointer.getPeer(n_block_bytes)), .class);
	}
	@Ptr 
	protected native static long g_try_malloc0_n(@Ptr long n_blocks, @Ptr long n_block_bytes);
	/**
	 * Original signature : <code>gpointer g_try_realloc_n(gpointer, gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:74</i>
	 */
	public static GtkLibrary.gpointer g_try_realloc_n(GtkLibrary.gpointer mem, gsize n_blocks, gsize n_block_bytes) {
		return Pointer.pointerToAddress(g_try_realloc_n(Pointer.getPeer(mem), Pointer.getPeer(n_blocks), Pointer.getPeer(n_block_bytes)), .class);
	}
	@Ptr 
	protected native static long g_try_realloc_n(@Ptr long mem, @Ptr long n_blocks, @Ptr long n_block_bytes);
	/**
	 * Original signature : <code>void g_mem_set_vtable(GMemVTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:252</i>
	 */
	public static void g_mem_set_vtable(Pointer<GtkLibrary.GMemVTable > vtable) {
		g_mem_set_vtable(Pointer.getPeer(vtable));
	}
	protected native static void g_mem_set_vtable(@Ptr long vtable);
	/**
	 * Original signature : <code>gboolean g_mem_is_system_malloc()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:254</i>
	 */
	public static GtkLibrary.gboolean g_mem_is_system_malloc() {
		return Pointer.pointerToAddress(g_mem_is_system_malloc$2(), .class);
	}
	@Ptr 
	protected native static long g_mem_is_system_malloc$2();
	/**
	 * Original signature : <code>void g_mem_profile()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmem.h:262</i>
	 */
	public static native void g_mem_profile();
	/**
	 * Original signature : <code>GNode* g_node_new(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:81</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_new(GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_node_new(Pointer.getPeer(data)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_new(@Ptr long data);
	/**
	 * Original signature : <code>void g_node_destroy(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:83</i>
	 */
	public static void g_node_destroy(Pointer<GtkLibrary.GNode > root) {
		g_node_destroy(Pointer.getPeer(root));
	}
	protected native static void g_node_destroy(@Ptr long root);
	/**
	 * Original signature : <code>void g_node_unlink(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:85</i>
	 */
	public static void g_node_unlink(Pointer<GtkLibrary.GNode > node) {
		g_node_unlink(Pointer.getPeer(node));
	}
	protected native static void g_node_unlink(@Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_copy_deep(GNode*, GCopyFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:87</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_copy_deep(Pointer<GtkLibrary.GNode > node, GtkLibrary.GCopyFunc copy_func, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_node_copy_deep(Pointer.getPeer(node), Pointer.getPeer(copy_func), Pointer.getPeer(data)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_copy_deep(@Ptr long node, @Ptr long copy_func, @Ptr long data);
	/**
	 * Original signature : <code>GNode* g_node_copy(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:91</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_copy(Pointer<GtkLibrary.GNode > node) {
		return Pointer.pointerToAddress(g_node_copy(Pointer.getPeer(node)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_copy(@Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_insert(GNode*, gint, GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:93</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_insert(Pointer<GtkLibrary.GNode > parent, GtkLibrary.gint position, Pointer<GtkLibrary.GNode > node) {
		return Pointer.pointerToAddress(g_node_insert(Pointer.getPeer(parent), Pointer.getPeer(position), Pointer.getPeer(node)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_insert(@Ptr long parent, @Ptr long position, @Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_insert_before(GNode*, GNode*, GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:97</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_insert_before(Pointer<GtkLibrary.GNode > parent, Pointer<GtkLibrary.GNode > sibling, Pointer<GtkLibrary.GNode > node) {
		return Pointer.pointerToAddress(g_node_insert_before(Pointer.getPeer(parent), Pointer.getPeer(sibling), Pointer.getPeer(node)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_insert_before(@Ptr long parent, @Ptr long sibling, @Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_insert_after(GNode*, GNode*, GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:101</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_insert_after(Pointer<GtkLibrary.GNode > parent, Pointer<GtkLibrary.GNode > sibling, Pointer<GtkLibrary.GNode > node) {
		return Pointer.pointerToAddress(g_node_insert_after(Pointer.getPeer(parent), Pointer.getPeer(sibling), Pointer.getPeer(node)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_insert_after(@Ptr long parent, @Ptr long sibling, @Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_prepend(GNode*, GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:105</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_prepend(Pointer<GtkLibrary.GNode > parent, Pointer<GtkLibrary.GNode > node) {
		return Pointer.pointerToAddress(g_node_prepend(Pointer.getPeer(parent), Pointer.getPeer(node)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_prepend(@Ptr long parent, @Ptr long node);
	/**
	 * Original signature : <code>guint g_node_n_nodes(GNode*, GTraverseFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:108</i>
	 */
	public static guint g_node_n_nodes(Pointer<GtkLibrary.GNode > root, GtkLibrary.GTraverseFlags flags) {
		return Pointer.pointerToAddress(g_node_n_nodes(Pointer.getPeer(root), Pointer.getPeer(flags)), .class);
	}
	@Ptr 
	protected native static long g_node_n_nodes(@Ptr long root, @Ptr long flags);
	/**
	 * Original signature : <code>GNode* g_node_get_root(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:111</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_get_root(Pointer<GtkLibrary.GNode > node) {
		return Pointer.pointerToAddress(g_node_get_root(Pointer.getPeer(node)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_get_root(@Ptr long node);
	/**
	 * Original signature : <code>gboolean g_node_is_ancestor(GNode*, GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:113</i>
	 */
	public static GtkLibrary.gboolean g_node_is_ancestor(Pointer<GtkLibrary.GNode > node, Pointer<GtkLibrary.GNode > descendant) {
		return Pointer.pointerToAddress(g_node_is_ancestor(Pointer.getPeer(node), Pointer.getPeer(descendant)), .class);
	}
	@Ptr 
	protected native static long g_node_is_ancestor(@Ptr long node, @Ptr long descendant);
	/**
	 * Original signature : <code>guint g_node_depth(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:116</i>
	 */
	public static guint g_node_depth(Pointer<GtkLibrary.GNode > node) {
		return Pointer.pointerToAddress(g_node_depth(Pointer.getPeer(node)), .class);
	}
	@Ptr 
	protected native static long g_node_depth(@Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_find(GNode*, GTraverseType, GTraverseFlags, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:118</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_find(Pointer<GtkLibrary.GNode > root, GtkLibrary.GTraverseType order, GtkLibrary.GTraverseFlags flags, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_node_find(Pointer.getPeer(root), Pointer.getPeer(order), Pointer.getPeer(flags), Pointer.getPeer(data)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_find(@Ptr long root, @Ptr long order, @Ptr long flags, @Ptr long data);
	/**
	 * traversal function, assumes that 'node' is root<br>
	 * (only traverses 'node' and its subtree).<br>
	 * this function is just a high level interface to<br>
	 * low level traversal functions, optimized for speed.<br>
	 * Original signature : <code>void g_node_traverse(GNode*, GTraverseType, GTraverseFlags, gint, GNodeTraverseFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:206</i>
	 */
	public static void g_node_traverse(Pointer<GtkLibrary.GNode > root, GtkLibrary.GTraverseType order, GtkLibrary.GTraverseFlags flags, GtkLibrary.gint max_depth, GtkLibrary.GNodeTraverseFunc func, GtkLibrary.gpointer data) {
		g_node_traverse(Pointer.getPeer(root), Pointer.getPeer(order), Pointer.getPeer(flags), Pointer.getPeer(max_depth), Pointer.getPeer(func), Pointer.getPeer(data));
	}
	protected native static void g_node_traverse(@Ptr long root, @Ptr long order, @Ptr long flags, @Ptr long max_depth, @Ptr long func, @Ptr long data);
	/**
	 * return the maximum tree height starting with 'node', this is an expensive<br>
	 * operation, since we need to visit all nodes. this could be shortened by<br>
	 * adding 'guint height' to struct _GNode, but then again, this is not very<br>
	 * often needed, and would make g_node_insert() more time consuming.<br>
	 * Original signature : <code>guint g_node_max_height(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:219</i>
	 */
	public static guint g_node_max_height(Pointer<GtkLibrary.GNode > root) {
		return Pointer.pointerToAddress(g_node_max_height(Pointer.getPeer(root)), .class);
	}
	@Ptr 
	protected native static long g_node_max_height(@Ptr long root);
	/**
	 * Original signature : <code>void g_node_children_foreach(GNode*, GTraverseFlags, GNodeForeachFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:222</i>
	 */
	public static void g_node_children_foreach(Pointer<GtkLibrary.GNode > node, GtkLibrary.GTraverseFlags flags, GtkLibrary.GNodeForeachFunc func, GtkLibrary.gpointer data) {
		g_node_children_foreach(Pointer.getPeer(node), Pointer.getPeer(flags), Pointer.getPeer(func), Pointer.getPeer(data));
	}
	protected native static void g_node_children_foreach(@Ptr long node, @Ptr long flags, @Ptr long func, @Ptr long data);
	/**
	 * Original signature : <code>void g_node_reverse_children(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:227</i>
	 */
	public static void g_node_reverse_children(Pointer<GtkLibrary.GNode > node) {
		g_node_reverse_children(Pointer.getPeer(node));
	}
	protected native static void g_node_reverse_children(@Ptr long node);
	/**
	 * Original signature : <code>guint g_node_n_children(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:229</i>
	 */
	public static guint g_node_n_children(Pointer<GtkLibrary.GNode > node) {
		return Pointer.pointerToAddress(g_node_n_children(Pointer.getPeer(node)), .class);
	}
	@Ptr 
	protected native static long g_node_n_children(@Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_nth_child(GNode*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:231</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_nth_child(Pointer<GtkLibrary.GNode > node, guint n) {
		return Pointer.pointerToAddress(g_node_nth_child(Pointer.getPeer(node), Pointer.getPeer(n)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_nth_child(@Ptr long node, @Ptr long n);
	/**
	 * Original signature : <code>GNode* g_node_last_child(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:234</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_last_child(Pointer<GtkLibrary.GNode > node) {
		return Pointer.pointerToAddress(g_node_last_child(Pointer.getPeer(node)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_last_child(@Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_find_child(GNode*, GTraverseFlags, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:236</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_find_child(Pointer<GtkLibrary.GNode > node, GtkLibrary.GTraverseFlags flags, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_node_find_child(Pointer.getPeer(node), Pointer.getPeer(flags), Pointer.getPeer(data)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_find_child(@Ptr long node, @Ptr long flags, @Ptr long data);
	/**
	 * Original signature : <code>gint g_node_child_position(GNode*, GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:240</i>
	 */
	public static GtkLibrary.gint g_node_child_position(Pointer<GtkLibrary.GNode > node, Pointer<GtkLibrary.GNode > child) {
		return Pointer.pointerToAddress(g_node_child_position(Pointer.getPeer(node), Pointer.getPeer(child)), .class);
	}
	@Ptr 
	protected native static long g_node_child_position(@Ptr long node, @Ptr long child);
	/**
	 * Original signature : <code>gint g_node_child_index(GNode*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:243</i>
	 */
	public static GtkLibrary.gint g_node_child_index(Pointer<GtkLibrary.GNode > node, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_node_child_index(Pointer.getPeer(node), Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_node_child_index(@Ptr long node, @Ptr long data);
	/**
	 * Original signature : <code>GNode* g_node_first_sibling(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:247</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_first_sibling(Pointer<GtkLibrary.GNode > node) {
		return Pointer.pointerToAddress(g_node_first_sibling(Pointer.getPeer(node)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_first_sibling(@Ptr long node);
	/**
	 * Original signature : <code>GNode* g_node_last_sibling(GNode*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gnode.h:249</i>
	 */
	public static Pointer<GtkLibrary.GNode > g_node_last_sibling(Pointer<GtkLibrary.GNode > node) {
		return Pointer.pointerToAddress(g_node_last_sibling(Pointer.getPeer(node)), GtkLibrary.GNode.class);
	}
	@Ptr 
	protected native static long g_node_last_sibling(@Ptr long node);
	/**
	 * Doubly linked lists<br>
	 * Original signature : <code>GList* g_list_alloc()</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:48</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_alloc() {
		return Pointer.pointerToAddress(g_list_alloc$2(), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_alloc$2();
	/**
	 * Original signature : <code>void g_list_free(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:50</i>
	 */
	public static void g_list_free(Pointer<GtkLibrary.GList > list) {
		g_list_free(Pointer.getPeer(list));
	}
	protected native static void g_list_free(@Ptr long list);
	/**
	 * Original signature : <code>void g_list_free_1(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:52</i>
	 */
	public static void g_list_free_1(Pointer<GtkLibrary.GList > list) {
		g_list_free_1(Pointer.getPeer(list));
	}
	protected native static void g_list_free_1(@Ptr long list);
	/**
	 * Original signature : <code>void g_list_free_full(GList*, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:55</i>
	 */
	public static void g_list_free_full(Pointer<GtkLibrary.GList > list, GtkLibrary.GDestroyNotify free_func) {
		g_list_free_full(Pointer.getPeer(list), Pointer.getPeer(free_func));
	}
	protected native static void g_list_free_full(@Ptr long list, @Ptr long free_func);
	/**
	 * Original signature : <code>GList* g_list_append(GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:58</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_append(Pointer<GtkLibrary.GList > list, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_list_append(Pointer.getPeer(list), Pointer.getPeer(data)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_append(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_list_prepend(GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:61</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_prepend(Pointer<GtkLibrary.GList > list, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_list_prepend(Pointer.getPeer(list), Pointer.getPeer(data)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_prepend(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_list_insert(GList*, gpointer, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:64</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_insert(Pointer<GtkLibrary.GList > list, GtkLibrary.gpointer data, GtkLibrary.gint position) {
		return Pointer.pointerToAddress(g_list_insert(Pointer.getPeer(list), Pointer.getPeer(data), Pointer.getPeer(position)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_insert(@Ptr long list, @Ptr long data, @Ptr long position);
	/**
	 * Original signature : <code>GList* g_list_insert_sorted(GList*, gpointer, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:68</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_insert_sorted(Pointer<GtkLibrary.GList > list, GtkLibrary.gpointer data, GtkLibrary.GCompareFunc func) {
		return Pointer.pointerToAddress(g_list_insert_sorted(Pointer.getPeer(list), Pointer.getPeer(data), Pointer.getPeer(func)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_insert_sorted(@Ptr long list, @Ptr long data, @Ptr long func);
	/**
	 * Original signature : <code>GList* g_list_insert_sorted_with_data(GList*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:72</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_insert_sorted_with_data(Pointer<GtkLibrary.GList > list, GtkLibrary.gpointer data, GtkLibrary.GCompareDataFunc func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_list_insert_sorted_with_data(Pointer.getPeer(list), Pointer.getPeer(data), Pointer.getPeer(func), Pointer.getPeer(user_data)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_insert_sorted_with_data(@Ptr long list, @Ptr long data, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>GList* g_list_insert_before(GList*, GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:77</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_insert_before(Pointer<GtkLibrary.GList > list, Pointer<GtkLibrary.GList > sibling, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_list_insert_before(Pointer.getPeer(list), Pointer.getPeer(sibling), Pointer.getPeer(data)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_insert_before(@Ptr long list, @Ptr long sibling, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_list_concat(GList*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:81</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_concat(Pointer<GtkLibrary.GList > list1, Pointer<GtkLibrary.GList > list2) {
		return Pointer.pointerToAddress(g_list_concat(Pointer.getPeer(list1), Pointer.getPeer(list2)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_concat(@Ptr long list1, @Ptr long list2);
	/**
	 * Original signature : <code>GList* g_list_remove(GList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:84</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_remove(Pointer<GtkLibrary.GList > list, GtkLibrary.gconstpointer data) {
		return Pointer.pointerToAddress(g_list_remove(Pointer.getPeer(list), Pointer.getPeer(data)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_remove(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_list_remove_all(GList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:87</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_remove_all(Pointer<GtkLibrary.GList > list, GtkLibrary.gconstpointer data) {
		return Pointer.pointerToAddress(g_list_remove_all(Pointer.getPeer(list), Pointer.getPeer(data)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_remove_all(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_list_remove_link(GList*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:90</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_remove_link(Pointer<GtkLibrary.GList > list, Pointer<GtkLibrary.GList > llink) {
		return Pointer.pointerToAddress(g_list_remove_link(Pointer.getPeer(list), Pointer.getPeer(llink)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_remove_link(@Ptr long list, @Ptr long llink);
	/**
	 * Original signature : <code>GList* g_list_delete_link(GList*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:93</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_delete_link(Pointer<GtkLibrary.GList > list, Pointer<GtkLibrary.GList > link_) {
		return Pointer.pointerToAddress(g_list_delete_link(Pointer.getPeer(list), Pointer.getPeer(link_)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_delete_link(@Ptr long list, @Ptr long link_);
	/**
	 * Original signature : <code>GList* g_list_reverse(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:96</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_reverse(Pointer<GtkLibrary.GList > list) {
		return Pointer.pointerToAddress(g_list_reverse(Pointer.getPeer(list)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_reverse(@Ptr long list);
	/**
	 * Original signature : <code>GList* g_list_copy(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:98</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_copy(Pointer<GtkLibrary.GList > list) {
		return Pointer.pointerToAddress(g_list_copy(Pointer.getPeer(list)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_copy(@Ptr long list);
	/**
	 * Original signature : <code>GList* g_list_copy_deep(GList*, GCopyFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:101</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_copy_deep(Pointer<GtkLibrary.GList > list, GtkLibrary.GCopyFunc func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_list_copy_deep(Pointer.getPeer(list), Pointer.getPeer(func), Pointer.getPeer(user_data)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_copy_deep(@Ptr long list, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>GList* g_list_nth(GList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:106</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_nth(Pointer<GtkLibrary.GList > list, guint n) {
		return Pointer.pointerToAddress(g_list_nth(Pointer.getPeer(list), Pointer.getPeer(n)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_nth(@Ptr long list, @Ptr long n);
	/**
	 * Original signature : <code>GList* g_list_nth_prev(GList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:109</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_nth_prev(Pointer<GtkLibrary.GList > list, guint n) {
		return Pointer.pointerToAddress(g_list_nth_prev(Pointer.getPeer(list), Pointer.getPeer(n)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_nth_prev(@Ptr long list, @Ptr long n);
	/**
	 * Original signature : <code>GList* g_list_find(GList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:112</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_find(Pointer<GtkLibrary.GList > list, GtkLibrary.gconstpointer data) {
		return Pointer.pointerToAddress(g_list_find(Pointer.getPeer(list), Pointer.getPeer(data)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_find(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_list_find_custom(GList*, gconstpointer, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:115</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_find_custom(Pointer<GtkLibrary.GList > list, GtkLibrary.gconstpointer data, GtkLibrary.GCompareFunc func) {
		return Pointer.pointerToAddress(g_list_find_custom(Pointer.getPeer(list), Pointer.getPeer(data), Pointer.getPeer(func)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_find_custom(@Ptr long list, @Ptr long data, @Ptr long func);
	/**
	 * Original signature : <code>gint g_list_position(GList*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:119</i>
	 */
	public static GtkLibrary.gint g_list_position(Pointer<GtkLibrary.GList > list, Pointer<GtkLibrary.GList > llink) {
		return Pointer.pointerToAddress(g_list_position(Pointer.getPeer(list), Pointer.getPeer(llink)), .class);
	}
	@Ptr 
	protected native static long g_list_position(@Ptr long list, @Ptr long llink);
	/**
	 * Original signature : <code>gint g_list_index(GList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:122</i>
	 */
	public static GtkLibrary.gint g_list_index(Pointer<GtkLibrary.GList > list, GtkLibrary.gconstpointer data) {
		return Pointer.pointerToAddress(g_list_index(Pointer.getPeer(list), Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_list_index(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_list_last(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:125</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_last(Pointer<GtkLibrary.GList > list) {
		return Pointer.pointerToAddress(g_list_last(Pointer.getPeer(list)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_last(@Ptr long list);
	/**
	 * Original signature : <code>GList* g_list_first(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:127</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_first(Pointer<GtkLibrary.GList > list) {
		return Pointer.pointerToAddress(g_list_first(Pointer.getPeer(list)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_first(@Ptr long list);
	/**
	 * Original signature : <code>guint g_list_length(GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:129</i>
	 */
	public static guint g_list_length(Pointer<GtkLibrary.GList > list) {
		return Pointer.pointerToAddress(g_list_length(Pointer.getPeer(list)), .class);
	}
	@Ptr 
	protected native static long g_list_length(@Ptr long list);
	/**
	 * Original signature : <code>void g_list_foreach(GList*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:131</i>
	 */
	public static void g_list_foreach(Pointer<GtkLibrary.GList > list, GtkLibrary.GFunc func, GtkLibrary.gpointer user_data) {
		g_list_foreach(Pointer.getPeer(list), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_list_foreach(@Ptr long list, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>GList* g_list_sort(GList*, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:135</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_sort(Pointer<GtkLibrary.GList > list, GtkLibrary.GCompareFunc compare_func) {
		return Pointer.pointerToAddress(g_list_sort(Pointer.getPeer(list), Pointer.getPeer(compare_func)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_sort(@Ptr long list, @Ptr long compare_func);
	/**
	 * Original signature : <code>GList* g_list_sort_with_data(GList*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:138</i>
	 */
	public static Pointer<GtkLibrary.GList > g_list_sort_with_data(Pointer<GtkLibrary.GList > list, GtkLibrary.GCompareDataFunc compare_func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_list_sort_with_data(Pointer.getPeer(list), Pointer.getPeer(compare_func), Pointer.getPeer(user_data)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_list_sort_with_data(@Ptr long list, @Ptr long compare_func, @Ptr long user_data);
	/**
	 * Original signature : <code>gpointer g_list_nth_data(GList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/glist.h:142</i>
	 */
	public static GtkLibrary.gpointer g_list_nth_data(Pointer<GtkLibrary.GList > list, guint n) {
		return Pointer.pointerToAddress(g_list_nth_data(Pointer.getPeer(list), Pointer.getPeer(n)), .class);
	}
	@Ptr 
	protected native static long g_list_nth_data(@Ptr long list, @Ptr long n);
	/**
	 * Original signature : <code>GHashTable* g_hash_table_new(GHashFunc, GEqualFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:56</i>
	 */
	public static Pointer<GtkLibrary.GHashTable > g_hash_table_new(GtkLibrary.GHashFunc hash_func, GtkLibrary.GEqualFunc key_equal_func) {
		return Pointer.pointerToAddress(g_hash_table_new(Pointer.getPeer(hash_func), Pointer.getPeer(key_equal_func)), GtkLibrary.GHashTable.class);
	}
	@Ptr 
	protected native static long g_hash_table_new(@Ptr long hash_func, @Ptr long key_equal_func);
	/**
	 * Original signature : <code>GHashTable* g_hash_table_new_full(GHashFunc, GEqualFunc, GDestroyNotify, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:59</i>
	 */
	public static Pointer<GtkLibrary.GHashTable > g_hash_table_new_full(GtkLibrary.GHashFunc hash_func, GtkLibrary.GEqualFunc key_equal_func, GtkLibrary.GDestroyNotify key_destroy_func, GtkLibrary.GDestroyNotify value_destroy_func) {
		return Pointer.pointerToAddress(g_hash_table_new_full(Pointer.getPeer(hash_func), Pointer.getPeer(key_equal_func), Pointer.getPeer(key_destroy_func), Pointer.getPeer(value_destroy_func)), GtkLibrary.GHashTable.class);
	}
	@Ptr 
	protected native static long g_hash_table_new_full(@Ptr long hash_func, @Ptr long key_equal_func, @Ptr long key_destroy_func, @Ptr long value_destroy_func);
	/**
	 * Original signature : <code>void g_hash_table_destroy(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:64</i>
	 */
	public static void g_hash_table_destroy(Pointer<GtkLibrary.GHashTable > hash_table) {
		g_hash_table_destroy(Pointer.getPeer(hash_table));
	}
	protected native static void g_hash_table_destroy(@Ptr long hash_table);
	/**
	 * Original signature : <code>void g_hash_table_insert(GHashTable*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:66</i>
	 */
	public static void g_hash_table_insert(Pointer<GtkLibrary.GHashTable > hash_table, GtkLibrary.gpointer key, GtkLibrary.gpointer value) {
		g_hash_table_insert(Pointer.getPeer(hash_table), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_hash_table_insert(@Ptr long hash_table, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>void g_hash_table_replace(GHashTable*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:70</i>
	 */
	public static void g_hash_table_replace(Pointer<GtkLibrary.GHashTable > hash_table, GtkLibrary.gpointer key, GtkLibrary.gpointer value) {
		g_hash_table_replace(Pointer.getPeer(hash_table), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_hash_table_replace(@Ptr long hash_table, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>void g_hash_table_add(GHashTable*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:74</i>
	 */
	public static void g_hash_table_add(Pointer<GtkLibrary.GHashTable > hash_table, GtkLibrary.gpointer key) {
		g_hash_table_add(Pointer.getPeer(hash_table), Pointer.getPeer(key));
	}
	protected native static void g_hash_table_add(@Ptr long hash_table, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_hash_table_remove(GHashTable*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:77</i>
	 */
	public static GtkLibrary.gboolean g_hash_table_remove(Pointer<GtkLibrary.GHashTable > hash_table, GtkLibrary.gconstpointer key) {
		return Pointer.pointerToAddress(g_hash_table_remove(Pointer.getPeer(hash_table), Pointer.getPeer(key)), .class);
	}
	@Ptr 
	protected native static long g_hash_table_remove(@Ptr long hash_table, @Ptr long key);
	/**
	 * Original signature : <code>void g_hash_table_remove_all(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:80</i>
	 */
	public static void g_hash_table_remove_all(Pointer<GtkLibrary.GHashTable > hash_table) {
		g_hash_table_remove_all(Pointer.getPeer(hash_table));
	}
	protected native static void g_hash_table_remove_all(@Ptr long hash_table);
	/**
	 * Original signature : <code>gboolean g_hash_table_steal(GHashTable*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:82</i>
	 */
	public static GtkLibrary.gboolean g_hash_table_steal(Pointer<GtkLibrary.GHashTable > hash_table, GtkLibrary.gconstpointer key) {
		return Pointer.pointerToAddress(g_hash_table_steal(Pointer.getPeer(hash_table), Pointer.getPeer(key)), .class);
	}
	@Ptr 
	protected native static long g_hash_table_steal(@Ptr long hash_table, @Ptr long key);
	/**
	 * Original signature : <code>void g_hash_table_steal_all(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:85</i>
	 */
	public static void g_hash_table_steal_all(Pointer<GtkLibrary.GHashTable > hash_table) {
		g_hash_table_steal_all(Pointer.getPeer(hash_table));
	}
	protected native static void g_hash_table_steal_all(@Ptr long hash_table);
	/**
	 * Original signature : <code>gpointer g_hash_table_lookup(GHashTable*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:87</i>
	 */
	public static GtkLibrary.gpointer g_hash_table_lookup(Pointer<GtkLibrary.GHashTable > hash_table, GtkLibrary.gconstpointer key) {
		return Pointer.pointerToAddress(g_hash_table_lookup(Pointer.getPeer(hash_table), Pointer.getPeer(key)), .class);
	}
	@Ptr 
	protected native static long g_hash_table_lookup(@Ptr long hash_table, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_hash_table_contains(GHashTable*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:90</i>
	 */
	public static GtkLibrary.gboolean g_hash_table_contains(Pointer<GtkLibrary.GHashTable > hash_table, GtkLibrary.gconstpointer key) {
		return Pointer.pointerToAddress(g_hash_table_contains(Pointer.getPeer(hash_table), Pointer.getPeer(key)), .class);
	}
	@Ptr 
	protected native static long g_hash_table_contains(@Ptr long hash_table, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_hash_table_lookup_extended(GHashTable*, gconstpointer, gpointer*, gpointer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:93</i>
	 */
	public static GtkLibrary.gboolean g_hash_table_lookup_extended(Pointer<GtkLibrary.GHashTable > hash_table, GtkLibrary.gconstpointer lookup_key, Pointer<GtkLibrary.gpointer > orig_key, Pointer<GtkLibrary.gpointer > value) {
		return Pointer.pointerToAddress(g_hash_table_lookup_extended(Pointer.getPeer(hash_table), Pointer.getPeer(lookup_key), Pointer.getPeer(orig_key), Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_hash_table_lookup_extended(@Ptr long hash_table, @Ptr long lookup_key, @Ptr long orig_key, @Ptr long value);
	/**
	 * Original signature : <code>void g_hash_table_foreach(GHashTable*, GHFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:98</i>
	 */
	public static void g_hash_table_foreach(Pointer<GtkLibrary.GHashTable > hash_table, GtkLibrary.GHFunc func, GtkLibrary.gpointer user_data) {
		g_hash_table_foreach(Pointer.getPeer(hash_table), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_hash_table_foreach(@Ptr long hash_table, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>gpointer g_hash_table_find(GHashTable*, GHRFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:102</i>
	 */
	public static GtkLibrary.gpointer g_hash_table_find(Pointer<GtkLibrary.GHashTable > hash_table, GtkLibrary.GHRFunc predicate, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_hash_table_find(Pointer.getPeer(hash_table), Pointer.getPeer(predicate), Pointer.getPeer(user_data)), .class);
	}
	@Ptr 
	protected native static long g_hash_table_find(@Ptr long hash_table, @Ptr long predicate, @Ptr long user_data);
	/**
	 * Original signature : <code>guint g_hash_table_foreach_remove(GHashTable*, GHRFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:106</i>
	 */
	public static guint g_hash_table_foreach_remove(Pointer<GtkLibrary.GHashTable > hash_table, GtkLibrary.GHRFunc func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_hash_table_foreach_remove(Pointer.getPeer(hash_table), Pointer.getPeer(func), Pointer.getPeer(user_data)), .class);
	}
	@Ptr 
	protected native static long g_hash_table_foreach_remove(@Ptr long hash_table, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>guint g_hash_table_foreach_steal(GHashTable*, GHRFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:110</i>
	 */
	public static guint g_hash_table_foreach_steal(Pointer<GtkLibrary.GHashTable > hash_table, GtkLibrary.GHRFunc func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_hash_table_foreach_steal(Pointer.getPeer(hash_table), Pointer.getPeer(func), Pointer.getPeer(user_data)), .class);
	}
	@Ptr 
	protected native static long g_hash_table_foreach_steal(@Ptr long hash_table, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>guint g_hash_table_size(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:114</i>
	 */
	public static guint g_hash_table_size(Pointer<GtkLibrary.GHashTable > hash_table) {
		return Pointer.pointerToAddress(g_hash_table_size(Pointer.getPeer(hash_table)), .class);
	}
	@Ptr 
	protected native static long g_hash_table_size(@Ptr long hash_table);
	/**
	 * Original signature : <code>GList* g_hash_table_get_keys(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:116</i>
	 */
	public static Pointer<GtkLibrary.GList > g_hash_table_get_keys(Pointer<GtkLibrary.GHashTable > hash_table) {
		return Pointer.pointerToAddress(g_hash_table_get_keys(Pointer.getPeer(hash_table)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_hash_table_get_keys(@Ptr long hash_table);
	/**
	 * Original signature : <code>GList* g_hash_table_get_values(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:118</i>
	 */
	public static Pointer<GtkLibrary.GList > g_hash_table_get_values(Pointer<GtkLibrary.GHashTable > hash_table) {
		return Pointer.pointerToAddress(g_hash_table_get_values(Pointer.getPeer(hash_table)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_hash_table_get_values(@Ptr long hash_table);
	/**
	 * Original signature : <code>void g_hash_table_iter_init(GHashTableIter*, GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:121</i>
	 */
	public static void g_hash_table_iter_init(Pointer<GtkLibrary.GHashTableIter > iter, Pointer<GtkLibrary.GHashTable > hash_table) {
		g_hash_table_iter_init(Pointer.getPeer(iter), Pointer.getPeer(hash_table));
	}
	protected native static void g_hash_table_iter_init(@Ptr long iter, @Ptr long hash_table);
	/**
	 * Original signature : <code>gboolean g_hash_table_iter_next(GHashTableIter*, gpointer*, gpointer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:124</i>
	 */
	public static GtkLibrary.gboolean g_hash_table_iter_next(Pointer<GtkLibrary.GHashTableIter > iter, Pointer<GtkLibrary.gpointer > key, Pointer<GtkLibrary.gpointer > value) {
		return Pointer.pointerToAddress(g_hash_table_iter_next(Pointer.getPeer(iter), Pointer.getPeer(key), Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_hash_table_iter_next(@Ptr long iter, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>GHashTable* g_hash_table_iter_get_hash_table(GHashTableIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:128</i>
	 */
	public static Pointer<GtkLibrary.GHashTable > g_hash_table_iter_get_hash_table(Pointer<GtkLibrary.GHashTableIter > iter) {
		return Pointer.pointerToAddress(g_hash_table_iter_get_hash_table(Pointer.getPeer(iter)), GtkLibrary.GHashTable.class);
	}
	@Ptr 
	protected native static long g_hash_table_iter_get_hash_table(@Ptr long iter);
	/**
	 * Original signature : <code>void g_hash_table_iter_remove(GHashTableIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:130</i>
	 */
	public static void g_hash_table_iter_remove(Pointer<GtkLibrary.GHashTableIter > iter) {
		g_hash_table_iter_remove(Pointer.getPeer(iter));
	}
	protected native static void g_hash_table_iter_remove(@Ptr long iter);
	/**
	 * Original signature : <code>void g_hash_table_iter_replace(GHashTableIter*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:132</i>
	 */
	public static void g_hash_table_iter_replace(Pointer<GtkLibrary.GHashTableIter > iter, GtkLibrary.gpointer value) {
		g_hash_table_iter_replace(Pointer.getPeer(iter), Pointer.getPeer(value));
	}
	protected native static void g_hash_table_iter_replace(@Ptr long iter, @Ptr long value);
	/**
	 * Original signature : <code>void g_hash_table_iter_steal(GHashTableIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:135</i>
	 */
	public static void g_hash_table_iter_steal(Pointer<GtkLibrary.GHashTableIter > iter) {
		g_hash_table_iter_steal(Pointer.getPeer(iter));
	}
	protected native static void g_hash_table_iter_steal(@Ptr long iter);
	/**
	 * Original signature : <code>GHashTable* g_hash_table_ref(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:138</i>
	 */
	public static Pointer<GtkLibrary.GHashTable > g_hash_table_ref(Pointer<GtkLibrary.GHashTable > hash_table) {
		return Pointer.pointerToAddress(g_hash_table_ref(Pointer.getPeer(hash_table)), GtkLibrary.GHashTable.class);
	}
	@Ptr 
	protected native static long g_hash_table_ref(@Ptr long hash_table);
	/**
	 * Original signature : <code>void g_hash_table_unref(GHashTable*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:140</i>
	 */
	public static void g_hash_table_unref(Pointer<GtkLibrary.GHashTable > hash_table) {
		g_hash_table_unref(Pointer.getPeer(hash_table));
	}
	protected native static void g_hash_table_unref(@Ptr long hash_table);
	/**
	 * Hash Functions<br>
	 * Original signature : <code>gboolean g_str_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:150</i>
	 */
	public static GtkLibrary.gboolean g_str_equal(GtkLibrary.gconstpointer v1, GtkLibrary.gconstpointer v2) {
		return Pointer.pointerToAddress(g_str_equal(Pointer.getPeer(v1), Pointer.getPeer(v2)), .class);
	}
	@Ptr 
	protected native static long g_str_equal(@Ptr long v1, @Ptr long v2);
	/**
	 * Original signature : <code>guint g_str_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:153</i>
	 */
	public static guint g_str_hash(GtkLibrary.gconstpointer v) {
		return Pointer.pointerToAddress(g_str_hash(Pointer.getPeer(v)), .class);
	}
	@Ptr 
	protected native static long g_str_hash(@Ptr long v);
	/**
	 * Original signature : <code>gboolean g_int_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:156</i>
	 */
	public static GtkLibrary.gboolean g_int_equal(GtkLibrary.gconstpointer v1, GtkLibrary.gconstpointer v2) {
		return Pointer.pointerToAddress(g_int_equal(Pointer.getPeer(v1), Pointer.getPeer(v2)), .class);
	}
	@Ptr 
	protected native static long g_int_equal(@Ptr long v1, @Ptr long v2);
	/**
	 * Original signature : <code>guint g_int_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:159</i>
	 */
	public static guint g_int_hash(GtkLibrary.gconstpointer v) {
		return Pointer.pointerToAddress(g_int_hash(Pointer.getPeer(v)), .class);
	}
	@Ptr 
	protected native static long g_int_hash(@Ptr long v);
	/**
	 * Original signature : <code>gboolean g_int64_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:162</i>
	 */
	public static GtkLibrary.gboolean g_int64_equal(GtkLibrary.gconstpointer v1, GtkLibrary.gconstpointer v2) {
		return Pointer.pointerToAddress(g_int64_equal(Pointer.getPeer(v1), Pointer.getPeer(v2)), .class);
	}
	@Ptr 
	protected native static long g_int64_equal(@Ptr long v1, @Ptr long v2);
	/**
	 * Original signature : <code>guint g_int64_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:165</i>
	 */
	public static guint g_int64_hash(GtkLibrary.gconstpointer v) {
		return Pointer.pointerToAddress(g_int64_hash(Pointer.getPeer(v)), .class);
	}
	@Ptr 
	protected native static long g_int64_hash(@Ptr long v);
	/**
	 * Original signature : <code>gboolean g_double_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:168</i>
	 */
	public static GtkLibrary.gboolean g_double_equal(GtkLibrary.gconstpointer v1, GtkLibrary.gconstpointer v2) {
		return Pointer.pointerToAddress(g_double_equal(Pointer.getPeer(v1), Pointer.getPeer(v2)), .class);
	}
	@Ptr 
	protected native static long g_double_equal(@Ptr long v1, @Ptr long v2);
	/**
	 * Original signature : <code>guint g_double_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:171</i>
	 */
	public static guint g_double_hash(GtkLibrary.gconstpointer v) {
		return Pointer.pointerToAddress(g_double_hash(Pointer.getPeer(v)), .class);
	}
	@Ptr 
	protected native static long g_double_hash(@Ptr long v);
	/**
	 * Original signature : <code>guint g_direct_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:174</i>
	 */
	public static guint g_direct_hash(GtkLibrary.gconstpointer v) {
		return Pointer.pointerToAddress(g_direct_hash(Pointer.getPeer(v)), .class);
	}
	@Ptr 
	protected native static long g_direct_hash(@Ptr long v);
	/**
	 * Original signature : <code>gboolean g_direct_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghash.h:176</i>
	 */
	public static GtkLibrary.gboolean g_direct_equal(GtkLibrary.gconstpointer v1, GtkLibrary.gconstpointer v2) {
		return Pointer.pointerToAddress(g_direct_equal(Pointer.getPeer(v1), Pointer.getPeer(v2)), .class);
	}
	@Ptr 
	protected native static long g_direct_equal(@Ptr long v1, @Ptr long v2);
	/**
	 * Original signature : <code>GHmac* g_hmac_new(GChecksumType, const guchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:15</i>
	 */
	public static Pointer<GtkLibrary.GHmac > g_hmac_new(GtkLibrary.GChecksumType digest_type, Pointer<GtkLibrary.guchar > key, gsize key_len) {
		return Pointer.pointerToAddress(g_hmac_new(Pointer.getPeer(digest_type), Pointer.getPeer(key), Pointer.getPeer(key_len)), GtkLibrary.GHmac.class);
	}
	@Ptr 
	protected native static long g_hmac_new(@Ptr long digest_type, @Ptr long key, @Ptr long key_len);
	/**
	 * Original signature : <code>GHmac* g_hmac_copy(const GHmac*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:19</i>
	 */
	public static Pointer<GtkLibrary.GHmac > g_hmac_copy(Pointer<GtkLibrary.GHmac > hmac) {
		return Pointer.pointerToAddress(g_hmac_copy(Pointer.getPeer(hmac)), GtkLibrary.GHmac.class);
	}
	@Ptr 
	protected native static long g_hmac_copy(@Ptr long hmac);
	/**
	 * Original signature : <code>GHmac* g_hmac_ref(GHmac*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:21</i>
	 */
	public static Pointer<GtkLibrary.GHmac > g_hmac_ref(Pointer<GtkLibrary.GHmac > hmac) {
		return Pointer.pointerToAddress(g_hmac_ref(Pointer.getPeer(hmac)), GtkLibrary.GHmac.class);
	}
	@Ptr 
	protected native static long g_hmac_ref(@Ptr long hmac);
	/**
	 * Original signature : <code>void g_hmac_unref(GHmac*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:23</i>
	 */
	public static void g_hmac_unref(Pointer<GtkLibrary.GHmac > hmac) {
		g_hmac_unref(Pointer.getPeer(hmac));
	}
	protected native static void g_hmac_unref(@Ptr long hmac);
	/**
	 * Original signature : <code>void g_hmac_update(GHmac*, const guchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:25</i>
	 */
	public static void g_hmac_update(Pointer<GtkLibrary.GHmac > hmac, Pointer<GtkLibrary.guchar > data, GtkLibrary.gssize length) {
		g_hmac_update(Pointer.getPeer(hmac), Pointer.getPeer(data), Pointer.getPeer(length));
	}
	protected native static void g_hmac_update(@Ptr long hmac, @Ptr long data, @Ptr long length);
	/**
	 * Original signature : <code>gchar* g_hmac_get_string(GHmac*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:29</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_hmac_get_string(Pointer<GtkLibrary.GHmac > hmac) {
		return Pointer.pointerToAddress(g_hmac_get_string(Pointer.getPeer(hmac)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_hmac_get_string(@Ptr long hmac);
	/**
	 * Original signature : <code>void g_hmac_get_digest(GHmac*, guint8*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:31</i>
	 */
	public static void g_hmac_get_digest(Pointer<GtkLibrary.GHmac > hmac, Pointer<GtkLibrary.guint8 > buffer, Pointer<gsize > digest_len) {
		g_hmac_get_digest(Pointer.getPeer(hmac), Pointer.getPeer(buffer), Pointer.getPeer(digest_len));
	}
	protected native static void g_hmac_get_digest(@Ptr long hmac, @Ptr long buffer, @Ptr long digest_len);
	/**
	 * Original signature : <code>gchar* g_compute_hmac_for_data(GChecksumType, const guchar*, gsize, const guchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:36</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_compute_hmac_for_data(GtkLibrary.GChecksumType digest_type, Pointer<GtkLibrary.guchar > key, gsize key_len, Pointer<GtkLibrary.guchar > data, gsize length) {
		return Pointer.pointerToAddress(g_compute_hmac_for_data(Pointer.getPeer(digest_type), Pointer.getPeer(key), Pointer.getPeer(key_len), Pointer.getPeer(data), Pointer.getPeer(length)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_compute_hmac_for_data(@Ptr long digest_type, @Ptr long key, @Ptr long key_len, @Ptr long data, @Ptr long length);
	/**
	 * Original signature : <code>gchar* g_compute_hmac_for_string(GChecksumType, const guchar*, gsize, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghmac.h:42</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_compute_hmac_for_string(GtkLibrary.GChecksumType digest_type, Pointer<GtkLibrary.guchar > key, gsize key_len, Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize length) {
		return Pointer.pointerToAddress(g_compute_hmac_for_string(Pointer.getPeer(digest_type), Pointer.getPeer(key), Pointer.getPeer(key_len), Pointer.getPeer(str), Pointer.getPeer(length)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_compute_hmac_for_string(@Ptr long digest_type, @Ptr long key, @Ptr long key_len, @Ptr long str, @Ptr long length);
	/**
	 * callback maintenance functions<br>
	 * Original signature : <code>void g_hook_list_init(GHookList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:72</i>
	 */
	public static void g_hook_list_init(Pointer<GtkLibrary.GHookList > hook_list, guint hook_size) {
		g_hook_list_init(Pointer.getPeer(hook_list), Pointer.getPeer(hook_size));
	}
	protected native static void g_hook_list_init(@Ptr long hook_list, @Ptr long hook_size);
	/**
	 * Original signature : <code>void g_hook_list_clear(GHookList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:75</i>
	 */
	public static void g_hook_list_clear(Pointer<GtkLibrary.GHookList > hook_list) {
		g_hook_list_clear(Pointer.getPeer(hook_list));
	}
	protected native static void g_hook_list_clear(@Ptr long hook_list);
	/**
	 * Original signature : <code>GHook* g_hook_alloc(GHookList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:77</i>
	 */
	public static Pointer<GtkLibrary.GHook > g_hook_alloc(Pointer<GtkLibrary.GHookList > hook_list) {
		return Pointer.pointerToAddress(g_hook_alloc(Pointer.getPeer(hook_list)), GtkLibrary.GHook.class);
	}
	@Ptr 
	protected native static long g_hook_alloc(@Ptr long hook_list);
	/**
	 * Original signature : <code>void g_hook_free(GHookList*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:79</i>
	 */
	public static void g_hook_free(Pointer<GtkLibrary.GHookList > hook_list, Pointer<GtkLibrary.GHook > hook) {
		g_hook_free(Pointer.getPeer(hook_list), Pointer.getPeer(hook));
	}
	protected native static void g_hook_free(@Ptr long hook_list, @Ptr long hook);
	/**
	 * Original signature : <code>GHook* g_hook_ref(GHookList*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:82</i>
	 */
	public static Pointer<GtkLibrary.GHook > g_hook_ref(Pointer<GtkLibrary.GHookList > hook_list, Pointer<GtkLibrary.GHook > hook) {
		return Pointer.pointerToAddress(g_hook_ref(Pointer.getPeer(hook_list), Pointer.getPeer(hook)), GtkLibrary.GHook.class);
	}
	@Ptr 
	protected native static long g_hook_ref(@Ptr long hook_list, @Ptr long hook);
	/**
	 * Original signature : <code>void g_hook_unref(GHookList*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:85</i>
	 */
	public static void g_hook_unref(Pointer<GtkLibrary.GHookList > hook_list, Pointer<GtkLibrary.GHook > hook) {
		g_hook_unref(Pointer.getPeer(hook_list), Pointer.getPeer(hook));
	}
	protected native static void g_hook_unref(@Ptr long hook_list, @Ptr long hook);
	/**
	 * Original signature : <code>gboolean g_hook_destroy(GHookList*, gulong)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:88</i>
	 */
	public static GtkLibrary.gboolean g_hook_destroy(Pointer<GtkLibrary.GHookList > hook_list, GtkLibrary.gulong hook_id) {
		return Pointer.pointerToAddress(g_hook_destroy(Pointer.getPeer(hook_list), Pointer.getPeer(hook_id)), .class);
	}
	@Ptr 
	protected native static long g_hook_destroy(@Ptr long hook_list, @Ptr long hook_id);
	/**
	 * Original signature : <code>void g_hook_destroy_link(GHookList*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:91</i>
	 */
	public static void g_hook_destroy_link(Pointer<GtkLibrary.GHookList > hook_list, Pointer<GtkLibrary.GHook > hook) {
		g_hook_destroy_link(Pointer.getPeer(hook_list), Pointer.getPeer(hook));
	}
	protected native static void g_hook_destroy_link(@Ptr long hook_list, @Ptr long hook);
	/**
	 * Original signature : <code>void g_hook_prepend(GHookList*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:94</i>
	 */
	public static void g_hook_prepend(Pointer<GtkLibrary.GHookList > hook_list, Pointer<GtkLibrary.GHook > hook) {
		g_hook_prepend(Pointer.getPeer(hook_list), Pointer.getPeer(hook));
	}
	protected native static void g_hook_prepend(@Ptr long hook_list, @Ptr long hook);
	/**
	 * Original signature : <code>void g_hook_insert_before(GHookList*, GHook*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:97</i>
	 */
	public static void g_hook_insert_before(Pointer<GtkLibrary.GHookList > hook_list, Pointer<GtkLibrary.GHook > sibling, Pointer<GtkLibrary.GHook > hook) {
		g_hook_insert_before(Pointer.getPeer(hook_list), Pointer.getPeer(sibling), Pointer.getPeer(hook));
	}
	protected native static void g_hook_insert_before(@Ptr long hook_list, @Ptr long sibling, @Ptr long hook);
	/**
	 * Original signature : <code>void g_hook_insert_sorted(GHookList*, GHook*, GHookCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:101</i>
	 */
	public static void g_hook_insert_sorted(Pointer<GtkLibrary.GHookList > hook_list, Pointer<GtkLibrary.GHook > hook, GtkLibrary.GHookCompareFunc func) {
		g_hook_insert_sorted(Pointer.getPeer(hook_list), Pointer.getPeer(hook), Pointer.getPeer(func));
	}
	protected native static void g_hook_insert_sorted(@Ptr long hook_list, @Ptr long hook, @Ptr long func);
	/**
	 * Original signature : <code>GHook* g_hook_get(GHookList*, gulong)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:105</i>
	 */
	public static Pointer<GtkLibrary.GHook > g_hook_get(Pointer<GtkLibrary.GHookList > hook_list, GtkLibrary.gulong hook_id) {
		return Pointer.pointerToAddress(g_hook_get(Pointer.getPeer(hook_list), Pointer.getPeer(hook_id)), GtkLibrary.GHook.class);
	}
	@Ptr 
	protected native static long g_hook_get(@Ptr long hook_list, @Ptr long hook_id);
	/**
	 * Original signature : <code>GHook* g_hook_find(GHookList*, gboolean, GHookFindFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:108</i>
	 */
	public static Pointer<GtkLibrary.GHook > g_hook_find(Pointer<GtkLibrary.GHookList > hook_list, GtkLibrary.gboolean need_valids, GtkLibrary.GHookFindFunc func, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_hook_find(Pointer.getPeer(hook_list), Pointer.getPeer(need_valids), Pointer.getPeer(func), Pointer.getPeer(data)), GtkLibrary.GHook.class);
	}
	@Ptr 
	protected native static long g_hook_find(@Ptr long hook_list, @Ptr long need_valids, @Ptr long func, @Ptr long data);
	/**
	 * Original signature : <code>GHook* g_hook_find_data(GHookList*, gboolean, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:113</i>
	 */
	public static Pointer<GtkLibrary.GHook > g_hook_find_data(Pointer<GtkLibrary.GHookList > hook_list, GtkLibrary.gboolean need_valids, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_hook_find_data(Pointer.getPeer(hook_list), Pointer.getPeer(need_valids), Pointer.getPeer(data)), GtkLibrary.GHook.class);
	}
	@Ptr 
	protected native static long g_hook_find_data(@Ptr long hook_list, @Ptr long need_valids, @Ptr long data);
	/**
	 * Original signature : <code>GHook* g_hook_find_func(GHookList*, gboolean, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:117</i>
	 */
	public static Pointer<GtkLibrary.GHook > g_hook_find_func(Pointer<GtkLibrary.GHookList > hook_list, GtkLibrary.gboolean need_valids, GtkLibrary.gpointer func) {
		return Pointer.pointerToAddress(g_hook_find_func(Pointer.getPeer(hook_list), Pointer.getPeer(need_valids), Pointer.getPeer(func)), GtkLibrary.GHook.class);
	}
	@Ptr 
	protected native static long g_hook_find_func(@Ptr long hook_list, @Ptr long need_valids, @Ptr long func);
	/**
	 * Original signature : <code>GHook* g_hook_find_func_data(GHookList*, gboolean, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:121</i>
	 */
	public static Pointer<GtkLibrary.GHook > g_hook_find_func_data(Pointer<GtkLibrary.GHookList > hook_list, GtkLibrary.gboolean need_valids, GtkLibrary.gpointer func, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_hook_find_func_data(Pointer.getPeer(hook_list), Pointer.getPeer(need_valids), Pointer.getPeer(func), Pointer.getPeer(data)), GtkLibrary.GHook.class);
	}
	@Ptr 
	protected native static long g_hook_find_func_data(@Ptr long hook_list, @Ptr long need_valids, @Ptr long func, @Ptr long data);
	/**
	 * return the first valid hook, and increment its reference count<br>
	 * Original signature : <code>GHook* g_hook_first_valid(GHookList*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:127</i>
	 */
	public static Pointer<GtkLibrary.GHook > g_hook_first_valid(Pointer<GtkLibrary.GHookList > hook_list, GtkLibrary.gboolean may_be_in_call) {
		return Pointer.pointerToAddress(g_hook_first_valid(Pointer.getPeer(hook_list), Pointer.getPeer(may_be_in_call)), GtkLibrary.GHook.class);
	}
	@Ptr 
	protected native static long g_hook_first_valid(@Ptr long hook_list, @Ptr long may_be_in_call);
	/**
	 * return the next valid hook with incremented reference count, and<br>
	 * decrement the reference count of the original hook<br>
	 * Original signature : <code>GHook* g_hook_next_valid(GHookList*, GHook*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:133</i>
	 */
	public static Pointer<GtkLibrary.GHook > g_hook_next_valid(Pointer<GtkLibrary.GHookList > hook_list, Pointer<GtkLibrary.GHook > hook, GtkLibrary.gboolean may_be_in_call) {
		return Pointer.pointerToAddress(g_hook_next_valid(Pointer.getPeer(hook_list), Pointer.getPeer(hook), Pointer.getPeer(may_be_in_call)), GtkLibrary.GHook.class);
	}
	@Ptr 
	protected native static long g_hook_next_valid(@Ptr long hook_list, @Ptr long hook, @Ptr long may_be_in_call);
	/**
	 * GHookCompareFunc implementation to insert hooks sorted by their id<br>
	 * Original signature : <code>gint g_hook_compare_ids(GHook*, GHook*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:138</i>
	 */
	public static GtkLibrary.gint g_hook_compare_ids(Pointer<GtkLibrary.GHook > new_hook, Pointer<GtkLibrary.GHook > sibling) {
		return Pointer.pointerToAddress(g_hook_compare_ids(Pointer.getPeer(new_hook), Pointer.getPeer(sibling)), .class);
	}
	@Ptr 
	protected native static long g_hook_compare_ids(@Ptr long new_hook, @Ptr long sibling);
	/**
	 * invoke all valid hooks with the (*GHookFunc) signature.<br>
	 * Original signature : <code>void g_hook_list_invoke(GHookList*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:146</i>
	 */
	public static void g_hook_list_invoke(Pointer<GtkLibrary.GHookList > hook_list, GtkLibrary.gboolean may_recurse) {
		g_hook_list_invoke(Pointer.getPeer(hook_list), Pointer.getPeer(may_recurse));
	}
	protected native static void g_hook_list_invoke(@Ptr long hook_list, @Ptr long may_recurse);
	/**
	 * invoke all valid hooks with the (*GHookCheckFunc) signature,<br>
	 * and destroy the hook if FALSE is returned.<br>
	 * Original signature : <code>void g_hook_list_invoke_check(GHookList*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:152</i>
	 */
	public static void g_hook_list_invoke_check(Pointer<GtkLibrary.GHookList > hook_list, GtkLibrary.gboolean may_recurse) {
		g_hook_list_invoke_check(Pointer.getPeer(hook_list), Pointer.getPeer(may_recurse));
	}
	protected native static void g_hook_list_invoke_check(@Ptr long hook_list, @Ptr long may_recurse);
	/**
	 * invoke a marshaller on all valid hooks.<br>
	 * Original signature : <code>void g_hook_list_marshal(GHookList*, gboolean, GHookMarshaller, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:157</i>
	 */
	public static void g_hook_list_marshal(Pointer<GtkLibrary.GHookList > hook_list, GtkLibrary.gboolean may_recurse, GtkLibrary.GHookMarshaller marshaller, GtkLibrary.gpointer marshal_data) {
		g_hook_list_marshal(Pointer.getPeer(hook_list), Pointer.getPeer(may_recurse), Pointer.getPeer(marshaller), Pointer.getPeer(marshal_data));
	}
	protected native static void g_hook_list_marshal(@Ptr long hook_list, @Ptr long may_recurse, @Ptr long marshaller, @Ptr long marshal_data);
	/**
	 * Original signature : <code>void g_hook_list_marshal_check(GHookList*, gboolean, GHookCheckMarshaller, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghook.h:162</i>
	 */
	public static void g_hook_list_marshal_check(Pointer<GtkLibrary.GHookList > hook_list, GtkLibrary.gboolean may_recurse, GtkLibrary.GHookCheckMarshaller marshaller, GtkLibrary.gpointer marshal_data) {
		g_hook_list_marshal_check(Pointer.getPeer(hook_list), Pointer.getPeer(may_recurse), Pointer.getPeer(marshaller), Pointer.getPeer(marshal_data));
	}
	protected native static void g_hook_list_marshal_check(@Ptr long hook_list, @Ptr long may_recurse, @Ptr long marshaller, @Ptr long marshal_data);
	/**
	 * Original signature : <code>gboolean g_hostname_is_non_ascii(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghostutils.h:4</i>
	 */
	public static GtkLibrary.gboolean g_hostname_is_non_ascii(Pointer<GtkLibrary.gchar > hostname) {
		return Pointer.pointerToAddress(g_hostname_is_non_ascii(Pointer.getPeer(hostname)), .class);
	}
	@Ptr 
	protected native static long g_hostname_is_non_ascii(@Ptr long hostname);
	/**
	 * Original signature : <code>gboolean g_hostname_is_ascii_encoded(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghostutils.h:6</i>
	 */
	public static GtkLibrary.gboolean g_hostname_is_ascii_encoded(Pointer<GtkLibrary.gchar > hostname) {
		return Pointer.pointerToAddress(g_hostname_is_ascii_encoded(Pointer.getPeer(hostname)), .class);
	}
	@Ptr 
	protected native static long g_hostname_is_ascii_encoded(@Ptr long hostname);
	/**
	 * Original signature : <code>gboolean g_hostname_is_ip_address(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghostutils.h:8</i>
	 */
	public static GtkLibrary.gboolean g_hostname_is_ip_address(Pointer<GtkLibrary.gchar > hostname) {
		return Pointer.pointerToAddress(g_hostname_is_ip_address(Pointer.getPeer(hostname)), .class);
	}
	@Ptr 
	protected native static long g_hostname_is_ip_address(@Ptr long hostname);
	/**
	 * Original signature : <code>gchar* g_hostname_to_ascii(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghostutils.h:11</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_hostname_to_ascii(Pointer<GtkLibrary.gchar > hostname) {
		return Pointer.pointerToAddress(g_hostname_to_ascii(Pointer.getPeer(hostname)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_hostname_to_ascii(@Ptr long hostname);
	/**
	 * Original signature : <code>gchar* g_hostname_to_unicode(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/ghostutils.h:13</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_hostname_to_unicode(Pointer<GtkLibrary.gchar > hostname) {
		return Pointer.pointerToAddress(g_hostname_to_unicode(Pointer.getPeer(hostname)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_hostname_to_unicode(@Ptr long hostname);
	/**
	 * Original signature : <code>gint g_poll(GPollFD*, guint, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpoll.h:87</i>
	 */
	public static GtkLibrary.gint g_poll(Pointer<GtkLibrary.GPollFD > fds, guint nfds, GtkLibrary.gint timeout) {
		return Pointer.pointerToAddress(g_poll(Pointer.getPeer(fds), Pointer.getPeer(nfds), Pointer.getPeer(timeout)), .class);
	}
	@Ptr 
	protected native static long g_poll(@Ptr long fds, @Ptr long nfds, @Ptr long timeout);
	/**
	 * Singly linked lists<br>
	 * Original signature : <code>GSList* g_slist_alloc()</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:14</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_alloc() {
		return Pointer.pointerToAddress(g_slist_alloc$2(), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_alloc$2();
	/**
	 * Original signature : <code>void g_slist_free(GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:16</i>
	 */
	public static void g_slist_free(Pointer<GtkLibrary.GSList > list) {
		g_slist_free(Pointer.getPeer(list));
	}
	protected native static void g_slist_free(@Ptr long list);
	/**
	 * Original signature : <code>void g_slist_free_1(GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:18</i>
	 */
	public static void g_slist_free_1(Pointer<GtkLibrary.GSList > list) {
		g_slist_free_1(Pointer.getPeer(list));
	}
	protected native static void g_slist_free_1(@Ptr long list);
	/**
	 * Original signature : <code>void g_slist_free_full(GSList*, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:21</i>
	 */
	public static void g_slist_free_full(Pointer<GtkLibrary.GSList > list, GtkLibrary.GDestroyNotify free_func) {
		g_slist_free_full(Pointer.getPeer(list), Pointer.getPeer(free_func));
	}
	protected native static void g_slist_free_full(@Ptr long list, @Ptr long free_func);
	/**
	 * Original signature : <code>GSList* g_slist_append(GSList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:24</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_append(Pointer<GtkLibrary.GSList > list, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_slist_append(Pointer.getPeer(list), Pointer.getPeer(data)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_append(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GSList* g_slist_prepend(GSList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:27</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_prepend(Pointer<GtkLibrary.GSList > list, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_slist_prepend(Pointer.getPeer(list), Pointer.getPeer(data)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_prepend(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GSList* g_slist_insert(GSList*, gpointer, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:30</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_insert(Pointer<GtkLibrary.GSList > list, GtkLibrary.gpointer data, GtkLibrary.gint position) {
		return Pointer.pointerToAddress(g_slist_insert(Pointer.getPeer(list), Pointer.getPeer(data), Pointer.getPeer(position)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_insert(@Ptr long list, @Ptr long data, @Ptr long position);
	/**
	 * Original signature : <code>GSList* g_slist_insert_sorted(GSList*, gpointer, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:34</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_insert_sorted(Pointer<GtkLibrary.GSList > list, GtkLibrary.gpointer data, GtkLibrary.GCompareFunc func) {
		return Pointer.pointerToAddress(g_slist_insert_sorted(Pointer.getPeer(list), Pointer.getPeer(data), Pointer.getPeer(func)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_insert_sorted(@Ptr long list, @Ptr long data, @Ptr long func);
	/**
	 * Original signature : <code>GSList* g_slist_insert_sorted_with_data(GSList*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:38</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_insert_sorted_with_data(Pointer<GtkLibrary.GSList > list, GtkLibrary.gpointer data, GtkLibrary.GCompareDataFunc func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_slist_insert_sorted_with_data(Pointer.getPeer(list), Pointer.getPeer(data), Pointer.getPeer(func), Pointer.getPeer(user_data)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_insert_sorted_with_data(@Ptr long list, @Ptr long data, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>GSList* g_slist_insert_before(GSList*, GSList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:43</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_insert_before(Pointer<GtkLibrary.GSList > slist, Pointer<GtkLibrary.GSList > sibling, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_slist_insert_before(Pointer.getPeer(slist), Pointer.getPeer(sibling), Pointer.getPeer(data)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_insert_before(@Ptr long slist, @Ptr long sibling, @Ptr long data);
	/**
	 * Original signature : <code>GSList* g_slist_concat(GSList*, GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:47</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_concat(Pointer<GtkLibrary.GSList > list1, Pointer<GtkLibrary.GSList > list2) {
		return Pointer.pointerToAddress(g_slist_concat(Pointer.getPeer(list1), Pointer.getPeer(list2)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_concat(@Ptr long list1, @Ptr long list2);
	/**
	 * Original signature : <code>GSList* g_slist_remove(GSList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:50</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_remove(Pointer<GtkLibrary.GSList > list, GtkLibrary.gconstpointer data) {
		return Pointer.pointerToAddress(g_slist_remove(Pointer.getPeer(list), Pointer.getPeer(data)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_remove(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GSList* g_slist_remove_all(GSList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:53</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_remove_all(Pointer<GtkLibrary.GSList > list, GtkLibrary.gconstpointer data) {
		return Pointer.pointerToAddress(g_slist_remove_all(Pointer.getPeer(list), Pointer.getPeer(data)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_remove_all(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GSList* g_slist_remove_link(GSList*, GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:56</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_remove_link(Pointer<GtkLibrary.GSList > list, Pointer<GtkLibrary.GSList > link_) {
		return Pointer.pointerToAddress(g_slist_remove_link(Pointer.getPeer(list), Pointer.getPeer(link_)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_remove_link(@Ptr long list, @Ptr long link_);
	/**
	 * Original signature : <code>GSList* g_slist_delete_link(GSList*, GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:59</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_delete_link(Pointer<GtkLibrary.GSList > list, Pointer<GtkLibrary.GSList > link_) {
		return Pointer.pointerToAddress(g_slist_delete_link(Pointer.getPeer(list), Pointer.getPeer(link_)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_delete_link(@Ptr long list, @Ptr long link_);
	/**
	 * Original signature : <code>GSList* g_slist_reverse(GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:62</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_reverse(Pointer<GtkLibrary.GSList > list) {
		return Pointer.pointerToAddress(g_slist_reverse(Pointer.getPeer(list)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_reverse(@Ptr long list);
	/**
	 * Original signature : <code>GSList* g_slist_copy(GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:64</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_copy(Pointer<GtkLibrary.GSList > list) {
		return Pointer.pointerToAddress(g_slist_copy(Pointer.getPeer(list)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_copy(@Ptr long list);
	/**
	 * Original signature : <code>GSList* g_slist_copy_deep(GSList*, GCopyFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:67</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_copy_deep(Pointer<GtkLibrary.GSList > list, GtkLibrary.GCopyFunc func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_slist_copy_deep(Pointer.getPeer(list), Pointer.getPeer(func), Pointer.getPeer(user_data)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_copy_deep(@Ptr long list, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>GSList* g_slist_nth(GSList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:71</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_nth(Pointer<GtkLibrary.GSList > list, guint n) {
		return Pointer.pointerToAddress(g_slist_nth(Pointer.getPeer(list), Pointer.getPeer(n)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_nth(@Ptr long list, @Ptr long n);
	/**
	 * Original signature : <code>GSList* g_slist_find(GSList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:74</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_find(Pointer<GtkLibrary.GSList > list, GtkLibrary.gconstpointer data) {
		return Pointer.pointerToAddress(g_slist_find(Pointer.getPeer(list), Pointer.getPeer(data)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_find(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GSList* g_slist_find_custom(GSList*, gconstpointer, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:77</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_find_custom(Pointer<GtkLibrary.GSList > list, GtkLibrary.gconstpointer data, GtkLibrary.GCompareFunc func) {
		return Pointer.pointerToAddress(g_slist_find_custom(Pointer.getPeer(list), Pointer.getPeer(data), Pointer.getPeer(func)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_find_custom(@Ptr long list, @Ptr long data, @Ptr long func);
	/**
	 * Original signature : <code>gint g_slist_position(GSList*, GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:81</i>
	 */
	public static GtkLibrary.gint g_slist_position(Pointer<GtkLibrary.GSList > list, Pointer<GtkLibrary.GSList > llink) {
		return Pointer.pointerToAddress(g_slist_position(Pointer.getPeer(list), Pointer.getPeer(llink)), .class);
	}
	@Ptr 
	protected native static long g_slist_position(@Ptr long list, @Ptr long llink);
	/**
	 * Original signature : <code>gint g_slist_index(GSList*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:84</i>
	 */
	public static GtkLibrary.gint g_slist_index(Pointer<GtkLibrary.GSList > list, GtkLibrary.gconstpointer data) {
		return Pointer.pointerToAddress(g_slist_index(Pointer.getPeer(list), Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_slist_index(@Ptr long list, @Ptr long data);
	/**
	 * Original signature : <code>GSList* g_slist_last(GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:87</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_last(Pointer<GtkLibrary.GSList > list) {
		return Pointer.pointerToAddress(g_slist_last(Pointer.getPeer(list)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_last(@Ptr long list);
	/**
	 * Original signature : <code>guint g_slist_length(GSList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:89</i>
	 */
	public static guint g_slist_length(Pointer<GtkLibrary.GSList > list) {
		return Pointer.pointerToAddress(g_slist_length(Pointer.getPeer(list)), .class);
	}
	@Ptr 
	protected native static long g_slist_length(@Ptr long list);
	/**
	 * Original signature : <code>void g_slist_foreach(GSList*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:91</i>
	 */
	public static void g_slist_foreach(Pointer<GtkLibrary.GSList > list, GtkLibrary.GFunc func, GtkLibrary.gpointer user_data) {
		g_slist_foreach(Pointer.getPeer(list), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_slist_foreach(@Ptr long list, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>GSList* g_slist_sort(GSList*, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:95</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_sort(Pointer<GtkLibrary.GSList > list, GtkLibrary.GCompareFunc compare_func) {
		return Pointer.pointerToAddress(g_slist_sort(Pointer.getPeer(list), Pointer.getPeer(compare_func)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_sort(@Ptr long list, @Ptr long compare_func);
	/**
	 * Original signature : <code>GSList* g_slist_sort_with_data(GSList*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:98</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_slist_sort_with_data(Pointer<GtkLibrary.GSList > list, GtkLibrary.GCompareDataFunc compare_func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_slist_sort_with_data(Pointer.getPeer(list), Pointer.getPeer(compare_func), Pointer.getPeer(user_data)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_slist_sort_with_data(@Ptr long list, @Ptr long compare_func, @Ptr long user_data);
	/**
	 * Original signature : <code>gpointer g_slist_nth_data(GSList*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslist.h:102</i>
	 */
	public static GtkLibrary.gpointer g_slist_nth_data(Pointer<GtkLibrary.GSList > list, guint n) {
		return Pointer.pointerToAddress(g_slist_nth_data(Pointer.getPeer(list), Pointer.getPeer(n)), .class);
	}
	@Ptr 
	protected native static long g_slist_nth_data(@Ptr long list, @Ptr long n);
	/**
	 * Original signature : <code>GMainContext* g_main_context_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:276</i>
	 */
	public static Pointer<GtkLibrary.GMainContext > g_main_context_new() {
		return Pointer.pointerToAddress(g_main_context_new$2(), GtkLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_main_context_new$2();
	/**
	 * Original signature : <code>GMainContext* g_main_context_ref(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:278</i>
	 */
	public static Pointer<GtkLibrary.GMainContext > g_main_context_ref(Pointer<GtkLibrary.GMainContext > context) {
		return Pointer.pointerToAddress(g_main_context_ref(Pointer.getPeer(context)), GtkLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_main_context_ref(@Ptr long context);
	/**
	 * Original signature : <code>void g_main_context_unref(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:280</i>
	 */
	public static void g_main_context_unref(Pointer<GtkLibrary.GMainContext > context) {
		g_main_context_unref(Pointer.getPeer(context));
	}
	protected native static void g_main_context_unref(@Ptr long context);
	/**
	 * Original signature : <code>GMainContext* g_main_context_default()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:282</i>
	 */
	public static Pointer<GtkLibrary.GMainContext > g_main_context_default() {
		return Pointer.pointerToAddress(g_main_context_default$2(), GtkLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_main_context_default$2();
	/**
	 * Original signature : <code>gboolean g_main_context_iteration(GMainContext*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:285</i>
	 */
	public static GtkLibrary.gboolean g_main_context_iteration(Pointer<GtkLibrary.GMainContext > context, GtkLibrary.gboolean may_block) {
		return Pointer.pointerToAddress(g_main_context_iteration(Pointer.getPeer(context), Pointer.getPeer(may_block)), .class);
	}
	@Ptr 
	protected native static long g_main_context_iteration(@Ptr long context, @Ptr long may_block);
	/**
	 * Original signature : <code>gboolean g_main_context_pending(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:288</i>
	 */
	public static GtkLibrary.gboolean g_main_context_pending(Pointer<GtkLibrary.GMainContext > context) {
		return Pointer.pointerToAddress(g_main_context_pending(Pointer.getPeer(context)), .class);
	}
	@Ptr 
	protected native static long g_main_context_pending(@Ptr long context);
	/**
	 * For implementation of legacy interfaces<br>
	 * Original signature : <code>GSource* g_main_context_find_source_by_id(GMainContext*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:293</i>
	 */
	public static Pointer<GtkLibrary.GSource > g_main_context_find_source_by_id(Pointer<GtkLibrary.GMainContext > context, guint source_id) {
		return Pointer.pointerToAddress(g_main_context_find_source_by_id(Pointer.getPeer(context), Pointer.getPeer(source_id)), GtkLibrary.GSource.class);
	}
	@Ptr 
	protected native static long g_main_context_find_source_by_id(@Ptr long context, @Ptr long source_id);
	/**
	 * Original signature : <code>GSource* g_main_context_find_source_by_user_data(GMainContext*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:296</i>
	 */
	public static Pointer<GtkLibrary.GSource > g_main_context_find_source_by_user_data(Pointer<GtkLibrary.GMainContext > context, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_main_context_find_source_by_user_data(Pointer.getPeer(context), Pointer.getPeer(user_data)), GtkLibrary.GSource.class);
	}
	@Ptr 
	protected native static long g_main_context_find_source_by_user_data(@Ptr long context, @Ptr long user_data);
	/**
	 * Original signature : <code>GSource* g_main_context_find_source_by_funcs_user_data(GMainContext*, GSourceFuncs*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:299</i>
	 */
	public static Pointer<GtkLibrary.GSource > g_main_context_find_source_by_funcs_user_data(Pointer<GtkLibrary.GMainContext > context, Pointer<GtkLibrary.GSourceFuncs > funcs, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_main_context_find_source_by_funcs_user_data(Pointer.getPeer(context), Pointer.getPeer(funcs), Pointer.getPeer(user_data)), GtkLibrary.GSource.class);
	}
	@Ptr 
	protected native static long g_main_context_find_source_by_funcs_user_data(@Ptr long context, @Ptr long funcs, @Ptr long user_data);
	/**
	 * Low level functions for implementing custom main loops.<br>
	 * Original signature : <code>void g_main_context_wakeup(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:306</i>
	 */
	public static void g_main_context_wakeup(Pointer<GtkLibrary.GMainContext > context) {
		g_main_context_wakeup(Pointer.getPeer(context));
	}
	protected native static void g_main_context_wakeup(@Ptr long context);
	/**
	 * Original signature : <code>gboolean g_main_context_acquire(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:308</i>
	 */
	public static GtkLibrary.gboolean g_main_context_acquire(Pointer<GtkLibrary.GMainContext > context) {
		return Pointer.pointerToAddress(g_main_context_acquire(Pointer.getPeer(context)), .class);
	}
	@Ptr 
	protected native static long g_main_context_acquire(@Ptr long context);
	/**
	 * Original signature : <code>void g_main_context_release(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:310</i>
	 */
	public static void g_main_context_release(Pointer<GtkLibrary.GMainContext > context) {
		g_main_context_release(Pointer.getPeer(context));
	}
	protected native static void g_main_context_release(@Ptr long context);
	/**
	 * Original signature : <code>gboolean g_main_context_is_owner(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:312</i>
	 */
	public static GtkLibrary.gboolean g_main_context_is_owner(Pointer<GtkLibrary.GMainContext > context) {
		return Pointer.pointerToAddress(g_main_context_is_owner(Pointer.getPeer(context)), .class);
	}
	@Ptr 
	protected native static long g_main_context_is_owner(@Ptr long context);
	/**
	 * Original signature : <code>gboolean g_main_context_wait(GMainContext*, GCond*, GMutex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:314</i>
	 */
	public static GtkLibrary.gboolean g_main_context_wait(Pointer<GtkLibrary.GMainContext > context, Pointer<GtkLibrary.GCond > cond, Pointer<GtkLibrary.GMutex > mutex) {
		return Pointer.pointerToAddress(g_main_context_wait(Pointer.getPeer(context), Pointer.getPeer(cond), Pointer.getPeer(mutex)), .class);
	}
	@Ptr 
	protected native static long g_main_context_wait(@Ptr long context, @Ptr long cond, @Ptr long mutex);
	/**
	 * Original signature : <code>gboolean g_main_context_prepare(GMainContext*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:319</i>
	 */
	public static GtkLibrary.gboolean g_main_context_prepare(Pointer<GtkLibrary.GMainContext > context, Pointer<GtkLibrary.gint > priority) {
		return Pointer.pointerToAddress(g_main_context_prepare(Pointer.getPeer(context), Pointer.getPeer(priority)), .class);
	}
	@Ptr 
	protected native static long g_main_context_prepare(@Ptr long context, @Ptr long priority);
	/**
	 * Original signature : <code>gint g_main_context_query(GMainContext*, gint, gint*, GPollFD*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:322</i>
	 */
	public static GtkLibrary.gint g_main_context_query(Pointer<GtkLibrary.GMainContext > context, GtkLibrary.gint max_priority, Pointer<GtkLibrary.gint > timeout_, Pointer<GtkLibrary.GPollFD > fds, GtkLibrary.gint n_fds) {
		return Pointer.pointerToAddress(g_main_context_query(Pointer.getPeer(context), Pointer.getPeer(max_priority), Pointer.getPeer(timeout_), Pointer.getPeer(fds), Pointer.getPeer(n_fds)), .class);
	}
	@Ptr 
	protected native static long g_main_context_query(@Ptr long context, @Ptr long max_priority, @Ptr long timeout_, @Ptr long fds, @Ptr long n_fds);
	/**
	 * Original signature : <code>gint g_main_context_check(GMainContext*, gint, GPollFD*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:328</i>
	 */
	public static GtkLibrary.gint g_main_context_check(Pointer<GtkLibrary.GMainContext > context, GtkLibrary.gint max_priority, Pointer<GtkLibrary.GPollFD > fds, GtkLibrary.gint n_fds) {
		return Pointer.pointerToAddress(g_main_context_check(Pointer.getPeer(context), Pointer.getPeer(max_priority), Pointer.getPeer(fds), Pointer.getPeer(n_fds)), .class);
	}
	@Ptr 
	protected native static long g_main_context_check(@Ptr long context, @Ptr long max_priority, @Ptr long fds, @Ptr long n_fds);
	/**
	 * Original signature : <code>void g_main_context_dispatch(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:333</i>
	 */
	public static void g_main_context_dispatch(Pointer<GtkLibrary.GMainContext > context) {
		g_main_context_dispatch(Pointer.getPeer(context));
	}
	protected native static void g_main_context_dispatch(@Ptr long context);
	/**
	 * Original signature : <code>void g_main_context_set_poll_func(GMainContext*, GPollFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:336</i>
	 */
	public static void g_main_context_set_poll_func(Pointer<GtkLibrary.GMainContext > context, GtkLibrary.GPollFunc func) {
		g_main_context_set_poll_func(Pointer.getPeer(context), Pointer.getPeer(func));
	}
	protected native static void g_main_context_set_poll_func(@Ptr long context, @Ptr long func);
	/**
	 * Original signature : <code>GPollFunc g_main_context_get_poll_func(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:339</i>
	 */
	public static GtkLibrary.GPollFunc g_main_context_get_poll_func(Pointer<GtkLibrary.GMainContext > context) {
		return Pointer.pointerToAddress(g_main_context_get_poll_func(Pointer.getPeer(context)), .class);
	}
	@Ptr 
	protected native static long g_main_context_get_poll_func(@Ptr long context);
	/**
	 * Low level functions for use by source implementations<br>
	 * Original signature : <code>void g_main_context_add_poll(GMainContext*, GPollFD*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:344</i>
	 */
	public static void g_main_context_add_poll(Pointer<GtkLibrary.GMainContext > context, Pointer<GtkLibrary.GPollFD > fd, GtkLibrary.gint priority) {
		g_main_context_add_poll(Pointer.getPeer(context), Pointer.getPeer(fd), Pointer.getPeer(priority));
	}
	protected native static void g_main_context_add_poll(@Ptr long context, @Ptr long fd, @Ptr long priority);
	/**
	 * Original signature : <code>void g_main_context_remove_poll(GMainContext*, GPollFD*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:348</i>
	 */
	public static void g_main_context_remove_poll(Pointer<GtkLibrary.GMainContext > context, Pointer<GtkLibrary.GPollFD > fd) {
		g_main_context_remove_poll(Pointer.getPeer(context), Pointer.getPeer(fd));
	}
	protected native static void g_main_context_remove_poll(@Ptr long context, @Ptr long fd);
	/**
	 * Original signature : <code>gint g_main_depth()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:352</i>
	 */
	public static GtkLibrary.gint g_main_depth() {
		return Pointer.pointerToAddress(g_main_depth$2(), .class);
	}
	@Ptr 
	protected native static long g_main_depth$2();
	/**
	 * Original signature : <code>GSource* g_main_current_source()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:354</i>
	 */
	public static Pointer<GtkLibrary.GSource > g_main_current_source() {
		return Pointer.pointerToAddress(g_main_current_source$2(), GtkLibrary.GSource.class);
	}
	@Ptr 
	protected native static long g_main_current_source$2();
	/**
	 * GMainContexts for other threads<br>
	 * Original signature : <code>void g_main_context_push_thread_default(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:359</i>
	 */
	public static void g_main_context_push_thread_default(Pointer<GtkLibrary.GMainContext > context) {
		g_main_context_push_thread_default(Pointer.getPeer(context));
	}
	protected native static void g_main_context_push_thread_default(@Ptr long context);
	/**
	 * Original signature : <code>void g_main_context_pop_thread_default(GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:361</i>
	 */
	public static void g_main_context_pop_thread_default(Pointer<GtkLibrary.GMainContext > context) {
		g_main_context_pop_thread_default(Pointer.getPeer(context));
	}
	protected native static void g_main_context_pop_thread_default(@Ptr long context);
	/**
	 * Original signature : <code>GMainContext* g_main_context_get_thread_default()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:363</i>
	 */
	public static Pointer<GtkLibrary.GMainContext > g_main_context_get_thread_default() {
		return Pointer.pointerToAddress(g_main_context_get_thread_default$2(), GtkLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_main_context_get_thread_default$2();
	/**
	 * Original signature : <code>GMainContext* g_main_context_ref_thread_default()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:365</i>
	 */
	public static Pointer<GtkLibrary.GMainContext > g_main_context_ref_thread_default() {
		return Pointer.pointerToAddress(g_main_context_ref_thread_default$2(), GtkLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_main_context_ref_thread_default$2();
	/**
	 * Original signature : <code>GMainLoop* g_main_loop_new(GMainContext*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:370</i>
	 */
	public static Pointer<GtkLibrary.GMainLoop > g_main_loop_new(Pointer<GtkLibrary.GMainContext > context, GtkLibrary.gboolean is_running) {
		return Pointer.pointerToAddress(g_main_loop_new(Pointer.getPeer(context), Pointer.getPeer(is_running)), GtkLibrary.GMainLoop.class);
	}
	@Ptr 
	protected native static long g_main_loop_new(@Ptr long context, @Ptr long is_running);
	/**
	 * Original signature : <code>void g_main_loop_run(GMainLoop*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:373</i>
	 */
	public static void g_main_loop_run(Pointer<GtkLibrary.GMainLoop > loop) {
		g_main_loop_run(Pointer.getPeer(loop));
	}
	protected native static void g_main_loop_run(@Ptr long loop);
	/**
	 * Original signature : <code>void g_main_loop_quit(GMainLoop*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:375</i>
	 */
	public static void g_main_loop_quit(Pointer<GtkLibrary.GMainLoop > loop) {
		g_main_loop_quit(Pointer.getPeer(loop));
	}
	protected native static void g_main_loop_quit(@Ptr long loop);
	/**
	 * Original signature : <code>GMainLoop* g_main_loop_ref(GMainLoop*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:377</i>
	 */
	public static Pointer<GtkLibrary.GMainLoop > g_main_loop_ref(Pointer<GtkLibrary.GMainLoop > loop) {
		return Pointer.pointerToAddress(g_main_loop_ref(Pointer.getPeer(loop)), GtkLibrary.GMainLoop.class);
	}
	@Ptr 
	protected native static long g_main_loop_ref(@Ptr long loop);
	/**
	 * Original signature : <code>void g_main_loop_unref(GMainLoop*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:379</i>
	 */
	public static void g_main_loop_unref(Pointer<GtkLibrary.GMainLoop > loop) {
		g_main_loop_unref(Pointer.getPeer(loop));
	}
	protected native static void g_main_loop_unref(@Ptr long loop);
	/**
	 * Original signature : <code>gboolean g_main_loop_is_running(GMainLoop*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:381</i>
	 */
	public static GtkLibrary.gboolean g_main_loop_is_running(Pointer<GtkLibrary.GMainLoop > loop) {
		return Pointer.pointerToAddress(g_main_loop_is_running(Pointer.getPeer(loop)), .class);
	}
	@Ptr 
	protected native static long g_main_loop_is_running(@Ptr long loop);
	/**
	 * Original signature : <code>GMainContext* g_main_loop_get_context(GMainLoop*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:383</i>
	 */
	public static Pointer<GtkLibrary.GMainContext > g_main_loop_get_context(Pointer<GtkLibrary.GMainLoop > loop) {
		return Pointer.pointerToAddress(g_main_loop_get_context(Pointer.getPeer(loop)), GtkLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_main_loop_get_context(@Ptr long loop);
	/**
	 * Original signature : <code>GSource* g_source_new(GSourceFuncs*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:388</i>
	 */
	public static Pointer<GtkLibrary.GSource > g_source_new(Pointer<GtkLibrary.GSourceFuncs > source_funcs, guint struct_size) {
		return Pointer.pointerToAddress(g_source_new(Pointer.getPeer(source_funcs), Pointer.getPeer(struct_size)), GtkLibrary.GSource.class);
	}
	@Ptr 
	protected native static long g_source_new(@Ptr long source_funcs, @Ptr long struct_size);
	/**
	 * Original signature : <code>GSource* g_source_ref(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:391</i>
	 */
	public static Pointer<GtkLibrary.GSource > g_source_ref(Pointer<GtkLibrary.GSource > source) {
		return Pointer.pointerToAddress(g_source_ref(Pointer.getPeer(source)), GtkLibrary.GSource.class);
	}
	@Ptr 
	protected native static long g_source_ref(@Ptr long source);
	/**
	 * Original signature : <code>void g_source_unref(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:393</i>
	 */
	public static void g_source_unref(Pointer<GtkLibrary.GSource > source) {
		g_source_unref(Pointer.getPeer(source));
	}
	protected native static void g_source_unref(@Ptr long source);
	/**
	 * Original signature : <code>guint g_source_attach(GSource*, GMainContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:396</i>
	 */
	public static guint g_source_attach(Pointer<GtkLibrary.GSource > source, Pointer<GtkLibrary.GMainContext > context) {
		return Pointer.pointerToAddress(g_source_attach(Pointer.getPeer(source), Pointer.getPeer(context)), .class);
	}
	@Ptr 
	protected native static long g_source_attach(@Ptr long source, @Ptr long context);
	/**
	 * Original signature : <code>void g_source_destroy(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:399</i>
	 */
	public static void g_source_destroy(Pointer<GtkLibrary.GSource > source) {
		g_source_destroy(Pointer.getPeer(source));
	}
	protected native static void g_source_destroy(@Ptr long source);
	/**
	 * Original signature : <code>void g_source_set_priority(GSource*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:402</i>
	 */
	public static void g_source_set_priority(Pointer<GtkLibrary.GSource > source, GtkLibrary.gint priority) {
		g_source_set_priority(Pointer.getPeer(source), Pointer.getPeer(priority));
	}
	protected native static void g_source_set_priority(@Ptr long source, @Ptr long priority);
	/**
	 * Original signature : <code>gint g_source_get_priority(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:405</i>
	 */
	public static GtkLibrary.gint g_source_get_priority(Pointer<GtkLibrary.GSource > source) {
		return Pointer.pointerToAddress(g_source_get_priority(Pointer.getPeer(source)), .class);
	}
	@Ptr 
	protected native static long g_source_get_priority(@Ptr long source);
	/**
	 * Original signature : <code>void g_source_set_can_recurse(GSource*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:407</i>
	 */
	public static void g_source_set_can_recurse(Pointer<GtkLibrary.GSource > source, GtkLibrary.gboolean can_recurse) {
		g_source_set_can_recurse(Pointer.getPeer(source), Pointer.getPeer(can_recurse));
	}
	protected native static void g_source_set_can_recurse(@Ptr long source, @Ptr long can_recurse);
	/**
	 * Original signature : <code>gboolean g_source_get_can_recurse(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:410</i>
	 */
	public static GtkLibrary.gboolean g_source_get_can_recurse(Pointer<GtkLibrary.GSource > source) {
		return Pointer.pointerToAddress(g_source_get_can_recurse(Pointer.getPeer(source)), .class);
	}
	@Ptr 
	protected native static long g_source_get_can_recurse(@Ptr long source);
	/**
	 * Original signature : <code>guint g_source_get_id(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:412</i>
	 */
	public static guint g_source_get_id(Pointer<GtkLibrary.GSource > source) {
		return Pointer.pointerToAddress(g_source_get_id(Pointer.getPeer(source)), .class);
	}
	@Ptr 
	protected native static long g_source_get_id(@Ptr long source);
	/**
	 * Original signature : <code>GMainContext* g_source_get_context(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:415</i>
	 */
	public static Pointer<GtkLibrary.GMainContext > g_source_get_context(Pointer<GtkLibrary.GSource > source) {
		return Pointer.pointerToAddress(g_source_get_context(Pointer.getPeer(source)), GtkLibrary.GMainContext.class);
	}
	@Ptr 
	protected native static long g_source_get_context(@Ptr long source);
	/**
	 * Original signature : <code>void g_source_set_callback(GSource*, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:418</i>
	 */
	public static void g_source_set_callback(Pointer<GtkLibrary.GSource > source, GSourceFunc func, GtkLibrary.gpointer data, GtkLibrary.GDestroyNotify notify$) {
		g_source_set_callback(Pointer.getPeer(source), Pointer.getPeer(func), Pointer.getPeer(data), Pointer.getPeer(notify$));
	}
	protected native static void g_source_set_callback(@Ptr long source, @Ptr long func, @Ptr long data, @Ptr long notify$);
	/**
	 * Original signature : <code>void g_source_set_funcs(GSource*, GSourceFuncs*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:424</i>
	 */
	public static void g_source_set_funcs(Pointer<GtkLibrary.GSource > source, Pointer<GtkLibrary.GSourceFuncs > funcs) {
		g_source_set_funcs(Pointer.getPeer(source), Pointer.getPeer(funcs));
	}
	protected native static void g_source_set_funcs(@Ptr long source, @Ptr long funcs);
	/**
	 * Original signature : <code>gboolean g_source_is_destroyed(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:427</i>
	 */
	public static GtkLibrary.gboolean g_source_is_destroyed(Pointer<GtkLibrary.GSource > source) {
		return Pointer.pointerToAddress(g_source_is_destroyed(Pointer.getPeer(source)), .class);
	}
	@Ptr 
	protected native static long g_source_is_destroyed(@Ptr long source);
	/**
	 * Original signature : <code>void g_source_set_name(GSource*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:430</i>
	 */
	public static void g_source_set_name(Pointer<GtkLibrary.GSource > source, Pointer<Byte > name) {
		g_source_set_name(Pointer.getPeer(source), Pointer.getPeer(name));
	}
	protected native static void g_source_set_name(@Ptr long source, @Ptr long name);
	/**
	 * Original signature : <code>char* g_source_get_name(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:433</i>
	 */
	public static Pointer<Byte > g_source_get_name(Pointer<GtkLibrary.GSource > source) {
		return Pointer.pointerToAddress(g_source_get_name(Pointer.getPeer(source)), Byte.class);
	}
	@Ptr 
	protected native static long g_source_get_name(@Ptr long source);
	/**
	 * Original signature : <code>void g_source_set_name_by_id(guint, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:435</i>
	 */
	public static void g_source_set_name_by_id(guint tag, Pointer<Byte > name) {
		g_source_set_name_by_id(Pointer.getPeer(tag), Pointer.getPeer(name));
	}
	protected native static void g_source_set_name_by_id(@Ptr long tag, @Ptr long name);
	/**
	 * Original signature : <code>void g_source_set_ready_time(GSource*, gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:439</i>
	 */
	public static void g_source_set_ready_time(Pointer<GtkLibrary.GSource > source, gint64 ready_time) {
		g_source_set_ready_time(Pointer.getPeer(source), Pointer.getPeer(ready_time));
	}
	protected native static void g_source_set_ready_time(@Ptr long source, @Ptr long ready_time);
	/**
	 * Original signature : <code>gint64 g_source_get_ready_time(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:442</i>
	 */
	public static gint64 g_source_get_ready_time(Pointer<GtkLibrary.GSource > source) {
		return Pointer.pointerToAddress(g_source_get_ready_time(Pointer.getPeer(source)), .class);
	}
	@Ptr 
	protected native static long g_source_get_ready_time(@Ptr long source);
	/**
	 * Original signature : <code>gpointer g_source_add_unix_fd(GSource*, gint, GIOCondition)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:446</i>
	 */
	public static GtkLibrary.gpointer g_source_add_unix_fd(Pointer<GtkLibrary.GSource > source, GtkLibrary.gint fd, GIOCondition events) {
		return Pointer.pointerToAddress(g_source_add_unix_fd(Pointer.getPeer(source), Pointer.getPeer(fd), Pointer.getPeer(events)), .class);
	}
	@Ptr 
	protected native static long g_source_add_unix_fd(@Ptr long source, @Ptr long fd, @Ptr long events);
	/**
	 * Original signature : <code>void g_source_modify_unix_fd(GSource*, gpointer, GIOCondition)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:450</i>
	 */
	public static void g_source_modify_unix_fd(Pointer<GtkLibrary.GSource > source, GtkLibrary.gpointer tag, GIOCondition new_events) {
		g_source_modify_unix_fd(Pointer.getPeer(source), Pointer.getPeer(tag), Pointer.getPeer(new_events));
	}
	protected native static void g_source_modify_unix_fd(@Ptr long source, @Ptr long tag, @Ptr long new_events);
	/**
	 * Original signature : <code>void g_source_remove_unix_fd(GSource*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:454</i>
	 */
	public static void g_source_remove_unix_fd(Pointer<GtkLibrary.GSource > source, GtkLibrary.gpointer tag) {
		g_source_remove_unix_fd(Pointer.getPeer(source), Pointer.getPeer(tag));
	}
	protected native static void g_source_remove_unix_fd(@Ptr long source, @Ptr long tag);
	/**
	 * Original signature : <code>GIOCondition g_source_query_unix_fd(GSource*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:457</i>
	 */
	public static GIOCondition g_source_query_unix_fd(Pointer<GtkLibrary.GSource > source, GtkLibrary.gpointer tag) {
		return Pointer.pointerToAddress(g_source_query_unix_fd(Pointer.getPeer(source), Pointer.getPeer(tag)), .class);
	}
	@Ptr 
	protected native static long g_source_query_unix_fd(@Ptr long source, @Ptr long tag);
	/**
	 * Used to implement g_source_connect_closure and internally<br>
	 * Original signature : <code>void g_source_set_callback_indirect(GSource*, gpointer, GSourceCallbackFuncs*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:463</i>
	 */
	public static void g_source_set_callback_indirect(Pointer<GtkLibrary.GSource > source, GtkLibrary.gpointer callback_data, Pointer<GtkLibrary.GSourceCallbackFuncs > callback_funcs) {
		g_source_set_callback_indirect(Pointer.getPeer(source), Pointer.getPeer(callback_data), Pointer.getPeer(callback_funcs));
	}
	protected native static void g_source_set_callback_indirect(@Ptr long source, @Ptr long callback_data, @Ptr long callback_funcs);
	/**
	 * Original signature : <code>void g_source_add_poll(GSource*, GPollFD*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:468</i>
	 */
	public static void g_source_add_poll(Pointer<GtkLibrary.GSource > source, Pointer<GtkLibrary.GPollFD > fd) {
		g_source_add_poll(Pointer.getPeer(source), Pointer.getPeer(fd));
	}
	protected native static void g_source_add_poll(@Ptr long source, @Ptr long fd);
	/**
	 * Original signature : <code>void g_source_remove_poll(GSource*, GPollFD*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:471</i>
	 */
	public static void g_source_remove_poll(Pointer<GtkLibrary.GSource > source, Pointer<GtkLibrary.GPollFD > fd) {
		g_source_remove_poll(Pointer.getPeer(source), Pointer.getPeer(fd));
	}
	protected native static void g_source_remove_poll(@Ptr long source, @Ptr long fd);
	/**
	 * Original signature : <code>void g_source_add_child_source(GSource*, GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:475</i>
	 */
	public static void g_source_add_child_source(Pointer<GtkLibrary.GSource > source, Pointer<GtkLibrary.GSource > child_source) {
		g_source_add_child_source(Pointer.getPeer(source), Pointer.getPeer(child_source));
	}
	protected native static void g_source_add_child_source(@Ptr long source, @Ptr long child_source);
	/**
	 * Original signature : <code>void g_source_remove_child_source(GSource*, GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:478</i>
	 */
	public static void g_source_remove_child_source(Pointer<GtkLibrary.GSource > source, Pointer<GtkLibrary.GSource > child_source) {
		g_source_remove_child_source(Pointer.getPeer(source), Pointer.getPeer(child_source));
	}
	protected native static void g_source_remove_child_source(@Ptr long source, @Ptr long child_source);
	/**
	 * Original signature : <code>void g_source_get_current_time(GSource*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:482</i>
	 */
	public static void g_source_get_current_time(Pointer<GtkLibrary.GSource > source, Pointer<GtkLibrary.GTimeVal > timeval) {
		g_source_get_current_time(Pointer.getPeer(source), Pointer.getPeer(timeval));
	}
	protected native static void g_source_get_current_time(@Ptr long source, @Ptr long timeval);
	/**
	 * Original signature : <code>gint64 g_source_get_time(GSource*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:486</i>
	 */
	public static gint64 g_source_get_time(Pointer<GtkLibrary.GSource > source) {
		return Pointer.pointerToAddress(g_source_get_time(Pointer.getPeer(source)), .class);
	}
	@Ptr 
	protected native static long g_source_get_time(@Ptr long source);
	/**
	 * Specific source types<br>
	 * Original signature : <code>GSource* g_idle_source_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:495</i>
	 */
	public static Pointer<GtkLibrary.GSource > g_idle_source_new() {
		return Pointer.pointerToAddress(g_idle_source_new$2(), GtkLibrary.GSource.class);
	}
	@Ptr 
	protected native static long g_idle_source_new$2();
	/**
	 * Original signature : <code>GSource* g_child_watch_source_new(GPid)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:497</i>
	 */
	public static Pointer<GtkLibrary.GSource > g_child_watch_source_new(GtkLibrary.GPid pid) {
		return Pointer.pointerToAddress(g_child_watch_source_new(Pointer.getPeer(pid)), GtkLibrary.GSource.class);
	}
	@Ptr 
	protected native static long g_child_watch_source_new(@Ptr long pid);
	/**
	 * Original signature : <code>GSource* g_timeout_source_new(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:499</i>
	 */
	public static Pointer<GtkLibrary.GSource > g_timeout_source_new(guint interval) {
		return Pointer.pointerToAddress(g_timeout_source_new(Pointer.getPeer(interval)), GtkLibrary.GSource.class);
	}
	@Ptr 
	protected native static long g_timeout_source_new(@Ptr long interval);
	/**
	 * Original signature : <code>GSource* g_timeout_source_new_seconds(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:501</i>
	 */
	public static Pointer<GtkLibrary.GSource > g_timeout_source_new_seconds(guint interval) {
		return Pointer.pointerToAddress(g_timeout_source_new_seconds(Pointer.getPeer(interval)), GtkLibrary.GSource.class);
	}
	@Ptr 
	protected native static long g_timeout_source_new_seconds(@Ptr long interval);
	/**
	 * Miscellaneous functions<br>
	 * Original signature : <code>void g_get_current_time(GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:506</i>
	 */
	public static void g_get_current_time(Pointer<GtkLibrary.GTimeVal > result) {
		g_get_current_time(Pointer.getPeer(result));
	}
	protected native static void g_get_current_time(@Ptr long result);
	/**
	 * Original signature : <code>gint64 g_get_monotonic_time()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:508</i>
	 */
	public static gint64 g_get_monotonic_time() {
		return Pointer.pointerToAddress(g_get_monotonic_time$2(), .class);
	}
	@Ptr 
	protected native static long g_get_monotonic_time$2();
	/**
	 * Original signature : <code>gint64 g_get_real_time()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:510</i>
	 */
	public static gint64 g_get_real_time() {
		return Pointer.pointerToAddress(g_get_real_time$2(), .class);
	}
	@Ptr 
	protected native static long g_get_real_time$2();
	/**
	 * Source manipulation by ID<br>
	 * Original signature : <code>gboolean g_source_remove(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:515</i>
	 */
	public static GtkLibrary.gboolean g_source_remove(guint tag) {
		return Pointer.pointerToAddress(g_source_remove(Pointer.getPeer(tag)), .class);
	}
	@Ptr 
	protected native static long g_source_remove(@Ptr long tag);
	/**
	 * Original signature : <code>gboolean g_source_remove_by_user_data(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:517</i>
	 */
	public static GtkLibrary.gboolean g_source_remove_by_user_data(GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_source_remove_by_user_data(Pointer.getPeer(user_data)), .class);
	}
	@Ptr 
	protected native static long g_source_remove_by_user_data(@Ptr long user_data);
	/**
	 * Original signature : <code>gboolean g_source_remove_by_funcs_user_data(GSourceFuncs*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:519</i>
	 */
	public static GtkLibrary.gboolean g_source_remove_by_funcs_user_data(Pointer<GtkLibrary.GSourceFuncs > funcs, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_source_remove_by_funcs_user_data(Pointer.getPeer(funcs), Pointer.getPeer(user_data)), .class);
	}
	@Ptr 
	protected native static long g_source_remove_by_funcs_user_data(@Ptr long funcs, @Ptr long user_data);
	/**
	 * Idles, child watchers and timeouts<br>
	 * Original signature : <code>guint g_timeout_add_full(gint, guint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:524</i>
	 */
	public static guint g_timeout_add_full(GtkLibrary.gint priority, guint interval, GSourceFunc function, GtkLibrary.gpointer data, GtkLibrary.GDestroyNotify notify$) {
		return Pointer.pointerToAddress(g_timeout_add_full(Pointer.getPeer(priority), Pointer.getPeer(interval), Pointer.getPeer(function), Pointer.getPeer(data), Pointer.getPeer(notify$)), .class);
	}
	@Ptr 
	protected native static long g_timeout_add_full(@Ptr long priority, @Ptr long interval, @Ptr long function, @Ptr long data, @Ptr long notify$);
	/**
	 * Original signature : <code>guint g_timeout_add(guint, GSourceFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:530</i>
	 */
	public static guint g_timeout_add(guint interval, GSourceFunc function, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_timeout_add(Pointer.getPeer(interval), Pointer.getPeer(function), Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_timeout_add(@Ptr long interval, @Ptr long function, @Ptr long data);
	/**
	 * Original signature : <code>guint g_timeout_add_seconds_full(gint, guint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:534</i>
	 */
	public static guint g_timeout_add_seconds_full(GtkLibrary.gint priority, guint interval, GSourceFunc function, GtkLibrary.gpointer data, GtkLibrary.GDestroyNotify notify$) {
		return Pointer.pointerToAddress(g_timeout_add_seconds_full(Pointer.getPeer(priority), Pointer.getPeer(interval), Pointer.getPeer(function), Pointer.getPeer(data), Pointer.getPeer(notify$)), .class);
	}
	@Ptr 
	protected native static long g_timeout_add_seconds_full(@Ptr long priority, @Ptr long interval, @Ptr long function, @Ptr long data, @Ptr long notify$);
	/**
	 * Original signature : <code>guint g_timeout_add_seconds(guint, GSourceFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:540</i>
	 */
	public static guint g_timeout_add_seconds(guint interval, GSourceFunc function, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_timeout_add_seconds(Pointer.getPeer(interval), Pointer.getPeer(function), Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_timeout_add_seconds(@Ptr long interval, @Ptr long function, @Ptr long data);
	/**
	 * Original signature : <code>guint g_child_watch_add_full(gint, GPid, GChildWatchFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:544</i>
	 */
	public static guint g_child_watch_add_full(GtkLibrary.gint priority, GtkLibrary.GPid pid, GtkLibrary.GChildWatchFunc function, GtkLibrary.gpointer data, GtkLibrary.GDestroyNotify notify$) {
		return Pointer.pointerToAddress(g_child_watch_add_full(Pointer.getPeer(priority), Pointer.getPeer(pid), Pointer.getPeer(function), Pointer.getPeer(data), Pointer.getPeer(notify$)), .class);
	}
	@Ptr 
	protected native static long g_child_watch_add_full(@Ptr long priority, @Ptr long pid, @Ptr long function, @Ptr long data, @Ptr long notify$);
	/**
	 * Original signature : <code>guint g_child_watch_add(GPid, GChildWatchFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:550</i>
	 */
	public static guint g_child_watch_add(GtkLibrary.GPid pid, GtkLibrary.GChildWatchFunc function, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_child_watch_add(Pointer.getPeer(pid), Pointer.getPeer(function), Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_child_watch_add(@Ptr long pid, @Ptr long function, @Ptr long data);
	/**
	 * Original signature : <code>guint g_idle_add(GSourceFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:554</i>
	 */
	public static guint g_idle_add(GSourceFunc function, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_idle_add(Pointer.getPeer(function), Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_idle_add(@Ptr long function, @Ptr long data);
	/**
	 * Original signature : <code>guint g_idle_add_full(gint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:557</i>
	 */
	public static guint g_idle_add_full(GtkLibrary.gint priority, GSourceFunc function, GtkLibrary.gpointer data, GtkLibrary.GDestroyNotify notify$) {
		return Pointer.pointerToAddress(g_idle_add_full(Pointer.getPeer(priority), Pointer.getPeer(function), Pointer.getPeer(data), Pointer.getPeer(notify$)), .class);
	}
	@Ptr 
	protected native static long g_idle_add_full(@Ptr long priority, @Ptr long function, @Ptr long data, @Ptr long notify$);
	/**
	 * Original signature : <code>gboolean g_idle_remove_by_data(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:562</i>
	 */
	public static GtkLibrary.gboolean g_idle_remove_by_data(GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_idle_remove_by_data(Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_idle_remove_by_data(@Ptr long data);
	/**
	 * Original signature : <code>void g_main_context_invoke_full(GMainContext*, gint, GSourceFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:565</i>
	 */
	public static void g_main_context_invoke_full(Pointer<GtkLibrary.GMainContext > context, GtkLibrary.gint priority, GSourceFunc function, GtkLibrary.gpointer data, GtkLibrary.GDestroyNotify notify$) {
		g_main_context_invoke_full(Pointer.getPeer(context), Pointer.getPeer(priority), Pointer.getPeer(function), Pointer.getPeer(data), Pointer.getPeer(notify$));
	}
	protected native static void g_main_context_invoke_full(@Ptr long context, @Ptr long priority, @Ptr long function, @Ptr long data, @Ptr long notify$);
	/**
	 * Original signature : <code>void g_main_context_invoke(GMainContext*, GSourceFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmain.h:571</i>
	 */
	public static void g_main_context_invoke(Pointer<GtkLibrary.GMainContext > context, GSourceFunc function, GtkLibrary.gpointer data) {
		g_main_context_invoke(Pointer.getPeer(context), Pointer.getPeer(function), Pointer.getPeer(data));
	}
	protected native static void g_main_context_invoke(@Ptr long context, @Ptr long function, @Ptr long data);
	/**
	 * Original signature : <code>guint32 g_unicode_script_to_iso15924(GUnicodeScript)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:479</i>
	 */
	public static GtkLibrary.guint32 g_unicode_script_to_iso15924(GtkLibrary.GUnicodeScript script) {
		return Pointer.pointerToAddress(g_unicode_script_to_iso15924(Pointer.getPeer(script)), .class);
	}
	@Ptr 
	protected native static long g_unicode_script_to_iso15924(@Ptr long script);
	/**
	 * Original signature : <code>GUnicodeScript g_unicode_script_from_iso15924(guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:481</i>
	 */
	public static GtkLibrary.GUnicodeScript g_unicode_script_from_iso15924(GtkLibrary.guint32 iso15924) {
		return Pointer.pointerToAddress(g_unicode_script_from_iso15924(Pointer.getPeer(iso15924)), .class);
	}
	@Ptr 
	protected native static long g_unicode_script_from_iso15924(@Ptr long iso15924);
	/**
	 * These are all analogs of the <ctype.h> functions.<br>
	 * Original signature : <code>gboolean g_unichar_isalnum(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:486</i>
	 */
	public static GtkLibrary.gboolean g_unichar_isalnum(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_isalnum(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_isalnum(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_isalpha(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:488</i>
	 */
	public static GtkLibrary.gboolean g_unichar_isalpha(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_isalpha(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_isalpha(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_iscntrl(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:490</i>
	 */
	public static GtkLibrary.gboolean g_unichar_iscntrl(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_iscntrl(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_iscntrl(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_isdigit(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:492</i>
	 */
	public static GtkLibrary.gboolean g_unichar_isdigit(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_isdigit(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_isdigit(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_isgraph(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:494</i>
	 */
	public static GtkLibrary.gboolean g_unichar_isgraph(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_isgraph(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_isgraph(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_islower(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:496</i>
	 */
	public static GtkLibrary.gboolean g_unichar_islower(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_islower(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_islower(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_isprint(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:498</i>
	 */
	public static GtkLibrary.gboolean g_unichar_isprint(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_isprint(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_isprint(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_ispunct(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:500</i>
	 */
	public static GtkLibrary.gboolean g_unichar_ispunct(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_ispunct(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_ispunct(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_isspace(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:502</i>
	 */
	public static GtkLibrary.gboolean g_unichar_isspace(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_isspace(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_isspace(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_isupper(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:504</i>
	 */
	public static GtkLibrary.gboolean g_unichar_isupper(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_isupper(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_isupper(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_isxdigit(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:506</i>
	 */
	public static GtkLibrary.gboolean g_unichar_isxdigit(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_isxdigit(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_isxdigit(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_istitle(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:508</i>
	 */
	public static GtkLibrary.gboolean g_unichar_istitle(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_istitle(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_istitle(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_isdefined(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:510</i>
	 */
	public static GtkLibrary.gboolean g_unichar_isdefined(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_isdefined(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_isdefined(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_iswide(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:512</i>
	 */
	public static GtkLibrary.gboolean g_unichar_iswide(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_iswide(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_iswide(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_iswide_cjk(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:514</i>
	 */
	public static GtkLibrary.gboolean g_unichar_iswide_cjk(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_iswide_cjk(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_iswide_cjk(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_iszerowidth(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:516</i>
	 */
	public static GtkLibrary.gboolean g_unichar_iszerowidth(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_iszerowidth(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_iszerowidth(@Ptr long c);
	/**
	 * Original signature : <code>gboolean g_unichar_ismark(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:518</i>
	 */
	public static GtkLibrary.gboolean g_unichar_ismark(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_ismark(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_ismark(@Ptr long c);
	/**
	 * More <ctype.h> functions.  These convert between the three cases.<br>
	 * See the Unicode book to understand title case.<br>
	 * Original signature : <code>gunichar g_unichar_toupper(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:523</i>
	 */
	public static GtkLibrary.gunichar g_unichar_toupper(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_toupper(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_toupper(@Ptr long c);
	/**
	 * Original signature : <code>gunichar g_unichar_tolower(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:525</i>
	 */
	public static GtkLibrary.gunichar g_unichar_tolower(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_tolower(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_tolower(@Ptr long c);
	/**
	 * Original signature : <code>gunichar g_unichar_totitle(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:527</i>
	 */
	public static GtkLibrary.gunichar g_unichar_totitle(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_totitle(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_totitle(@Ptr long c);
	/**
	 * If C is a digit (according to 'g_unichar_isdigit'), then return its<br>
	 * numeric value.  Otherwise return -1.<br>
	 * Original signature : <code>gint g_unichar_digit_value(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:532</i>
	 */
	public static GtkLibrary.gint g_unichar_digit_value(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_digit_value(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_digit_value(@Ptr long c);
	/**
	 * Original signature : <code>gint g_unichar_xdigit_value(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:535</i>
	 */
	public static GtkLibrary.gint g_unichar_xdigit_value(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_xdigit_value(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_xdigit_value(@Ptr long c);
	/**
	 * Return the Unicode character type of a given character.<br>
	 * Original signature : <code>GUnicodeType g_unichar_type(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:539</i>
	 */
	public static GtkLibrary.GUnicodeType g_unichar_type(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_type(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_type(@Ptr long c);
	/**
	 * Return the line break property for a given character<br>
	 * Original signature : <code>GUnicodeBreakType g_unichar_break_type(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:543</i>
	 */
	public static GtkLibrary.GUnicodeBreakType g_unichar_break_type(GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_unichar_break_type(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_unichar_break_type(@Ptr long c);
	/**
	 * Returns the combining class for a given character<br>
	 * Original signature : <code>gint g_unichar_combining_class(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:547</i>
	 */
	public static GtkLibrary.gint g_unichar_combining_class(GtkLibrary.gunichar uc) {
		return Pointer.pointerToAddress(g_unichar_combining_class(Pointer.getPeer(uc)), .class);
	}
	@Ptr 
	protected native static long g_unichar_combining_class(@Ptr long uc);
	/**
	 * Original signature : <code>gboolean g_unichar_get_mirror_char(gunichar, gunichar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:550</i>
	 */
	public static GtkLibrary.gboolean g_unichar_get_mirror_char(GtkLibrary.gunichar ch, Pointer<GtkLibrary.gunichar > mirrored_ch) {
		return Pointer.pointerToAddress(g_unichar_get_mirror_char(Pointer.getPeer(ch), Pointer.getPeer(mirrored_ch)), .class);
	}
	@Ptr 
	protected native static long g_unichar_get_mirror_char(@Ptr long ch, @Ptr long mirrored_ch);
	/**
	 * Original signature : <code>GUnicodeScript g_unichar_get_script(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:554</i>
	 */
	public static GtkLibrary.GUnicodeScript g_unichar_get_script(GtkLibrary.gunichar ch) {
		return Pointer.pointerToAddress(g_unichar_get_script(Pointer.getPeer(ch)), .class);
	}
	@Ptr 
	protected native static long g_unichar_get_script(@Ptr long ch);
	/**
	 * Validate a Unicode character<br>
	 * Original signature : <code>gboolean g_unichar_validate(gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:558</i>
	 */
	public static GtkLibrary.gboolean g_unichar_validate(GtkLibrary.gunichar ch) {
		return Pointer.pointerToAddress(g_unichar_validate(Pointer.getPeer(ch)), .class);
	}
	@Ptr 
	protected native static long g_unichar_validate(@Ptr long ch);
	/**
	 * Pairwise canonical compose/decompose<br>
	 * Original signature : <code>gboolean g_unichar_compose(gunichar, gunichar, gunichar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:562</i>
	 */
	public static GtkLibrary.gboolean g_unichar_compose(GtkLibrary.gunichar a, GtkLibrary.gunichar b, Pointer<GtkLibrary.gunichar > ch) {
		return Pointer.pointerToAddress(g_unichar_compose(Pointer.getPeer(a), Pointer.getPeer(b), Pointer.getPeer(ch)), .class);
	}
	@Ptr 
	protected native static long g_unichar_compose(@Ptr long a, @Ptr long b, @Ptr long ch);
	/**
	 * Original signature : <code>gboolean g_unichar_decompose(gunichar, gunichar*, gunichar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:566</i>
	 */
	public static GtkLibrary.gboolean g_unichar_decompose(GtkLibrary.gunichar ch, Pointer<GtkLibrary.gunichar > a, Pointer<GtkLibrary.gunichar > b) {
		return Pointer.pointerToAddress(g_unichar_decompose(Pointer.getPeer(ch), Pointer.getPeer(a), Pointer.getPeer(b)), .class);
	}
	@Ptr 
	protected native static long g_unichar_decompose(@Ptr long ch, @Ptr long a, @Ptr long b);
	/**
	 * Original signature : <code>gsize g_unichar_fully_decompose(gunichar, gboolean, gunichar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:571</i>
	 */
	public static gsize g_unichar_fully_decompose(GtkLibrary.gunichar ch, GtkLibrary.gboolean compat, Pointer<GtkLibrary.gunichar > result, gsize result_len) {
		return Pointer.pointerToAddress(g_unichar_fully_decompose(Pointer.getPeer(ch), Pointer.getPeer(compat), Pointer.getPeer(result), Pointer.getPeer(result_len)), .class);
	}
	@Ptr 
	protected native static long g_unichar_fully_decompose(@Ptr long ch, @Ptr long compat, @Ptr long result, @Ptr long result_len);
	/**
	 * Compute canonical ordering of a string in-place.  This rearranges<br>
	 * decomposed characters in the string according to their combining<br>
	 * classes.  See the Unicode manual for more information.<br>
	 * Original signature : <code>void g_unicode_canonical_ordering(gunichar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:592</i>
	 */
	public static void g_unicode_canonical_ordering(Pointer<GtkLibrary.gunichar > string, gsize len) {
		g_unicode_canonical_ordering(Pointer.getPeer(string), Pointer.getPeer(len));
	}
	protected native static void g_unicode_canonical_ordering(@Ptr long string, @Ptr long len);
	/**
	 * Original signature : <code>gunichar* g_unicode_canonical_decomposition(gunichar, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:597</i>
	 */
	public static Pointer<GtkLibrary.gunichar > g_unicode_canonical_decomposition(GtkLibrary.gunichar ch, Pointer<gsize > result_len) {
		return Pointer.pointerToAddress(g_unicode_canonical_decomposition(Pointer.getPeer(ch), Pointer.getPeer(result_len)), GtkLibrary.gunichar.class);
	}
	@Ptr 
	protected native static long g_unicode_canonical_decomposition(@Ptr long ch, @Ptr long result_len);
	/**
	 * Original signature : <code>gunichar g_utf8_get_char(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:618</i>
	 */
	public static GtkLibrary.gunichar g_utf8_get_char(Pointer<GtkLibrary.gchar > p) {
		return Pointer.pointerToAddress(g_utf8_get_char(Pointer.getPeer(p)), .class);
	}
	@Ptr 
	protected native static long g_utf8_get_char(@Ptr long p);
	/**
	 * Original signature : <code>gunichar g_utf8_get_char_validated(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:620</i>
	 */
	public static GtkLibrary.gunichar g_utf8_get_char_validated(Pointer<GtkLibrary.gchar > p, GtkLibrary.gssize max_len) {
		return Pointer.pointerToAddress(g_utf8_get_char_validated(Pointer.getPeer(p), Pointer.getPeer(max_len)), .class);
	}
	@Ptr 
	protected native static long g_utf8_get_char_validated(@Ptr long p, @Ptr long max_len);
	/**
	 * Original signature : <code>gchar* g_utf8_offset_to_pointer(const gchar*, glong)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:624</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_offset_to_pointer(Pointer<GtkLibrary.gchar > str, GtkLibrary.glong offset) {
		return Pointer.pointerToAddress(g_utf8_offset_to_pointer(Pointer.getPeer(str), Pointer.getPeer(offset)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_offset_to_pointer(@Ptr long str, @Ptr long offset);
	/**
	 * Original signature : <code>glong g_utf8_pointer_to_offset(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:627</i>
	 */
	public static GtkLibrary.glong g_utf8_pointer_to_offset(Pointer<GtkLibrary.gchar > str, Pointer<GtkLibrary.gchar > pos) {
		return Pointer.pointerToAddress(g_utf8_pointer_to_offset(Pointer.getPeer(str), Pointer.getPeer(pos)), .class);
	}
	@Ptr 
	protected native static long g_utf8_pointer_to_offset(@Ptr long str, @Ptr long pos);
	/**
	 * Original signature : <code>gchar* g_utf8_prev_char(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:630</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_prev_char(Pointer<GtkLibrary.gchar > p) {
		return Pointer.pointerToAddress(g_utf8_prev_char(Pointer.getPeer(p)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_prev_char(@Ptr long p);
	/**
	 * Original signature : <code>gchar* g_utf8_find_next_char(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:632</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_find_next_char(Pointer<GtkLibrary.gchar > p, Pointer<GtkLibrary.gchar > end) {
		return Pointer.pointerToAddress(g_utf8_find_next_char(Pointer.getPeer(p), Pointer.getPeer(end)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_find_next_char(@Ptr long p, @Ptr long end);
	/**
	 * Original signature : <code>gchar* g_utf8_find_prev_char(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:635</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_find_prev_char(Pointer<GtkLibrary.gchar > str, Pointer<GtkLibrary.gchar > p) {
		return Pointer.pointerToAddress(g_utf8_find_prev_char(Pointer.getPeer(str), Pointer.getPeer(p)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_find_prev_char(@Ptr long str, @Ptr long p);
	/**
	 * Original signature : <code>glong g_utf8_strlen(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:639</i>
	 */
	public static GtkLibrary.glong g_utf8_strlen(Pointer<GtkLibrary.gchar > p, GtkLibrary.gssize max) {
		return Pointer.pointerToAddress(g_utf8_strlen(Pointer.getPeer(p), Pointer.getPeer(max)), .class);
	}
	@Ptr 
	protected native static long g_utf8_strlen(@Ptr long p, @Ptr long max);
	/**
	 * Original signature : <code>gchar* g_utf8_substring(const gchar*, glong, glong)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:643</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_substring(Pointer<GtkLibrary.gchar > str, GtkLibrary.glong start_pos, GtkLibrary.glong end_pos) {
		return Pointer.pointerToAddress(g_utf8_substring(Pointer.getPeer(str), Pointer.getPeer(start_pos), Pointer.getPeer(end_pos)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_substring(@Ptr long str, @Ptr long start_pos, @Ptr long end_pos);
	/**
	 * Original signature : <code>gchar* g_utf8_strncpy(gchar*, const gchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:648</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_strncpy(Pointer<GtkLibrary.gchar > dest, Pointer<GtkLibrary.gchar > src, gsize n) {
		return Pointer.pointerToAddress(g_utf8_strncpy(Pointer.getPeer(dest), Pointer.getPeer(src), Pointer.getPeer(n)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_strncpy(@Ptr long dest, @Ptr long src, @Ptr long n);
	/**
	 * Find the UTF-8 character corresponding to ch, in string p. These<br>
	 * functions are equivalants to strchr and strrchr<br>
	 * Original signature : <code>gchar* g_utf8_strchr(const gchar*, gssize, gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:655</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_strchr(Pointer<GtkLibrary.gchar > p, GtkLibrary.gssize len, GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_utf8_strchr(Pointer.getPeer(p), Pointer.getPeer(len), Pointer.getPeer(c)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_strchr(@Ptr long p, @Ptr long len, @Ptr long c);
	/**
	 * Original signature : <code>gchar* g_utf8_strrchr(const gchar*, gssize, gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:659</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_strrchr(Pointer<GtkLibrary.gchar > p, GtkLibrary.gssize len, GtkLibrary.gunichar c) {
		return Pointer.pointerToAddress(g_utf8_strrchr(Pointer.getPeer(p), Pointer.getPeer(len), Pointer.getPeer(c)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_strrchr(@Ptr long p, @Ptr long len, @Ptr long c);
	/**
	 * Original signature : <code>gchar* g_utf8_strreverse(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:663</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_strreverse(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_utf8_strreverse(Pointer.getPeer(str), Pointer.getPeer(len)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_strreverse(@Ptr long str, @Ptr long len);
	/**
	 * Original signature : <code>gunichar2* g_utf8_to_utf16(const gchar*, glong, glong*, glong*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:667</i>
	 */
	public static Pointer<GtkLibrary.gunichar2 > g_utf8_to_utf16(Pointer<GtkLibrary.gchar > str, GtkLibrary.glong len, Pointer<GtkLibrary.glong > items_read, Pointer<GtkLibrary.glong > items_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_utf8_to_utf16(Pointer.getPeer(str), Pointer.getPeer(len), Pointer.getPeer(items_read), Pointer.getPeer(items_written), Pointer.getPeer(error)), GtkLibrary.gunichar2.class);
	}
	@Ptr 
	protected native static long g_utf8_to_utf16(@Ptr long str, @Ptr long len, @Ptr long items_read, @Ptr long items_written, @Ptr long error);
	/**
	 * Original signature : <code>gunichar* g_utf8_to_ucs4(const gchar*, glong, glong*, glong*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:673</i>
	 */
	public static Pointer<GtkLibrary.gunichar > g_utf8_to_ucs4(Pointer<GtkLibrary.gchar > str, GtkLibrary.glong len, Pointer<GtkLibrary.glong > items_read, Pointer<GtkLibrary.glong > items_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_utf8_to_ucs4(Pointer.getPeer(str), Pointer.getPeer(len), Pointer.getPeer(items_read), Pointer.getPeer(items_written), Pointer.getPeer(error)), GtkLibrary.gunichar.class);
	}
	@Ptr 
	protected native static long g_utf8_to_ucs4(@Ptr long str, @Ptr long len, @Ptr long items_read, @Ptr long items_written, @Ptr long error);
	/**
	 * Original signature : <code>gunichar* g_utf8_to_ucs4_fast(const gchar*, glong, glong*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:679</i>
	 */
	public static Pointer<GtkLibrary.gunichar > g_utf8_to_ucs4_fast(Pointer<GtkLibrary.gchar > str, GtkLibrary.glong len, Pointer<GtkLibrary.glong > items_written) {
		return Pointer.pointerToAddress(g_utf8_to_ucs4_fast(Pointer.getPeer(str), Pointer.getPeer(len), Pointer.getPeer(items_written)), GtkLibrary.gunichar.class);
	}
	@Ptr 
	protected native static long g_utf8_to_ucs4_fast(@Ptr long str, @Ptr long len, @Ptr long items_written);
	/**
	 * Original signature : <code>gunichar* g_utf16_to_ucs4(const gunichar2*, glong, glong*, glong*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:683</i>
	 */
	public static Pointer<GtkLibrary.gunichar > g_utf16_to_ucs4(Pointer<GtkLibrary.gunichar2 > str, GtkLibrary.glong len, Pointer<GtkLibrary.glong > items_read, Pointer<GtkLibrary.glong > items_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_utf16_to_ucs4(Pointer.getPeer(str), Pointer.getPeer(len), Pointer.getPeer(items_read), Pointer.getPeer(items_written), Pointer.getPeer(error)), GtkLibrary.gunichar.class);
	}
	@Ptr 
	protected native static long g_utf16_to_ucs4(@Ptr long str, @Ptr long len, @Ptr long items_read, @Ptr long items_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_utf16_to_utf8(const gunichar2*, glong, glong*, glong*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:689</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf16_to_utf8(Pointer<GtkLibrary.gunichar2 > str, GtkLibrary.glong len, Pointer<GtkLibrary.glong > items_read, Pointer<GtkLibrary.glong > items_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_utf16_to_utf8(Pointer.getPeer(str), Pointer.getPeer(len), Pointer.getPeer(items_read), Pointer.getPeer(items_written), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf16_to_utf8(@Ptr long str, @Ptr long len, @Ptr long items_read, @Ptr long items_written, @Ptr long error);
	/**
	 * Original signature : <code>gunichar2* g_ucs4_to_utf16(const gunichar*, glong, glong*, glong*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:695</i>
	 */
	public static Pointer<GtkLibrary.gunichar2 > g_ucs4_to_utf16(Pointer<GtkLibrary.gunichar > str, GtkLibrary.glong len, Pointer<GtkLibrary.glong > items_read, Pointer<GtkLibrary.glong > items_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_ucs4_to_utf16(Pointer.getPeer(str), Pointer.getPeer(len), Pointer.getPeer(items_read), Pointer.getPeer(items_written), Pointer.getPeer(error)), GtkLibrary.gunichar2.class);
	}
	@Ptr 
	protected native static long g_ucs4_to_utf16(@Ptr long str, @Ptr long len, @Ptr long items_read, @Ptr long items_written, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_ucs4_to_utf8(const gunichar*, glong, glong*, glong*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:701</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_ucs4_to_utf8(Pointer<GtkLibrary.gunichar > str, GtkLibrary.glong len, Pointer<GtkLibrary.glong > items_read, Pointer<GtkLibrary.glong > items_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_ucs4_to_utf8(Pointer.getPeer(str), Pointer.getPeer(len), Pointer.getPeer(items_read), Pointer.getPeer(items_written), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_ucs4_to_utf8(@Ptr long str, @Ptr long len, @Ptr long items_read, @Ptr long items_written, @Ptr long error);
	/**
	 * Original signature : <code>gint g_unichar_to_utf8(gunichar, gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:708</i>
	 */
	public static GtkLibrary.gint g_unichar_to_utf8(GtkLibrary.gunichar c, Pointer<GtkLibrary.gchar > outbuf) {
		return Pointer.pointerToAddress(g_unichar_to_utf8(Pointer.getPeer(c), Pointer.getPeer(outbuf)), .class);
	}
	@Ptr 
	protected native static long g_unichar_to_utf8(@Ptr long c, @Ptr long outbuf);
	/**
	 * Original signature : <code>gboolean g_utf8_validate(const gchar*, gssize, const gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:712</i>
	 */
	public static GtkLibrary.gboolean g_utf8_validate(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize max_len, Pointer<Pointer<GtkLibrary.gchar > > end) {
		return Pointer.pointerToAddress(g_utf8_validate(Pointer.getPeer(str), Pointer.getPeer(max_len), Pointer.getPeer(end)), .class);
	}
	@Ptr 
	protected native static long g_utf8_validate(@Ptr long str, @Ptr long max_len, @Ptr long end);
	/**
	 * Original signature : <code>gchar* g_utf8_strup(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:717</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_strup(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_utf8_strup(Pointer.getPeer(str), Pointer.getPeer(len)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_strup(@Ptr long str, @Ptr long len);
	/**
	 * Original signature : <code>gchar* g_utf8_strdown(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:720</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_strdown(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_utf8_strdown(Pointer.getPeer(str), Pointer.getPeer(len)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_strdown(@Ptr long str, @Ptr long len);
	/**
	 * Original signature : <code>gchar* g_utf8_casefold(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:723</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_casefold(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_utf8_casefold(Pointer.getPeer(str), Pointer.getPeer(len)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_casefold(@Ptr long str, @Ptr long len);
	/**
	 * Original signature : <code>gchar* g_utf8_normalize(const gchar*, gssize, GNormalizeMode)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:762</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_normalize(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize len, GtkLibrary.GNormalizeMode mode) {
		return Pointer.pointerToAddress(g_utf8_normalize(Pointer.getPeer(str), Pointer.getPeer(len), Pointer.getPeer(mode)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_normalize(@Ptr long str, @Ptr long len, @Ptr long mode);
	/**
	 * Original signature : <code>gint g_utf8_collate(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:767</i>
	 */
	public static GtkLibrary.gint g_utf8_collate(Pointer<GtkLibrary.gchar > str1, Pointer<GtkLibrary.gchar > str2) {
		return Pointer.pointerToAddress(g_utf8_collate(Pointer.getPeer(str1), Pointer.getPeer(str2)), .class);
	}
	@Ptr 
	protected native static long g_utf8_collate(@Ptr long str1, @Ptr long str2);
	/**
	 * Original signature : <code>gchar* g_utf8_collate_key(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:770</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_collate_key(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_utf8_collate_key(Pointer.getPeer(str), Pointer.getPeer(len)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_collate_key(@Ptr long str, @Ptr long len);
	/**
	 * Original signature : <code>gchar* g_utf8_collate_key_for_filename(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:773</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_utf8_collate_key_for_filename(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_utf8_collate_key_for_filename(Pointer.getPeer(str), Pointer.getPeer(len)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_utf8_collate_key_for_filename(@Ptr long str, @Ptr long len);
	/**
	 * private<br>
	 * Original signature : <code>gchar* _g_utf8_make_valid(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gunicode.h:779</i>
	 */
	public static Pointer<GtkLibrary.gchar > _g_utf8_make_valid(Pointer<GtkLibrary.gchar > name) {
		return Pointer.pointerToAddress(_g_utf8_make_valid(Pointer.getPeer(name)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long _g_utf8_make_valid(@Ptr long name);
	/**
	 * Original signature : <code>gchar* g_get_user_name()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:52</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_user_name() {
		return Pointer.pointerToAddress(g_get_user_name$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_user_name$2();
	/**
	 * Original signature : <code>gchar* g_get_real_name()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:54</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_real_name() {
		return Pointer.pointerToAddress(g_get_real_name$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_real_name$2();
	/**
	 * Original signature : <code>gchar* g_get_home_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:56</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_home_dir() {
		return Pointer.pointerToAddress(g_get_home_dir$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_home_dir$2();
	/**
	 * Original signature : <code>gchar* g_get_tmp_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:58</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_tmp_dir() {
		return Pointer.pointerToAddress(g_get_tmp_dir$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_tmp_dir$2();
	/**
	 * Original signature : <code>gchar* g_get_host_name()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:60</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_host_name() {
		return Pointer.pointerToAddress(g_get_host_name$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_host_name$2();
	/**
	 * Original signature : <code>gchar* g_get_prgname()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:62</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_prgname() {
		return Pointer.pointerToAddress(g_get_prgname$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_prgname$2();
	/**
	 * Original signature : <code>void g_set_prgname(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:64</i>
	 */
	public static void g_set_prgname(Pointer<GtkLibrary.gchar > prgname) {
		g_set_prgname(Pointer.getPeer(prgname));
	}
	protected native static void g_set_prgname(@Ptr long prgname);
	/**
	 * Original signature : <code>gchar* g_get_application_name()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:66</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_application_name() {
		return Pointer.pointerToAddress(g_get_application_name$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_application_name$2();
	/**
	 * Original signature : <code>void g_set_application_name(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:68</i>
	 */
	public static void g_set_application_name(Pointer<GtkLibrary.gchar > application_name) {
		g_set_application_name(Pointer.getPeer(application_name));
	}
	protected native static void g_set_application_name(@Ptr long application_name);
	/**
	 * Original signature : <code>void g_reload_user_special_dirs_cache()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:71</i>
	 */
	public static native void g_reload_user_special_dirs_cache();
	/**
	 * Original signature : <code>gchar* g_get_user_data_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:73</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_user_data_dir() {
		return Pointer.pointerToAddress(g_get_user_data_dir$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_user_data_dir$2();
	/**
	 * Original signature : <code>gchar* g_get_user_config_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:75</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_user_config_dir() {
		return Pointer.pointerToAddress(g_get_user_config_dir$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_user_config_dir$2();
	/**
	 * Original signature : <code>gchar* g_get_user_cache_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:77</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_user_cache_dir() {
		return Pointer.pointerToAddress(g_get_user_cache_dir$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_user_cache_dir$2();
	/**
	 * Original signature : <code>const gchar** g_get_system_data_dirs()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:79</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_get_system_data_dirs() {
		return Pointer.pointerToAddress(g_get_system_data_dirs$2(), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_get_system_data_dirs$2();
	/**
	 * Original signature : <code>const gchar** g_get_system_config_dirs()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:101</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_get_system_config_dirs() {
		return Pointer.pointerToAddress(g_get_system_config_dirs$2(), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_get_system_config_dirs$2();
	/**
	 * Original signature : <code>gchar* g_get_user_runtime_dir()</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:104</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_user_runtime_dir() {
		return Pointer.pointerToAddress(g_get_user_runtime_dir$2(), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_user_runtime_dir$2();
	/**
	 * Original signature : <code>gchar* g_get_user_special_dir(GUserDirectory)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:142</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_get_user_special_dir(GtkLibrary.GUserDirectory directory) {
		return Pointer.pointerToAddress(g_get_user_special_dir(Pointer.getPeer(directory)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_get_user_special_dir(@Ptr long directory);
	/**
	 * Miscellaneous utility functions<br>
	 * Original signature : <code>guint g_parse_debug_string(const gchar*, const GDebugKey*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:162</i>
	 */
	public static guint g_parse_debug_string(Pointer<GtkLibrary.gchar > string, Pointer<GtkLibrary.GDebugKey > keys, guint nkeys) {
		return Pointer.pointerToAddress(g_parse_debug_string(Pointer.getPeer(string), Pointer.getPeer(keys), Pointer.getPeer(nkeys)), .class);
	}
	@Ptr 
	protected native static long g_parse_debug_string(@Ptr long string, @Ptr long keys, @Ptr long nkeys);
	/**
	 * Original signature : <code>gint g_snprintf(gchar*, gulong, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:167</i>
	 */
	public static GtkLibrary.gint g_snprintf(Pointer<GtkLibrary.gchar > string, GtkLibrary.gulong n, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		return Pointer.pointerToAddress(g_snprintf(Pointer.getPeer(string), Pointer.getPeer(n), Pointer.getPeer(format), varargs), .class);
	}
	@Ptr 
	protected native static long g_snprintf(@Ptr long string, @Ptr long n, @Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>gint g_vsnprintf(gchar*, gulong, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:172</i>
	 */
	public static GtkLibrary.gint g_vsnprintf(Pointer<GtkLibrary.gchar > string, GtkLibrary.gulong n, Pointer<GtkLibrary.gchar > format, GtkLibrary.__builtin_va_list args) {
		return Pointer.pointerToAddress(g_vsnprintf(Pointer.getPeer(string), Pointer.getPeer(n), Pointer.getPeer(format), Pointer.getPeer(args)), .class);
	}
	@Ptr 
	protected native static long g_vsnprintf(@Ptr long string, @Ptr long n, @Ptr long format, @Ptr long args);
	/**
	 * Original signature : <code>void g_nullify_pointer(gpointer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:179</i>
	 */
	public static void g_nullify_pointer(Pointer<GtkLibrary.gpointer > nullify_location) {
		g_nullify_pointer(Pointer.getPeer(nullify_location));
	}
	protected native static void g_nullify_pointer(@Ptr long nullify_location);
	/**
	 * Original signature : <code>gchar* g_format_size_full(guint64, GFormatSizeFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:189</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_format_size_full(GtkLibrary.guint64 size, GtkLibrary.GFormatSizeFlags flags) {
		return Pointer.pointerToAddress(g_format_size_full(Pointer.getPeer(size), Pointer.getPeer(flags)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_format_size_full(@Ptr long size, @Ptr long flags);
	/**
	 * Original signature : <code>gchar* g_format_size(guint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:192</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_format_size(GtkLibrary.guint64 size) {
		return Pointer.pointerToAddress(g_format_size(Pointer.getPeer(size)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_format_size(@Ptr long size);
	/**
	 * Original signature : <code>gchar* g_format_size_for_display(goffset)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:195</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_format_size_for_display(GtkLibrary.goffset size) {
		return Pointer.pointerToAddress(g_format_size_for_display(Pointer.getPeer(size)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_format_size_for_display(@Ptr long size);
	/**
	 * we use a GLib function as a replacement for ATEXIT, so<br>
	 * the programmer is not required to check the return value<br>
	 * (if there is any in the implementation) and doesn't encounter<br>
	 * missing include files.<br>
	 * Original signature : <code>void g_atexit(GVoidFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:217</i>
	 */
	public static void g_atexit(GtkLibrary.GVoidFunc func) {
		g_atexit(Pointer.getPeer(func));
	}
	protected native static void g_atexit(@Ptr long func);
	/**
	 * Look for an executable in PATH, following execvp() rules<br>
	 * Original signature : <code>gchar* g_find_program_in_path(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gutils.h:237</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_find_program_in_path(Pointer<GtkLibrary.gchar > program) {
		return Pointer.pointerToAddress(g_find_program_in_path(Pointer.getPeer(program)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_find_program_in_path(@Ptr long program);
	/**
	 * Original signature : <code>GString* g_string_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:48</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_new(Pointer<GtkLibrary.gchar > init) {
		return Pointer.pointerToAddress(g_string_new(Pointer.getPeer(init)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_new(@Ptr long init);
	/**
	 * Original signature : <code>GString* g_string_new_len(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:50</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_new_len(Pointer<GtkLibrary.gchar > init, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_string_new_len(Pointer.getPeer(init), Pointer.getPeer(len)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_new_len(@Ptr long init, @Ptr long len);
	/**
	 * Original signature : <code>GString* g_string_sized_new(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:53</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_sized_new(gsize dfl_size) {
		return Pointer.pointerToAddress(g_string_sized_new(Pointer.getPeer(dfl_size)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_sized_new(@Ptr long dfl_size);
	/**
	 * Original signature : <code>gchar* g_string_free(GString*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:55</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_string_free(Pointer<GtkLibrary.GString > string, GtkLibrary.gboolean free_segment) {
		return Pointer.pointerToAddress(g_string_free(Pointer.getPeer(string), Pointer.getPeer(free_segment)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_string_free(@Ptr long string, @Ptr long free_segment);
	/**
	 * Original signature : <code>GBytes* g_string_free_to_bytes(GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:58</i>
	 */
	public static Pointer<GtkLibrary.GBytes > g_string_free_to_bytes(Pointer<GtkLibrary.GString > string) {
		return Pointer.pointerToAddress(g_string_free_to_bytes(Pointer.getPeer(string)), GtkLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_string_free_to_bytes(@Ptr long string);
	/**
	 * Original signature : <code>gboolean g_string_equal(const GString*, const GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:60</i>
	 */
	public static GtkLibrary.gboolean g_string_equal(Pointer<GtkLibrary.GString > v, Pointer<GtkLibrary.GString > v2) {
		return Pointer.pointerToAddress(g_string_equal(Pointer.getPeer(v), Pointer.getPeer(v2)), .class);
	}
	@Ptr 
	protected native static long g_string_equal(@Ptr long v, @Ptr long v2);
	/**
	 * Original signature : <code>guint g_string_hash(const GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:63</i>
	 */
	public static guint g_string_hash(Pointer<GtkLibrary.GString > str) {
		return Pointer.pointerToAddress(g_string_hash(Pointer.getPeer(str)), .class);
	}
	@Ptr 
	protected native static long g_string_hash(@Ptr long str);
	/**
	 * Original signature : <code>GString* g_string_assign(GString*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:65</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_assign(Pointer<GtkLibrary.GString > string, Pointer<GtkLibrary.gchar > rval) {
		return Pointer.pointerToAddress(g_string_assign(Pointer.getPeer(string), Pointer.getPeer(rval)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_assign(@Ptr long string, @Ptr long rval);
	/**
	 * Original signature : <code>GString* g_string_truncate(GString*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:68</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_truncate(Pointer<GtkLibrary.GString > string, gsize len) {
		return Pointer.pointerToAddress(g_string_truncate(Pointer.getPeer(string), Pointer.getPeer(len)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_truncate(@Ptr long string, @Ptr long len);
	/**
	 * Original signature : <code>GString* g_string_set_size(GString*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:71</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_set_size(Pointer<GtkLibrary.GString > string, gsize len) {
		return Pointer.pointerToAddress(g_string_set_size(Pointer.getPeer(string), Pointer.getPeer(len)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_set_size(@Ptr long string, @Ptr long len);
	/**
	 * Original signature : <code>GString* g_string_insert_len(GString*, gssize, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:74</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_insert_len(Pointer<GtkLibrary.GString > string, GtkLibrary.gssize pos, Pointer<GtkLibrary.gchar > val, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_string_insert_len(Pointer.getPeer(string), Pointer.getPeer(pos), Pointer.getPeer(val), Pointer.getPeer(len)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_insert_len(@Ptr long string, @Ptr long pos, @Ptr long val, @Ptr long len);
	/**
	 * Original signature : <code>GString* g_string_append(GString*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:79</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_append(Pointer<GtkLibrary.GString > string, Pointer<GtkLibrary.gchar > val) {
		return Pointer.pointerToAddress(g_string_append(Pointer.getPeer(string), Pointer.getPeer(val)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_append(@Ptr long string, @Ptr long val);
	/**
	 * Original signature : <code>GString* g_string_append_len(GString*, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:82</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_append_len(Pointer<GtkLibrary.GString > string, Pointer<GtkLibrary.gchar > val, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_string_append_len(Pointer.getPeer(string), Pointer.getPeer(val), Pointer.getPeer(len)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_append_len(@Ptr long string, @Ptr long val, @Ptr long len);
	/**
	 * Original signature : <code>GString* g_string_append_c(GString*, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:86</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_append_c(Pointer<GtkLibrary.GString > string, GtkLibrary.gchar c) {
		return Pointer.pointerToAddress(g_string_append_c(Pointer.getPeer(string), Pointer.getPeer(c)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_append_c(@Ptr long string, @Ptr long c);
	/**
	 * Original signature : <code>GString* g_string_append_unichar(GString*, gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:89</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_append_unichar(Pointer<GtkLibrary.GString > string, GtkLibrary.gunichar wc) {
		return Pointer.pointerToAddress(g_string_append_unichar(Pointer.getPeer(string), Pointer.getPeer(wc)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_append_unichar(@Ptr long string, @Ptr long wc);
	/**
	 * Original signature : <code>GString* g_string_prepend(GString*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:92</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_prepend(Pointer<GtkLibrary.GString > string, Pointer<GtkLibrary.gchar > val) {
		return Pointer.pointerToAddress(g_string_prepend(Pointer.getPeer(string), Pointer.getPeer(val)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_prepend(@Ptr long string, @Ptr long val);
	/**
	 * Original signature : <code>GString* g_string_prepend_c(GString*, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:95</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_prepend_c(Pointer<GtkLibrary.GString > string, GtkLibrary.gchar c) {
		return Pointer.pointerToAddress(g_string_prepend_c(Pointer.getPeer(string), Pointer.getPeer(c)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_prepend_c(@Ptr long string, @Ptr long c);
	/**
	 * Original signature : <code>GString* g_string_prepend_unichar(GString*, gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:98</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_prepend_unichar(Pointer<GtkLibrary.GString > string, GtkLibrary.gunichar wc) {
		return Pointer.pointerToAddress(g_string_prepend_unichar(Pointer.getPeer(string), Pointer.getPeer(wc)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_prepend_unichar(@Ptr long string, @Ptr long wc);
	/**
	 * Original signature : <code>GString* g_string_prepend_len(GString*, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:101</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_prepend_len(Pointer<GtkLibrary.GString > string, Pointer<GtkLibrary.gchar > val, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_string_prepend_len(Pointer.getPeer(string), Pointer.getPeer(val), Pointer.getPeer(len)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_prepend_len(@Ptr long string, @Ptr long val, @Ptr long len);
	/**
	 * Original signature : <code>GString* g_string_insert(GString*, gssize, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:105</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_insert(Pointer<GtkLibrary.GString > string, GtkLibrary.gssize pos, Pointer<GtkLibrary.gchar > val) {
		return Pointer.pointerToAddress(g_string_insert(Pointer.getPeer(string), Pointer.getPeer(pos), Pointer.getPeer(val)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_insert(@Ptr long string, @Ptr long pos, @Ptr long val);
	/**
	 * Original signature : <code>GString* g_string_insert_c(GString*, gssize, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:109</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_insert_c(Pointer<GtkLibrary.GString > string, GtkLibrary.gssize pos, GtkLibrary.gchar c) {
		return Pointer.pointerToAddress(g_string_insert_c(Pointer.getPeer(string), Pointer.getPeer(pos), Pointer.getPeer(c)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_insert_c(@Ptr long string, @Ptr long pos, @Ptr long c);
	/**
	 * Original signature : <code>GString* g_string_insert_unichar(GString*, gssize, gunichar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:113</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_insert_unichar(Pointer<GtkLibrary.GString > string, GtkLibrary.gssize pos, GtkLibrary.gunichar wc) {
		return Pointer.pointerToAddress(g_string_insert_unichar(Pointer.getPeer(string), Pointer.getPeer(pos), Pointer.getPeer(wc)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_insert_unichar(@Ptr long string, @Ptr long pos, @Ptr long wc);
	/**
	 * Original signature : <code>GString* g_string_overwrite(GString*, gsize, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:117</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_overwrite(Pointer<GtkLibrary.GString > string, gsize pos, Pointer<GtkLibrary.gchar > val) {
		return Pointer.pointerToAddress(g_string_overwrite(Pointer.getPeer(string), Pointer.getPeer(pos), Pointer.getPeer(val)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_overwrite(@Ptr long string, @Ptr long pos, @Ptr long val);
	/**
	 * Original signature : <code>GString* g_string_overwrite_len(GString*, gsize, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:121</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_overwrite_len(Pointer<GtkLibrary.GString > string, gsize pos, Pointer<GtkLibrary.gchar > val, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_string_overwrite_len(Pointer.getPeer(string), Pointer.getPeer(pos), Pointer.getPeer(val), Pointer.getPeer(len)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_overwrite_len(@Ptr long string, @Ptr long pos, @Ptr long val, @Ptr long len);
	/**
	 * Original signature : <code>GString* g_string_erase(GString*, gssize, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:126</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_erase(Pointer<GtkLibrary.GString > string, GtkLibrary.gssize pos, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_string_erase(Pointer.getPeer(string), Pointer.getPeer(pos), Pointer.getPeer(len)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_erase(@Ptr long string, @Ptr long pos, @Ptr long len);
	/**
	 * Original signature : <code>GString* g_string_ascii_down(GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:130</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_ascii_down(Pointer<GtkLibrary.GString > string) {
		return Pointer.pointerToAddress(g_string_ascii_down(Pointer.getPeer(string)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_ascii_down(@Ptr long string);
	/**
	 * Original signature : <code>GString* g_string_ascii_up(GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:132</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_ascii_up(Pointer<GtkLibrary.GString > string) {
		return Pointer.pointerToAddress(g_string_ascii_up(Pointer.getPeer(string)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_ascii_up(@Ptr long string);
	/**
	 * Original signature : <code>void g_string_vprintf(GString*, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:134</i>
	 */
	public static void g_string_vprintf(Pointer<GtkLibrary.GString > string, Pointer<GtkLibrary.gchar > format, GtkLibrary.__builtin_va_list args) {
		g_string_vprintf(Pointer.getPeer(string), Pointer.getPeer(format), Pointer.getPeer(args));
	}
	protected native static void g_string_vprintf(@Ptr long string, @Ptr long format, @Ptr long args);
	/**
	 * Original signature : <code>void g_string_printf(GString*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:139</i>
	 */
	public static void g_string_printf(Pointer<GtkLibrary.GString > string, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		g_string_printf(Pointer.getPeer(string), Pointer.getPeer(format), varargs);
	}
	protected native static void g_string_printf(@Ptr long string, @Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>void g_string_append_vprintf(GString*, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:143</i>
	 */
	public static void g_string_append_vprintf(Pointer<GtkLibrary.GString > string, Pointer<GtkLibrary.gchar > format, GtkLibrary.__builtin_va_list args) {
		g_string_append_vprintf(Pointer.getPeer(string), Pointer.getPeer(format), Pointer.getPeer(args));
	}
	protected native static void g_string_append_vprintf(@Ptr long string, @Ptr long format, @Ptr long args);
	/**
	 * Original signature : <code>void g_string_append_printf(GString*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:148</i>
	 */
	public static void g_string_append_printf(Pointer<GtkLibrary.GString > string, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		g_string_append_printf(Pointer.getPeer(string), Pointer.getPeer(format), varargs);
	}
	protected native static void g_string_append_printf(@Ptr long string, @Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>GString* g_string_append_uri_escaped(GString*, const gchar*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:152</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_append_uri_escaped(Pointer<GtkLibrary.GString > string, Pointer<GtkLibrary.gchar > unescaped, Pointer<GtkLibrary.gchar > reserved_chars_allowed, GtkLibrary.gboolean allow_utf8) {
		return Pointer.pointerToAddress(g_string_append_uri_escaped(Pointer.getPeer(string), Pointer.getPeer(unescaped), Pointer.getPeer(reserved_chars_allowed), Pointer.getPeer(allow_utf8)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_append_uri_escaped(@Ptr long string, @Ptr long unescaped, @Ptr long reserved_chars_allowed, @Ptr long allow_utf8);
	/**
	 * Original signature : <code>GString* g_string_down(GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:177</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_down(Pointer<GtkLibrary.GString > string) {
		return Pointer.pointerToAddress(g_string_down(Pointer.getPeer(string)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_down(@Ptr long string);
	/**
	 * Original signature : <code>GString* g_string_up(GString*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstring.h:179</i>
	 */
	public static Pointer<GtkLibrary.GString > g_string_up(Pointer<GtkLibrary.GString > string) {
		return Pointer.pointerToAddress(g_string_up(Pointer.getPeer(string)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_string_up(@Ptr long string);
	/**
	 * Original signature : <code>void g_io_channel_init(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:158</i>
	 */
	public static void g_io_channel_init(Pointer<GIOChannel > channel) {
		g_io_channel_init(Pointer.getPeer(channel));
	}
	protected native static void g_io_channel_init(@Ptr long channel);
	/**
	 * Original signature : <code>GIOChannel* g_io_channel_ref(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:160</i>
	 */
	public static Pointer<GIOChannel > g_io_channel_ref(Pointer<GIOChannel > channel) {
		return Pointer.pointerToAddress(g_io_channel_ref(Pointer.getPeer(channel)), GIOChannel.class);
	}
	@Ptr 
	protected native static long g_io_channel_ref(@Ptr long channel);
	/**
	 * Original signature : <code>void g_io_channel_unref(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:162</i>
	 */
	public static void g_io_channel_unref(Pointer<GIOChannel > channel) {
		g_io_channel_unref(Pointer.getPeer(channel));
	}
	protected native static void g_io_channel_unref(@Ptr long channel);
	/**
	 * Original signature : <code>GIOError g_io_channel_read(GIOChannel*, gchar*, gsize, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:165</i>
	 */
	public static GtkLibrary.GIOError g_io_channel_read(Pointer<GIOChannel > channel, Pointer<GtkLibrary.gchar > buf, gsize count, Pointer<gsize > bytes_read) {
		return Pointer.pointerToAddress(g_io_channel_read(Pointer.getPeer(channel), Pointer.getPeer(buf), Pointer.getPeer(count), Pointer.getPeer(bytes_read)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_read(@Ptr long channel, @Ptr long buf, @Ptr long count, @Ptr long bytes_read);
	/**
	 * Original signature : <code>GIOError g_io_channel_write(GIOChannel*, const gchar*, gsize, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:171</i>
	 */
	public static GtkLibrary.GIOError g_io_channel_write(Pointer<GIOChannel > channel, Pointer<GtkLibrary.gchar > buf, gsize count, Pointer<gsize > bytes_written) {
		return Pointer.pointerToAddress(g_io_channel_write(Pointer.getPeer(channel), Pointer.getPeer(buf), Pointer.getPeer(count), Pointer.getPeer(bytes_written)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_write(@Ptr long channel, @Ptr long buf, @Ptr long count, @Ptr long bytes_written);
	/**
	 * Original signature : <code>GIOError g_io_channel_seek(GIOChannel*, gint64, GSeekType)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:177</i>
	 */
	public static GtkLibrary.GIOError g_io_channel_seek(Pointer<GIOChannel > channel, gint64 offset, GSeekType type) {
		return Pointer.pointerToAddress(g_io_channel_seek(Pointer.getPeer(channel), Pointer.getPeer(offset), Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_seek(@Ptr long channel, @Ptr long offset, @Ptr long type);
	/**
	 * Original signature : <code>void g_io_channel_close(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:182</i>
	 */
	public static void g_io_channel_close(Pointer<GIOChannel > channel) {
		g_io_channel_close(Pointer.getPeer(channel));
	}
	protected native static void g_io_channel_close(@Ptr long channel);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_shutdown(GIOChannel*, gboolean, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:185</i>
	 */
	public static GIOStatus g_io_channel_shutdown(Pointer<GIOChannel > channel, GtkLibrary.gboolean flush, Pointer<Pointer<GError > > err) {
		return Pointer.pointerToAddress(g_io_channel_shutdown(Pointer.getPeer(channel), Pointer.getPeer(flush), Pointer.getPeer(err)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_shutdown(@Ptr long channel, @Ptr long flush, @Ptr long err);
	/**
	 * Original signature : <code>guint g_io_add_watch_full(GIOChannel*, gint, GIOCondition, GIOFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:189</i>
	 */
	public static guint g_io_add_watch_full(Pointer<GIOChannel > channel, GtkLibrary.gint priority, GIOCondition condition, GtkLibrary.GIOFunc func, GtkLibrary.gpointer user_data, GtkLibrary.GDestroyNotify notify$) {
		return Pointer.pointerToAddress(g_io_add_watch_full(Pointer.getPeer(channel), Pointer.getPeer(priority), Pointer.getPeer(condition), Pointer.getPeer(func), Pointer.getPeer(user_data), Pointer.getPeer(notify$)), .class);
	}
	@Ptr 
	protected native static long g_io_add_watch_full(@Ptr long channel, @Ptr long priority, @Ptr long condition, @Ptr long func, @Ptr long user_data, @Ptr long notify$);
	/**
	 * Original signature : <code>GSource* g_io_create_watch(GIOChannel*, GIOCondition)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:196</i>
	 */
	public static Pointer<GtkLibrary.GSource > g_io_create_watch(Pointer<GIOChannel > channel, GIOCondition condition) {
		return Pointer.pointerToAddress(g_io_create_watch(Pointer.getPeer(channel), Pointer.getPeer(condition)), GtkLibrary.GSource.class);
	}
	@Ptr 
	protected native static long g_io_create_watch(@Ptr long channel, @Ptr long condition);
	/**
	 * Original signature : <code>guint g_io_add_watch(GIOChannel*, GIOCondition, GIOFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:199</i>
	 */
	public static guint g_io_add_watch(Pointer<GIOChannel > channel, GIOCondition condition, GtkLibrary.GIOFunc func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_io_add_watch(Pointer.getPeer(channel), Pointer.getPeer(condition), Pointer.getPeer(func), Pointer.getPeer(user_data)), .class);
	}
	@Ptr 
	protected native static long g_io_add_watch(@Ptr long channel, @Ptr long condition, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_io_channel_set_buffer_size(GIOChannel*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:208</i>
	 */
	public static void g_io_channel_set_buffer_size(Pointer<GIOChannel > channel, gsize size) {
		g_io_channel_set_buffer_size(Pointer.getPeer(channel), Pointer.getPeer(size));
	}
	protected native static void g_io_channel_set_buffer_size(@Ptr long channel, @Ptr long size);
	/**
	 * Original signature : <code>gsize g_io_channel_get_buffer_size(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:211</i>
	 */
	public static gsize g_io_channel_get_buffer_size(Pointer<GIOChannel > channel) {
		return Pointer.pointerToAddress(g_io_channel_get_buffer_size(Pointer.getPeer(channel)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_get_buffer_size(@Ptr long channel);
	/**
	 * Original signature : <code>GIOCondition g_io_channel_get_buffer_condition(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:213</i>
	 */
	public static GIOCondition g_io_channel_get_buffer_condition(Pointer<GIOChannel > channel) {
		return Pointer.pointerToAddress(g_io_channel_get_buffer_condition(Pointer.getPeer(channel)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_get_buffer_condition(@Ptr long channel);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_set_flags(GIOChannel*, GIOFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:215</i>
	 */
	public static GIOStatus g_io_channel_set_flags(Pointer<GIOChannel > channel, GIOFlags flags, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_set_flags(Pointer.getPeer(channel), Pointer.getPeer(flags), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_set_flags(@Ptr long channel, @Ptr long flags, @Ptr long error);
	/**
	 * Original signature : <code>GIOFlags g_io_channel_get_flags(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:219</i>
	 */
	public static GIOFlags g_io_channel_get_flags(Pointer<GIOChannel > channel) {
		return Pointer.pointerToAddress(g_io_channel_get_flags(Pointer.getPeer(channel)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_get_flags(@Ptr long channel);
	/**
	 * Original signature : <code>void g_io_channel_set_line_term(GIOChannel*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:221</i>
	 */
	public static void g_io_channel_set_line_term(Pointer<GIOChannel > channel, Pointer<GtkLibrary.gchar > line_term, GtkLibrary.gint length) {
		g_io_channel_set_line_term(Pointer.getPeer(channel), Pointer.getPeer(line_term), Pointer.getPeer(length));
	}
	protected native static void g_io_channel_set_line_term(@Ptr long channel, @Ptr long line_term, @Ptr long length);
	/**
	 * Original signature : <code>gchar* g_io_channel_get_line_term(GIOChannel*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:225</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_io_channel_get_line_term(Pointer<GIOChannel > channel, Pointer<GtkLibrary.gint > length) {
		return Pointer.pointerToAddress(g_io_channel_get_line_term(Pointer.getPeer(channel), Pointer.getPeer(length)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_io_channel_get_line_term(@Ptr long channel, @Ptr long length);
	/**
	 * Original signature : <code>void g_io_channel_set_buffered(GIOChannel*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:228</i>
	 */
	public static void g_io_channel_set_buffered(Pointer<GIOChannel > channel, GtkLibrary.gboolean buffered) {
		g_io_channel_set_buffered(Pointer.getPeer(channel), Pointer.getPeer(buffered));
	}
	protected native static void g_io_channel_set_buffered(@Ptr long channel, @Ptr long buffered);
	/**
	 * Original signature : <code>gboolean g_io_channel_get_buffered(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:231</i>
	 */
	public static GtkLibrary.gboolean g_io_channel_get_buffered(Pointer<GIOChannel > channel) {
		return Pointer.pointerToAddress(g_io_channel_get_buffered(Pointer.getPeer(channel)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_get_buffered(@Ptr long channel);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_set_encoding(GIOChannel*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:233</i>
	 */
	public static GIOStatus g_io_channel_set_encoding(Pointer<GIOChannel > channel, Pointer<GtkLibrary.gchar > encoding, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_set_encoding(Pointer.getPeer(channel), Pointer.getPeer(encoding), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_set_encoding(@Ptr long channel, @Ptr long encoding, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_io_channel_get_encoding(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:237</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_io_channel_get_encoding(Pointer<GIOChannel > channel) {
		return Pointer.pointerToAddress(g_io_channel_get_encoding(Pointer.getPeer(channel)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_io_channel_get_encoding(@Ptr long channel);
	/**
	 * Original signature : <code>void g_io_channel_set_close_on_unref(GIOChannel*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:239</i>
	 */
	public static void g_io_channel_set_close_on_unref(Pointer<GIOChannel > channel, GtkLibrary.gboolean do_close) {
		g_io_channel_set_close_on_unref(Pointer.getPeer(channel), Pointer.getPeer(do_close));
	}
	protected native static void g_io_channel_set_close_on_unref(@Ptr long channel, @Ptr long do_close);
	/**
	 * Original signature : <code>gboolean g_io_channel_get_close_on_unref(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:242</i>
	 */
	public static GtkLibrary.gboolean g_io_channel_get_close_on_unref(Pointer<GIOChannel > channel) {
		return Pointer.pointerToAddress(g_io_channel_get_close_on_unref(Pointer.getPeer(channel)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_get_close_on_unref(@Ptr long channel);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_flush(GIOChannel*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:246</i>
	 */
	public static GIOStatus g_io_channel_flush(Pointer<GIOChannel > channel, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_flush(Pointer.getPeer(channel), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_flush(@Ptr long channel, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_read_line(GIOChannel*, gchar**, gsize*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:249</i>
	 */
	public static GIOStatus g_io_channel_read_line(Pointer<GIOChannel > channel, Pointer<Pointer<GtkLibrary.gchar > > str_return, Pointer<gsize > length, Pointer<gsize > terminator_pos, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_read_line(Pointer.getPeer(channel), Pointer.getPeer(str_return), Pointer.getPeer(length), Pointer.getPeer(terminator_pos), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_read_line(@Ptr long channel, @Ptr long str_return, @Ptr long length, @Ptr long terminator_pos, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_read_line_string(GIOChannel*, GString*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:255</i>
	 */
	public static GIOStatus g_io_channel_read_line_string(Pointer<GIOChannel > channel, Pointer<GtkLibrary.GString > buffer, Pointer<gsize > terminator_pos, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_read_line_string(Pointer.getPeer(channel), Pointer.getPeer(buffer), Pointer.getPeer(terminator_pos), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_read_line_string(@Ptr long channel, @Ptr long buffer, @Ptr long terminator_pos, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_read_to_end(GIOChannel*, gchar**, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:260</i>
	 */
	public static GIOStatus g_io_channel_read_to_end(Pointer<GIOChannel > channel, Pointer<Pointer<GtkLibrary.gchar > > str_return, Pointer<gsize > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_read_to_end(Pointer.getPeer(channel), Pointer.getPeer(str_return), Pointer.getPeer(length), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_read_to_end(@Ptr long channel, @Ptr long str_return, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_read_chars(GIOChannel*, gchar*, gsize, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:265</i>
	 */
	public static GIOStatus g_io_channel_read_chars(Pointer<GIOChannel > channel, Pointer<GtkLibrary.gchar > buf, gsize count, Pointer<gsize > bytes_read, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_read_chars(Pointer.getPeer(channel), Pointer.getPeer(buf), Pointer.getPeer(count), Pointer.getPeer(bytes_read), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_read_chars(@Ptr long channel, @Ptr long buf, @Ptr long count, @Ptr long bytes_read, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_read_unichar(GIOChannel*, gunichar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:271</i>
	 */
	public static GIOStatus g_io_channel_read_unichar(Pointer<GIOChannel > channel, Pointer<GtkLibrary.gunichar > thechar, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_read_unichar(Pointer.getPeer(channel), Pointer.getPeer(thechar), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_read_unichar(@Ptr long channel, @Ptr long thechar, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_write_chars(GIOChannel*, const gchar*, gssize, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:275</i>
	 */
	public static GIOStatus g_io_channel_write_chars(Pointer<GIOChannel > channel, Pointer<GtkLibrary.gchar > buf, GtkLibrary.gssize count, Pointer<gsize > bytes_written, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_write_chars(Pointer.getPeer(channel), Pointer.getPeer(buf), Pointer.getPeer(count), Pointer.getPeer(bytes_written), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_write_chars(@Ptr long channel, @Ptr long buf, @Ptr long count, @Ptr long bytes_written, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_write_unichar(GIOChannel*, gunichar, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:281</i>
	 */
	public static GIOStatus g_io_channel_write_unichar(Pointer<GIOChannel > channel, GtkLibrary.gunichar thechar, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_write_unichar(Pointer.getPeer(channel), Pointer.getPeer(thechar), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_write_unichar(@Ptr long channel, @Ptr long thechar, @Ptr long error);
	/**
	 * Original signature : <code>GIOStatus g_io_channel_seek_position(GIOChannel*, gint64, GSeekType, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:285</i>
	 */
	public static GIOStatus g_io_channel_seek_position(Pointer<GIOChannel > channel, gint64 offset, GSeekType type, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_seek_position(Pointer.getPeer(channel), Pointer.getPeer(offset), Pointer.getPeer(type), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_seek_position(@Ptr long channel, @Ptr long offset, @Ptr long type, @Ptr long error);
	/**
	 * Original signature : <code>GIOChannel* g_io_channel_new_file(const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:290</i>
	 */
	public static Pointer<GIOChannel > g_io_channel_new_file(Pointer<GtkLibrary.gchar > filename, Pointer<GtkLibrary.gchar > mode, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_io_channel_new_file(Pointer.getPeer(filename), Pointer.getPeer(mode), Pointer.getPeer(error)), GIOChannel.class);
	}
	@Ptr 
	protected native static long g_io_channel_new_file(@Ptr long filename, @Ptr long mode, @Ptr long error);
	/**
	 * Original signature : <code>GQuark g_io_channel_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:297</i>
	 */
	public static GtkLibrary.GQuark g_io_channel_error_quark() {
		return Pointer.pointerToAddress(g_io_channel_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_io_channel_error_quark$2();
	/**
	 * Original signature : <code>GIOChannelError g_io_channel_error_from_errno(gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:299</i>
	 */
	public static GtkLibrary.GIOChannelError g_io_channel_error_from_errno(GtkLibrary.gint en) {
		return Pointer.pointerToAddress(g_io_channel_error_from_errno(Pointer.getPeer(en)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_error_from_errno(@Ptr long en);
	/**
	 * On Unix, IO channels created with this function for any file<br>
	 * descriptor or socket.<br>
	 * * On Win32, this can be used either for files opened with the MSVCRT<br>
	 * (the Microsoft run-time C library) _open() or _pipe, including file<br>
	 * descriptors 0, 1 and 2 (corresponding to stdin, stdout and stderr),<br>
	 * or for Winsock SOCKETs. If the parameter is a legal file<br>
	 * descriptor, it is assumed to be such, otherwise it should be a<br>
	 * SOCKET. This relies on SOCKETs and file descriptors not<br>
	 * overlapping. If you want to be certain, call either<br>
	 * g_io_channel_win32_new_fd() or g_io_channel_win32_new_socket()<br>
	 * instead as appropriate.<br>
	 * * The term file descriptor as used in the context of Win32 refers to<br>
	 * the emulated Unix-like file descriptors MSVCRT provides. The native<br>
	 * corresponding concept is file HANDLE. There isn't as of yet a way to<br>
	 * get GIOChannels for Win32 file HANDLEs.<br>
	 * Original signature : <code>GIOChannel* g_io_channel_unix_new(int)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:320</i>
	 */
	public static Pointer<GIOChannel > g_io_channel_unix_new(int fd) {
		return Pointer.pointerToAddress(g_io_channel_unix_new$2(fd), GIOChannel.class);
	}
	@Ptr 
	protected native static long g_io_channel_unix_new$2(int fd);
	/**
	 * Original signature : <code>gint g_io_channel_unix_get_fd(GIOChannel*)</code><br>
	 * <i>native declaration : glib-2.0/glib/giochannel.h:322</i>
	 */
	public static GtkLibrary.gint g_io_channel_unix_get_fd(Pointer<GIOChannel > channel) {
		return Pointer.pointerToAddress(g_io_channel_unix_get_fd(Pointer.getPeer(channel)), .class);
	}
	@Ptr 
	protected native static long g_io_channel_unix_get_fd(@Ptr long channel);
	/**
	 * Original signature : <code>GQuark g_key_file_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:16</i>
	 */
	public static GtkLibrary.GQuark g_key_file_error_quark() {
		return Pointer.pointerToAddress(g_key_file_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_key_file_error_quark$2();
	/**
	 * Original signature : <code>GKeyFile* g_key_file_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:28</i>
	 */
	public static Pointer<GtkLibrary.GKeyFile > g_key_file_new() {
		return Pointer.pointerToAddress(g_key_file_new$2(), GtkLibrary.GKeyFile.class);
	}
	@Ptr 
	protected native static long g_key_file_new$2();
	/**
	 * Original signature : <code>GKeyFile* g_key_file_ref(GKeyFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:30</i>
	 */
	public static Pointer<GtkLibrary.GKeyFile > g_key_file_ref(Pointer<GtkLibrary.GKeyFile > key_file) {
		return Pointer.pointerToAddress(g_key_file_ref(Pointer.getPeer(key_file)), GtkLibrary.GKeyFile.class);
	}
	@Ptr 
	protected native static long g_key_file_ref(@Ptr long key_file);
	/**
	 * Original signature : <code>void g_key_file_unref(GKeyFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:32</i>
	 */
	public static void g_key_file_unref(Pointer<GtkLibrary.GKeyFile > key_file) {
		g_key_file_unref(Pointer.getPeer(key_file));
	}
	protected native static void g_key_file_unref(@Ptr long key_file);
	/**
	 * Original signature : <code>void g_key_file_free(GKeyFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:34</i>
	 */
	public static void g_key_file_free(Pointer<GtkLibrary.GKeyFile > key_file) {
		g_key_file_free(Pointer.getPeer(key_file));
	}
	protected native static void g_key_file_free(@Ptr long key_file);
	/**
	 * Original signature : <code>void g_key_file_set_list_separator(GKeyFile*, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:36</i>
	 */
	public static void g_key_file_set_list_separator(Pointer<GtkLibrary.GKeyFile > key_file, GtkLibrary.gchar separator) {
		g_key_file_set_list_separator(Pointer.getPeer(key_file), Pointer.getPeer(separator));
	}
	protected native static void g_key_file_set_list_separator(@Ptr long key_file, @Ptr long separator);
	/**
	 * Original signature : <code>gboolean g_key_file_load_from_file(GKeyFile*, const gchar*, GKeyFileFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:39</i>
	 */
	public static GtkLibrary.gboolean g_key_file_load_from_file(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > file, GtkLibrary.GKeyFileFlags flags, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_load_from_file(Pointer.getPeer(key_file), Pointer.getPeer(file), Pointer.getPeer(flags), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_load_from_file(@Ptr long key_file, @Ptr long file, @Ptr long flags, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_load_from_data(GKeyFile*, const gchar*, gsize, GKeyFileFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:44</i>
	 */
	public static GtkLibrary.gboolean g_key_file_load_from_data(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > data, gsize length, GtkLibrary.GKeyFileFlags flags, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_load_from_data(Pointer.getPeer(key_file), Pointer.getPeer(data), Pointer.getPeer(length), Pointer.getPeer(flags), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_load_from_data(@Ptr long key_file, @Ptr long data, @Ptr long length, @Ptr long flags, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_load_from_dirs(GKeyFile*, const gchar*, const gchar**, gchar**, GKeyFileFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:50</i>
	 */
	public static GtkLibrary.gboolean g_key_file_load_from_dirs(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > file, Pointer<Pointer<GtkLibrary.gchar > > search_dirs, Pointer<Pointer<GtkLibrary.gchar > > full_path, GtkLibrary.GKeyFileFlags flags, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_load_from_dirs(Pointer.getPeer(key_file), Pointer.getPeer(file), Pointer.getPeer(search_dirs), Pointer.getPeer(full_path), Pointer.getPeer(flags), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_load_from_dirs(@Ptr long key_file, @Ptr long file, @Ptr long search_dirs, @Ptr long full_path, @Ptr long flags, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_load_from_data_dirs(GKeyFile*, const gchar*, gchar**, GKeyFileFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:57</i>
	 */
	public static GtkLibrary.gboolean g_key_file_load_from_data_dirs(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > file, Pointer<Pointer<GtkLibrary.gchar > > full_path, GtkLibrary.GKeyFileFlags flags, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_load_from_data_dirs(Pointer.getPeer(key_file), Pointer.getPeer(file), Pointer.getPeer(full_path), Pointer.getPeer(flags), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_load_from_data_dirs(@Ptr long key_file, @Ptr long file, @Ptr long full_path, @Ptr long flags, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_key_file_to_data(GKeyFile*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:63</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_key_file_to_data(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<gsize > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_to_data(Pointer.getPeer(key_file), Pointer.getPeer(length), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_key_file_to_data(@Ptr long key_file, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_key_file_get_start_group(GKeyFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:67</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_key_file_get_start_group(Pointer<GtkLibrary.GKeyFile > key_file) {
		return Pointer.pointerToAddress(g_key_file_get_start_group(Pointer.getPeer(key_file)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_key_file_get_start_group(@Ptr long key_file);
	/**
	 * Original signature : <code>gchar** g_key_file_get_groups(GKeyFile*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:69</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_key_file_get_groups(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<gsize > length) {
		return Pointer.pointerToAddress(g_key_file_get_groups(Pointer.getPeer(key_file), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_key_file_get_groups(@Ptr long key_file, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_key_file_get_keys(GKeyFile*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:72</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_key_file_get_keys(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<gsize > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_keys(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(length), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_key_file_get_keys(@Ptr long key_file, @Ptr long group_name, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_has_group(GKeyFile*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:77</i>
	 */
	public static GtkLibrary.gboolean g_key_file_has_group(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name) {
		return Pointer.pointerToAddress(g_key_file_has_group(Pointer.getPeer(key_file), Pointer.getPeer(group_name)), .class);
	}
	@Ptr 
	protected native static long g_key_file_has_group(@Ptr long key_file, @Ptr long group_name);
	/**
	 * Original signature : <code>gboolean g_key_file_has_key(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:80</i>
	 */
	public static GtkLibrary.gboolean g_key_file_has_key(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_has_key(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_has_key(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_key_file_get_value(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:85</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_key_file_get_value(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_value(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_key_file_get_value(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_value(GKeyFile*, const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:90</i>
	 */
	public static void g_key_file_set_value(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<GtkLibrary.gchar > value) {
		g_key_file_set_value(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_key_file_set_value(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>gchar* g_key_file_get_string(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:95</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_key_file_get_string(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_string(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_key_file_get_string(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_string(GKeyFile*, const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:100</i>
	 */
	public static void g_key_file_set_string(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<GtkLibrary.gchar > string) {
		g_key_file_set_string(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(string));
	}
	protected native static void g_key_file_set_string(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long string);
	/**
	 * Original signature : <code>gchar* g_key_file_get_locale_string(GKeyFile*, const gchar*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:105</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_key_file_get_locale_string(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<GtkLibrary.gchar > locale, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_locale_string(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(locale), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_key_file_get_locale_string(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long locale, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_locale_string(GKeyFile*, const gchar*, const gchar*, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:111</i>
	 */
	public static void g_key_file_set_locale_string(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<GtkLibrary.gchar > locale, Pointer<GtkLibrary.gchar > string) {
		g_key_file_set_locale_string(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(locale), Pointer.getPeer(string));
	}
	protected native static void g_key_file_set_locale_string(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long locale, @Ptr long string);
	/**
	 * Original signature : <code>gboolean g_key_file_get_boolean(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:117</i>
	 */
	public static GtkLibrary.gboolean g_key_file_get_boolean(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_boolean(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_get_boolean(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_boolean(GKeyFile*, const gchar*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:122</i>
	 */
	public static void g_key_file_set_boolean(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, GtkLibrary.gboolean value) {
		g_key_file_set_boolean(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_key_file_set_boolean(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>gint g_key_file_get_integer(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:127</i>
	 */
	public static GtkLibrary.gint g_key_file_get_integer(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_integer(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_get_integer(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_integer(GKeyFile*, const gchar*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:132</i>
	 */
	public static void g_key_file_set_integer(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, GtkLibrary.gint value) {
		g_key_file_set_integer(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_key_file_set_integer(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>gint64 g_key_file_get_int64(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:137</i>
	 */
	public static gint64 g_key_file_get_int64(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_int64(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_get_int64(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_int64(GKeyFile*, const gchar*, const gchar*, gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:142</i>
	 */
	public static void g_key_file_set_int64(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, gint64 value) {
		g_key_file_set_int64(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_key_file_set_int64(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>guint64 g_key_file_get_uint64(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:147</i>
	 */
	public static GtkLibrary.guint64 g_key_file_get_uint64(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_uint64(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_get_uint64(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_uint64(GKeyFile*, const gchar*, const gchar*, guint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:152</i>
	 */
	public static void g_key_file_set_uint64(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, GtkLibrary.guint64 value) {
		g_key_file_set_uint64(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_key_file_set_uint64(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>gdouble g_key_file_get_double(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:157</i>
	 */
	public static GtkLibrary.gdouble g_key_file_get_double(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_double(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_get_double(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_double(GKeyFile*, const gchar*, const gchar*, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:162</i>
	 */
	public static void g_key_file_set_double(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, GtkLibrary.gdouble value) {
		g_key_file_set_double(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_key_file_set_double(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>gchar** g_key_file_get_string_list(GKeyFile*, const gchar*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:167</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_key_file_get_string_list(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<gsize > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_string_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(length), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_key_file_get_string_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_string_list(GKeyFile*, const gchar*, const gchar*, const const gchar*[], gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:173</i>
	 */
	public static void g_key_file_set_string_list(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<Pointer<GtkLibrary.gchar > > list, gsize length) {
		g_key_file_set_string_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(list), Pointer.getPeer(length));
	}
	protected native static void g_key_file_set_string_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long list, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_key_file_get_locale_string_list(GKeyFile*, const gchar*, const gchar*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:179</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_key_file_get_locale_string_list(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<GtkLibrary.gchar > locale, Pointer<gsize > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_locale_string_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(locale), Pointer.getPeer(length), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_key_file_get_locale_string_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long locale, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_locale_string_list(GKeyFile*, const gchar*, const gchar*, const gchar*, const const gchar*[], gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:186</i>
	 */
	public static void g_key_file_set_locale_string_list(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<GtkLibrary.gchar > locale, Pointer<Pointer<GtkLibrary.gchar > > list, gsize length) {
		g_key_file_set_locale_string_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(locale), Pointer.getPeer(list), Pointer.getPeer(length));
	}
	protected native static void g_key_file_set_locale_string_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long locale, @Ptr long list, @Ptr long length);
	/**
	 * Original signature : <code>gboolean* g_key_file_get_boolean_list(GKeyFile*, const gchar*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:193</i>
	 */
	public static Pointer<GtkLibrary.gboolean > g_key_file_get_boolean_list(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<gsize > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_boolean_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(length), Pointer.getPeer(error)), GtkLibrary.gboolean.class);
	}
	@Ptr 
	protected native static long g_key_file_get_boolean_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_boolean_list(GKeyFile*, const gchar*, const gchar*, gboolean[], gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:199</i>
	 */
	public static void g_key_file_set_boolean_list(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<GtkLibrary.gboolean > list, gsize length) {
		g_key_file_set_boolean_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(list), Pointer.getPeer(length));
	}
	protected native static void g_key_file_set_boolean_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long list, @Ptr long length);
	/**
	 * Original signature : <code>gint* g_key_file_get_integer_list(GKeyFile*, const gchar*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:205</i>
	 */
	public static Pointer<GtkLibrary.gint > g_key_file_get_integer_list(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<gsize > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_integer_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(length), Pointer.getPeer(error)), GtkLibrary.gint.class);
	}
	@Ptr 
	protected native static long g_key_file_get_integer_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_double_list(GKeyFile*, const gchar*, const gchar*, gdouble[], gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:211</i>
	 */
	public static void g_key_file_set_double_list(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<GtkLibrary.gdouble > list, gsize length) {
		g_key_file_set_double_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(list), Pointer.getPeer(length));
	}
	protected native static void g_key_file_set_double_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long list, @Ptr long length);
	/**
	 * Original signature : <code>gdouble* g_key_file_get_double_list(GKeyFile*, const gchar*, const gchar*, gsize*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:217</i>
	 */
	public static Pointer<GtkLibrary.gdouble > g_key_file_get_double_list(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<gsize > length, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_double_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(length), Pointer.getPeer(error)), GtkLibrary.gdouble.class);
	}
	@Ptr 
	protected native static long g_key_file_get_double_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long length, @Ptr long error);
	/**
	 * Original signature : <code>void g_key_file_set_integer_list(GKeyFile*, const gchar*, const gchar*, gint[], gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:223</i>
	 */
	public static void g_key_file_set_integer_list(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<GtkLibrary.gint > list, gsize length) {
		g_key_file_set_integer_list(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(list), Pointer.getPeer(length));
	}
	protected native static void g_key_file_set_integer_list(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long list, @Ptr long length);
	/**
	 * Original signature : <code>gboolean g_key_file_set_comment(GKeyFile*, const gchar*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:229</i>
	 */
	public static GtkLibrary.gboolean g_key_file_set_comment(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<GtkLibrary.gchar > comment, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_set_comment(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(comment), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_set_comment(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long comment, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_key_file_get_comment(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:235</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_key_file_get_comment(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_get_comment(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_key_file_get_comment(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_remove_comment(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:241</i>
	 */
	public static GtkLibrary.gboolean g_key_file_remove_comment(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_remove_comment(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_remove_comment(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_remove_key(GKeyFile*, const gchar*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:246</i>
	 */
	public static GtkLibrary.gboolean g_key_file_remove_key(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<GtkLibrary.gchar > key, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_remove_key(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(key), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_remove_key(@Ptr long key_file, @Ptr long group_name, @Ptr long key, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_key_file_remove_group(GKeyFile*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gkeyfile.h:251</i>
	 */
	public static GtkLibrary.gboolean g_key_file_remove_group(Pointer<GtkLibrary.GKeyFile > key_file, Pointer<GtkLibrary.gchar > group_name, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_key_file_remove_group(Pointer.getPeer(key_file), Pointer.getPeer(group_name), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_key_file_remove_group(@Ptr long key_file, @Ptr long group_name, @Ptr long error);
	/**
	 * Original signature : <code>GMappedFile* g_mapped_file_new(const gchar*, gboolean, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:6</i>
	 */
	public static Pointer<GtkLibrary.GMappedFile > g_mapped_file_new(Pointer<GtkLibrary.gchar > filename, GtkLibrary.gboolean writable, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_mapped_file_new(Pointer.getPeer(filename), Pointer.getPeer(writable), Pointer.getPeer(error)), GtkLibrary.GMappedFile.class);
	}
	@Ptr 
	protected native static long g_mapped_file_new(@Ptr long filename, @Ptr long writable, @Ptr long error);
	/**
	 * Original signature : <code>GMappedFile* g_mapped_file_new_from_fd(gint, gboolean, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:10</i>
	 */
	public static Pointer<GtkLibrary.GMappedFile > g_mapped_file_new_from_fd(GtkLibrary.gint fd, GtkLibrary.gboolean writable, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_mapped_file_new_from_fd(Pointer.getPeer(fd), Pointer.getPeer(writable), Pointer.getPeer(error)), GtkLibrary.GMappedFile.class);
	}
	@Ptr 
	protected native static long g_mapped_file_new_from_fd(@Ptr long fd, @Ptr long writable, @Ptr long error);
	/**
	 * Original signature : <code>gsize g_mapped_file_get_length(GMappedFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:14</i>
	 */
	public static gsize g_mapped_file_get_length(Pointer<GtkLibrary.GMappedFile > file) {
		return Pointer.pointerToAddress(g_mapped_file_get_length(Pointer.getPeer(file)), .class);
	}
	@Ptr 
	protected native static long g_mapped_file_get_length(@Ptr long file);
	/**
	 * Original signature : <code>gchar* g_mapped_file_get_contents(GMappedFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:16</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_mapped_file_get_contents(Pointer<GtkLibrary.GMappedFile > file) {
		return Pointer.pointerToAddress(g_mapped_file_get_contents(Pointer.getPeer(file)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_mapped_file_get_contents(@Ptr long file);
	/**
	 * Original signature : <code>GBytes* g_mapped_file_get_bytes(GMappedFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:18</i>
	 */
	public static Pointer<GtkLibrary.GBytes > g_mapped_file_get_bytes(Pointer<GtkLibrary.GMappedFile > file) {
		return Pointer.pointerToAddress(g_mapped_file_get_bytes(Pointer.getPeer(file)), GtkLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_mapped_file_get_bytes(@Ptr long file);
	/**
	 * Original signature : <code>GMappedFile* g_mapped_file_ref(GMappedFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:20</i>
	 */
	public static Pointer<GtkLibrary.GMappedFile > g_mapped_file_ref(Pointer<GtkLibrary.GMappedFile > file) {
		return Pointer.pointerToAddress(g_mapped_file_ref(Pointer.getPeer(file)), GtkLibrary.GMappedFile.class);
	}
	@Ptr 
	protected native static long g_mapped_file_ref(@Ptr long file);
	/**
	 * Original signature : <code>void g_mapped_file_unref(GMappedFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:22</i>
	 */
	public static void g_mapped_file_unref(Pointer<GtkLibrary.GMappedFile > file) {
		g_mapped_file_unref(Pointer.getPeer(file));
	}
	protected native static void g_mapped_file_unref(@Ptr long file);
	/**
	 * Original signature : <code>void g_mapped_file_free(GMappedFile*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmappedfile.h:25</i>
	 */
	public static void g_mapped_file_free(Pointer<GtkLibrary.GMappedFile > file) {
		g_mapped_file_free(Pointer.getPeer(file));
	}
	protected native static void g_mapped_file_free(@Ptr long file);
	/**
	 * Original signature : <code>GQuark g_markup_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:43</i>
	 */
	public static GtkLibrary.GQuark g_markup_error_quark() {
		return Pointer.pointerToAddress(g_markup_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_markup_error_quark$2();
	/**
	 * Original signature : <code>GMarkupParseContext* g_markup_parse_context_new(const GMarkupParser*, GMarkupParseFlags, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:151</i>
	 */
	public static Pointer<GMarkupParseContext > g_markup_parse_context_new(Pointer<GtkLibrary.GMarkupParser > parser, GtkLibrary.GMarkupParseFlags flags, GtkLibrary.gpointer user_data, GtkLibrary.GDestroyNotify user_data_dnotify) {
		return Pointer.pointerToAddress(g_markup_parse_context_new(Pointer.getPeer(parser), Pointer.getPeer(flags), Pointer.getPeer(user_data), Pointer.getPeer(user_data_dnotify)), GMarkupParseContext.class);
	}
	@Ptr 
	protected native static long g_markup_parse_context_new(@Ptr long parser, @Ptr long flags, @Ptr long user_data, @Ptr long user_data_dnotify);
	/**
	 * Original signature : <code>GMarkupParseContext* g_markup_parse_context_ref(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:156</i>
	 */
	public static Pointer<GMarkupParseContext > g_markup_parse_context_ref(Pointer<GMarkupParseContext > context) {
		return Pointer.pointerToAddress(g_markup_parse_context_ref(Pointer.getPeer(context)), GMarkupParseContext.class);
	}
	@Ptr 
	protected native static long g_markup_parse_context_ref(@Ptr long context);
	/**
	 * Original signature : <code>void g_markup_parse_context_unref(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:158</i>
	 */
	public static void g_markup_parse_context_unref(Pointer<GMarkupParseContext > context) {
		g_markup_parse_context_unref(Pointer.getPeer(context));
	}
	protected native static void g_markup_parse_context_unref(@Ptr long context);
	/**
	 * Original signature : <code>void g_markup_parse_context_free(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:160</i>
	 */
	public static void g_markup_parse_context_free(Pointer<GMarkupParseContext > context) {
		g_markup_parse_context_free(Pointer.getPeer(context));
	}
	protected native static void g_markup_parse_context_free(@Ptr long context);
	/**
	 * Original signature : <code>gboolean g_markup_parse_context_parse(GMarkupParseContext*, const gchar*, gssize, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:162</i>
	 */
	public static GtkLibrary.gboolean g_markup_parse_context_parse(Pointer<GMarkupParseContext > context, Pointer<GtkLibrary.gchar > text, GtkLibrary.gssize text_len, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_markup_parse_context_parse(Pointer.getPeer(context), Pointer.getPeer(text), Pointer.getPeer(text_len), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_markup_parse_context_parse(@Ptr long context, @Ptr long text, @Ptr long text_len, @Ptr long error);
	/**
	 * Original signature : <code>void g_markup_parse_context_push(GMarkupParseContext*, const GMarkupParser*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:167</i>
	 */
	public static void g_markup_parse_context_push(Pointer<GMarkupParseContext > context, Pointer<GtkLibrary.GMarkupParser > parser, GtkLibrary.gpointer user_data) {
		g_markup_parse_context_push(Pointer.getPeer(context), Pointer.getPeer(parser), Pointer.getPeer(user_data));
	}
	protected native static void g_markup_parse_context_push(@Ptr long context, @Ptr long parser, @Ptr long user_data);
	/**
	 * Original signature : <code>gpointer g_markup_parse_context_pop(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:171</i>
	 */
	public static GtkLibrary.gpointer g_markup_parse_context_pop(Pointer<GMarkupParseContext > context) {
		return Pointer.pointerToAddress(g_markup_parse_context_pop(Pointer.getPeer(context)), .class);
	}
	@Ptr 
	protected native static long g_markup_parse_context_pop(@Ptr long context);
	/**
	 * Original signature : <code>gboolean g_markup_parse_context_end_parse(GMarkupParseContext*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:174</i>
	 */
	public static GtkLibrary.gboolean g_markup_parse_context_end_parse(Pointer<GMarkupParseContext > context, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_markup_parse_context_end_parse(Pointer.getPeer(context), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_markup_parse_context_end_parse(@Ptr long context, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_markup_parse_context_get_element(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:177</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_markup_parse_context_get_element(Pointer<GMarkupParseContext > context) {
		return Pointer.pointerToAddress(g_markup_parse_context_get_element(Pointer.getPeer(context)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_markup_parse_context_get_element(@Ptr long context);
	/**
	 * Original signature : <code>GSList* g_markup_parse_context_get_element_stack(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:179</i>
	 */
	public static Pointer<GtkLibrary.GSList > g_markup_parse_context_get_element_stack(Pointer<GMarkupParseContext > context) {
		return Pointer.pointerToAddress(g_markup_parse_context_get_element_stack(Pointer.getPeer(context)), GtkLibrary.GSList.class);
	}
	@Ptr 
	protected native static long g_markup_parse_context_get_element_stack(@Ptr long context);
	/**
	 * For user-constructed error messages, has no precise semantics<br>
	 * Original signature : <code>void g_markup_parse_context_get_position(GMarkupParseContext*, gint*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:183</i>
	 */
	public static void g_markup_parse_context_get_position(Pointer<GMarkupParseContext > context, Pointer<GtkLibrary.gint > line_number, Pointer<GtkLibrary.gint > char_number) {
		g_markup_parse_context_get_position(Pointer.getPeer(context), Pointer.getPeer(line_number), Pointer.getPeer(char_number));
	}
	protected native static void g_markup_parse_context_get_position(@Ptr long context, @Ptr long line_number, @Ptr long char_number);
	/**
	 * Original signature : <code>gpointer g_markup_parse_context_get_user_data(GMarkupParseContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:187</i>
	 */
	public static GtkLibrary.gpointer g_markup_parse_context_get_user_data(Pointer<GMarkupParseContext > context) {
		return Pointer.pointerToAddress(g_markup_parse_context_get_user_data(Pointer.getPeer(context)), .class);
	}
	@Ptr 
	protected native static long g_markup_parse_context_get_user_data(@Ptr long context);
	/**
	 * useful when saving<br>
	 * Original signature : <code>gchar* g_markup_escape_text(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:191</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_markup_escape_text(Pointer<GtkLibrary.gchar > text, GtkLibrary.gssize length) {
		return Pointer.pointerToAddress(g_markup_escape_text(Pointer.getPeer(text), Pointer.getPeer(length)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_markup_escape_text(@Ptr long text, @Ptr long length);
	/**
	 * Original signature : <code>gchar* g_markup_printf_escaped(const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:195</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_markup_printf_escaped(Pointer<Byte > format, Object... varargs) {
		return Pointer.pointerToAddress(g_markup_printf_escaped(Pointer.getPeer(format), varargs), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_markup_printf_escaped(@Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>gchar* g_markup_vprintf_escaped(const char*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:198</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_markup_vprintf_escaped(Pointer<Byte > format, GtkLibrary.__builtin_va_list args) {
		return Pointer.pointerToAddress(g_markup_vprintf_escaped(Pointer.getPeer(format), Pointer.getPeer(args)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_markup_vprintf_escaped(@Ptr long format, @Ptr long args);
	/**
	 * useful from start_element<br>
	 * Original signature : <code>gboolean g_markup_collect_attributes(const gchar*, const gchar**, const gchar**, GError**, GMarkupCollectType, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmarkup.h:215</i>
	 */
	public static GtkLibrary.gboolean g_markup_collect_attributes(Pointer<GtkLibrary.gchar > element_name, Pointer<Pointer<GtkLibrary.gchar > > attribute_names, Pointer<Pointer<GtkLibrary.gchar > > attribute_values, Pointer<Pointer<GError > > error, GtkLibrary.GMarkupCollectType first_type, Pointer<GtkLibrary.gchar > first_attr, Object... varargs) {
		return Pointer.pointerToAddress(g_markup_collect_attributes(Pointer.getPeer(element_name), Pointer.getPeer(attribute_names), Pointer.getPeer(attribute_values), Pointer.getPeer(error), Pointer.getPeer(first_type), Pointer.getPeer(first_attr), varargs), .class);
	}
	@Ptr 
	protected native static long g_markup_collect_attributes(@Ptr long element_name, @Ptr long attribute_names, @Ptr long attribute_values, @Ptr long error, @Ptr long first_type, @Ptr long first_attr, Object... varargs);
	/**
	 * calculate a string size, guaranteed to fit format + args.<br>
	 * Original signature : <code>gsize g_printf_string_upper_bound(const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:12</i>
	 */
	public static gsize g_printf_string_upper_bound(Pointer<GtkLibrary.gchar > format, GtkLibrary.__builtin_va_list args) {
		return Pointer.pointerToAddress(g_printf_string_upper_bound(Pointer.getPeer(format), Pointer.getPeer(args)), .class);
	}
	@Ptr 
	protected native static long g_printf_string_upper_bound(@Ptr long format, @Ptr long args);
	/**
	 * Logging mechanism<br>
	 * Original signature : <code>guint g_log_set_handler(const gchar*, GLogLevelFlags, GLogFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:50</i>
	 */
	public static guint g_log_set_handler(Pointer<GtkLibrary.gchar > log_domain, GtkLibrary.GLogLevelFlags log_levels, GtkLibrary.GLogFunc log_func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_log_set_handler(Pointer.getPeer(log_domain), Pointer.getPeer(log_levels), Pointer.getPeer(log_func), Pointer.getPeer(user_data)), .class);
	}
	@Ptr 
	protected native static long g_log_set_handler(@Ptr long log_domain, @Ptr long log_levels, @Ptr long log_func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_log_remove_handler(const gchar*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:55</i>
	 */
	public static void g_log_remove_handler(Pointer<GtkLibrary.gchar > log_domain, guint handler_id) {
		g_log_remove_handler(Pointer.getPeer(log_domain), Pointer.getPeer(handler_id));
	}
	protected native static void g_log_remove_handler(@Ptr long log_domain, @Ptr long handler_id);
	/**
	 * Original signature : <code>void g_log_default_handler(const gchar*, GLogLevelFlags, const gchar*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:58</i>
	 */
	public static void g_log_default_handler(Pointer<GtkLibrary.gchar > log_domain, GtkLibrary.GLogLevelFlags log_level, Pointer<GtkLibrary.gchar > message, GtkLibrary.gpointer unused_data) {
		g_log_default_handler(Pointer.getPeer(log_domain), Pointer.getPeer(log_level), Pointer.getPeer(message), Pointer.getPeer(unused_data));
	}
	protected native static void g_log_default_handler(@Ptr long log_domain, @Ptr long log_level, @Ptr long message, @Ptr long unused_data);
	/**
	 * Original signature : <code>GLogFunc g_log_set_default_handler(GLogFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:63</i>
	 */
	public static GtkLibrary.GLogFunc g_log_set_default_handler(GtkLibrary.GLogFunc log_func, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_log_set_default_handler(Pointer.getPeer(log_func), Pointer.getPeer(user_data)), .class);
	}
	@Ptr 
	protected native static long g_log_set_default_handler(@Ptr long log_func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_log(const gchar*, GLogLevelFlags, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:66</i>
	 */
	public static void g_log(Pointer<GtkLibrary.gchar > log_domain, GtkLibrary.GLogLevelFlags log_level, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		g_log(Pointer.getPeer(log_domain), Pointer.getPeer(log_level), Pointer.getPeer(format), varargs);
	}
	protected native static void g_log(@Ptr long log_domain, @Ptr long log_level, @Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>void g_logv(const gchar*, GLogLevelFlags, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:71</i>
	 */
	public static void g_logv(Pointer<GtkLibrary.gchar > log_domain, GtkLibrary.GLogLevelFlags log_level, Pointer<GtkLibrary.gchar > format, GtkLibrary.__builtin_va_list args) {
		g_logv(Pointer.getPeer(log_domain), Pointer.getPeer(log_level), Pointer.getPeer(format), Pointer.getPeer(args));
	}
	protected native static void g_logv(@Ptr long log_domain, @Ptr long log_level, @Ptr long format, @Ptr long args);
	/**
	 * Original signature : <code>GLogLevelFlags g_log_set_fatal_mask(const gchar*, GLogLevelFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:76</i>
	 */
	public static GtkLibrary.GLogLevelFlags g_log_set_fatal_mask(Pointer<GtkLibrary.gchar > log_domain, GtkLibrary.GLogLevelFlags fatal_mask) {
		return Pointer.pointerToAddress(g_log_set_fatal_mask(Pointer.getPeer(log_domain), Pointer.getPeer(fatal_mask)), .class);
	}
	@Ptr 
	protected native static long g_log_set_fatal_mask(@Ptr long log_domain, @Ptr long fatal_mask);
	/**
	 * Original signature : <code>GLogLevelFlags g_log_set_always_fatal(GLogLevelFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:79</i>
	 */
	public static GtkLibrary.GLogLevelFlags g_log_set_always_fatal(GtkLibrary.GLogLevelFlags fatal_mask) {
		return Pointer.pointerToAddress(g_log_set_always_fatal(Pointer.getPeer(fatal_mask)), .class);
	}
	@Ptr 
	protected native static long g_log_set_always_fatal(@Ptr long fatal_mask);
	/**
	 * internal<br>
	 * Original signature : <code>void _g_log_fallback_handler(const gchar*, GLogLevelFlags, const gchar*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:83</i>
	 */
	public static void _g_log_fallback_handler(Pointer<GtkLibrary.gchar > log_domain, GtkLibrary.GLogLevelFlags log_level, Pointer<GtkLibrary.gchar > message, GtkLibrary.gpointer unused_data) {
		_g_log_fallback_handler(Pointer.getPeer(log_domain), Pointer.getPeer(log_level), Pointer.getPeer(message), Pointer.getPeer(unused_data));
	}
	protected native static void _g_log_fallback_handler(@Ptr long log_domain, @Ptr long log_level, @Ptr long message, @Ptr long unused_data);
	/**
	 * Internal functions, used to implement the following macros<br>
	 * Original signature : <code>void g_return_if_fail_warning(const char*, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:89</i>
	 */
	public static void g_return_if_fail_warning(Pointer<Byte > log_domain, Pointer<Byte > pretty_function, Pointer<Byte > expression) {
		g_return_if_fail_warning(Pointer.getPeer(log_domain), Pointer.getPeer(pretty_function), Pointer.getPeer(expression));
	}
	protected native static void g_return_if_fail_warning(@Ptr long log_domain, @Ptr long pretty_function, @Ptr long expression);
	/**
	 * Original signature : <code>void g_warn_message(const char*, const char*, int, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:93</i>
	 */
	public static void g_warn_message(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, Pointer<Byte > warnexpr) {
		g_warn_message(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(warnexpr));
	}
	protected native static void g_warn_message(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long warnexpr);
	/**
	 * Original signature : <code>void g_assert_warning(const char*, const char*, const int, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:99</i>
	 */
	public static void g_assert_warning(Pointer<Byte > log_domain, Pointer<Byte > file, int line, Pointer<Byte > pretty_function, Pointer<Byte > expression) {
		g_assert_warning(Pointer.getPeer(log_domain), Pointer.getPeer(file), line, Pointer.getPeer(pretty_function), Pointer.getPeer(expression));
	}
	protected native static void g_assert_warning(@Ptr long log_domain, @Ptr long file, int line, @Ptr long pretty_function, @Ptr long expression);
	/**
	 * Original signature : <code>void g_print(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:215</i>
	 */
	public static void g_print(Pointer<GtkLibrary.gchar > format, Object... varargs) {
		g_print(Pointer.getPeer(format), varargs);
	}
	protected native static void g_print(@Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>GPrintFunc g_set_print_handler(GPrintFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:218</i>
	 */
	public static GtkLibrary.GPrintFunc g_set_print_handler(GtkLibrary.GPrintFunc func) {
		return Pointer.pointerToAddress(g_set_print_handler(Pointer.getPeer(func)), .class);
	}
	@Ptr 
	protected native static long g_set_print_handler(@Ptr long func);
	/**
	 * Original signature : <code>void g_printerr(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:220</i>
	 */
	public static void g_printerr(Pointer<GtkLibrary.gchar > format, Object... varargs) {
		g_printerr(Pointer.getPeer(format), varargs);
	}
	protected native static void g_printerr(@Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>GPrintFunc g_set_printerr_handler(GPrintFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gmessages.h:223</i>
	 */
	public static GtkLibrary.GPrintFunc g_set_printerr_handler(GtkLibrary.GPrintFunc func) {
		return Pointer.pointerToAddress(g_set_printerr_handler(Pointer.getPeer(func)), .class);
	}
	@Ptr 
	protected native static long g_set_printerr_handler(@Ptr long func);
	/**
	 * Original signature : <code>GQuark g_option_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:183</i>
	 */
	public static GtkLibrary.GQuark g_option_error_quark() {
		return Pointer.pointerToAddress(g_option_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_option_error_quark$2();
	/**
	 * Original signature : <code>GOptionContext* g_option_context_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:282</i>
	 */
	public static Pointer<GtkLibrary.GOptionContext > g_option_context_new(Pointer<GtkLibrary.gchar > parameter_string) {
		return Pointer.pointerToAddress(g_option_context_new(Pointer.getPeer(parameter_string)), GtkLibrary.GOptionContext.class);
	}
	@Ptr 
	protected native static long g_option_context_new(@Ptr long parameter_string);
	/**
	 * Original signature : <code>void g_option_context_set_summary(GOptionContext*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:284</i>
	 */
	public static void g_option_context_set_summary(Pointer<GtkLibrary.GOptionContext > context, Pointer<GtkLibrary.gchar > summary) {
		g_option_context_set_summary(Pointer.getPeer(context), Pointer.getPeer(summary));
	}
	protected native static void g_option_context_set_summary(@Ptr long context, @Ptr long summary);
	/**
	 * Original signature : <code>gchar* g_option_context_get_summary(GOptionContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:287</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_option_context_get_summary(Pointer<GtkLibrary.GOptionContext > context) {
		return Pointer.pointerToAddress(g_option_context_get_summary(Pointer.getPeer(context)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_option_context_get_summary(@Ptr long context);
	/**
	 * Original signature : <code>void g_option_context_set_description(GOptionContext*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:289</i>
	 */
	public static void g_option_context_set_description(Pointer<GtkLibrary.GOptionContext > context, Pointer<GtkLibrary.gchar > description) {
		g_option_context_set_description(Pointer.getPeer(context), Pointer.getPeer(description));
	}
	protected native static void g_option_context_set_description(@Ptr long context, @Ptr long description);
	/**
	 * Original signature : <code>gchar* g_option_context_get_description(GOptionContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:292</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_option_context_get_description(Pointer<GtkLibrary.GOptionContext > context) {
		return Pointer.pointerToAddress(g_option_context_get_description(Pointer.getPeer(context)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_option_context_get_description(@Ptr long context);
	/**
	 * Original signature : <code>void g_option_context_free(GOptionContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:294</i>
	 */
	public static void g_option_context_free(Pointer<GtkLibrary.GOptionContext > context) {
		g_option_context_free(Pointer.getPeer(context));
	}
	protected native static void g_option_context_free(@Ptr long context);
	/**
	 * Original signature : <code>void g_option_context_set_help_enabled(GOptionContext*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:296</i>
	 */
	public static void g_option_context_set_help_enabled(Pointer<GtkLibrary.GOptionContext > context, GtkLibrary.gboolean help_enabled) {
		g_option_context_set_help_enabled(Pointer.getPeer(context), Pointer.getPeer(help_enabled));
	}
	protected native static void g_option_context_set_help_enabled(@Ptr long context, @Ptr long help_enabled);
	/**
	 * Original signature : <code>gboolean g_option_context_get_help_enabled(GOptionContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:299</i>
	 */
	public static GtkLibrary.gboolean g_option_context_get_help_enabled(Pointer<GtkLibrary.GOptionContext > context) {
		return Pointer.pointerToAddress(g_option_context_get_help_enabled(Pointer.getPeer(context)), .class);
	}
	@Ptr 
	protected native static long g_option_context_get_help_enabled(@Ptr long context);
	/**
	 * Original signature : <code>void g_option_context_set_ignore_unknown_options(GOptionContext*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:301</i>
	 */
	public static void g_option_context_set_ignore_unknown_options(Pointer<GtkLibrary.GOptionContext > context, GtkLibrary.gboolean ignore_unknown) {
		g_option_context_set_ignore_unknown_options(Pointer.getPeer(context), Pointer.getPeer(ignore_unknown));
	}
	protected native static void g_option_context_set_ignore_unknown_options(@Ptr long context, @Ptr long ignore_unknown);
	/**
	 * Original signature : <code>gboolean g_option_context_get_ignore_unknown_options(GOptionContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:304</i>
	 */
	public static GtkLibrary.gboolean g_option_context_get_ignore_unknown_options(Pointer<GtkLibrary.GOptionContext > context) {
		return Pointer.pointerToAddress(g_option_context_get_ignore_unknown_options(Pointer.getPeer(context)), .class);
	}
	@Ptr 
	protected native static long g_option_context_get_ignore_unknown_options(@Ptr long context);
	/**
	 * Original signature : <code>void g_option_context_add_main_entries(GOptionContext*, const GOptionEntry*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:307</i>
	 */
	public static void g_option_context_add_main_entries(Pointer<GtkLibrary.GOptionContext > context, Pointer<GtkLibrary.GOptionEntry > entries, Pointer<GtkLibrary.gchar > translation_domain) {
		g_option_context_add_main_entries(Pointer.getPeer(context), Pointer.getPeer(entries), Pointer.getPeer(translation_domain));
	}
	protected native static void g_option_context_add_main_entries(@Ptr long context, @Ptr long entries, @Ptr long translation_domain);
	/**
	 * Original signature : <code>gboolean g_option_context_parse(GOptionContext*, gint*, gchar***, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:311</i>
	 */
	public static GtkLibrary.gboolean g_option_context_parse(Pointer<GtkLibrary.GOptionContext > context, Pointer<GtkLibrary.gint > argc, Pointer<Pointer<Pointer<GtkLibrary.gchar > > > argv, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_option_context_parse(Pointer.getPeer(context), Pointer.getPeer(argc), Pointer.getPeer(argv), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_option_context_parse(@Ptr long context, @Ptr long argc, @Ptr long argv, @Ptr long error);
	/**
	 * Original signature : <code>void g_option_context_set_translate_func(GOptionContext*, GTranslateFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:316</i>
	 */
	public static void g_option_context_set_translate_func(Pointer<GtkLibrary.GOptionContext > context, GtkLibrary.GTranslateFunc func, GtkLibrary.gpointer data, GtkLibrary.GDestroyNotify destroy_notify) {
		g_option_context_set_translate_func(Pointer.getPeer(context), Pointer.getPeer(func), Pointer.getPeer(data), Pointer.getPeer(destroy_notify));
	}
	protected native static void g_option_context_set_translate_func(@Ptr long context, @Ptr long func, @Ptr long data, @Ptr long destroy_notify);
	/**
	 * Original signature : <code>void g_option_context_set_translation_domain(GOptionContext*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:321</i>
	 */
	public static void g_option_context_set_translation_domain(Pointer<GtkLibrary.GOptionContext > context, Pointer<GtkLibrary.gchar > domain) {
		g_option_context_set_translation_domain(Pointer.getPeer(context), Pointer.getPeer(domain));
	}
	protected native static void g_option_context_set_translation_domain(@Ptr long context, @Ptr long domain);
	/**
	 * Original signature : <code>void g_option_context_add_group(GOptionContext*, GOptionGroup*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:325</i>
	 */
	public static void g_option_context_add_group(Pointer<GtkLibrary.GOptionContext > context, Pointer<GtkLibrary.GOptionGroup > group) {
		g_option_context_add_group(Pointer.getPeer(context), Pointer.getPeer(group));
	}
	protected native static void g_option_context_add_group(@Ptr long context, @Ptr long group);
	/**
	 * Original signature : <code>void g_option_context_set_main_group(GOptionContext*, GOptionGroup*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:328</i>
	 */
	public static void g_option_context_set_main_group(Pointer<GtkLibrary.GOptionContext > context, Pointer<GtkLibrary.GOptionGroup > group) {
		g_option_context_set_main_group(Pointer.getPeer(context), Pointer.getPeer(group));
	}
	protected native static void g_option_context_set_main_group(@Ptr long context, @Ptr long group);
	/**
	 * Original signature : <code>GOptionGroup* g_option_context_get_main_group(GOptionContext*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:331</i>
	 */
	public static Pointer<GtkLibrary.GOptionGroup > g_option_context_get_main_group(Pointer<GtkLibrary.GOptionContext > context) {
		return Pointer.pointerToAddress(g_option_context_get_main_group(Pointer.getPeer(context)), GtkLibrary.GOptionGroup.class);
	}
	@Ptr 
	protected native static long g_option_context_get_main_group(@Ptr long context);
	/**
	 * Original signature : <code>gchar* g_option_context_get_help(GOptionContext*, gboolean, GOptionGroup*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:333</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_option_context_get_help(Pointer<GtkLibrary.GOptionContext > context, GtkLibrary.gboolean main_help, Pointer<GtkLibrary.GOptionGroup > group) {
		return Pointer.pointerToAddress(g_option_context_get_help(Pointer.getPeer(context), Pointer.getPeer(main_help), Pointer.getPeer(group)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_option_context_get_help(@Ptr long context, @Ptr long main_help, @Ptr long group);
	/**
	 * Original signature : <code>GOptionGroup* g_option_group_new(const gchar*, const gchar*, const gchar*, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:338</i>
	 */
	public static Pointer<GtkLibrary.GOptionGroup > g_option_group_new(Pointer<GtkLibrary.gchar > name, Pointer<GtkLibrary.gchar > description, Pointer<GtkLibrary.gchar > help_description, GtkLibrary.gpointer user_data, GtkLibrary.GDestroyNotify destroy) {
		return Pointer.pointerToAddress(g_option_group_new(Pointer.getPeer(name), Pointer.getPeer(description), Pointer.getPeer(help_description), Pointer.getPeer(user_data), Pointer.getPeer(destroy)), GtkLibrary.GOptionGroup.class);
	}
	@Ptr 
	protected native static long g_option_group_new(@Ptr long name, @Ptr long description, @Ptr long help_description, @Ptr long user_data, @Ptr long destroy);
	/**
	 * Original signature : <code>void g_option_group_set_parse_hooks(GOptionGroup*, GOptionParseFunc, GOptionParseFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:344</i>
	 */
	public static void g_option_group_set_parse_hooks(Pointer<GtkLibrary.GOptionGroup > group, GtkLibrary.GOptionParseFunc pre_parse_func, GtkLibrary.GOptionParseFunc post_parse_func) {
		g_option_group_set_parse_hooks(Pointer.getPeer(group), Pointer.getPeer(pre_parse_func), Pointer.getPeer(post_parse_func));
	}
	protected native static void g_option_group_set_parse_hooks(@Ptr long group, @Ptr long pre_parse_func, @Ptr long post_parse_func);
	/**
	 * Original signature : <code>void g_option_group_set_error_hook(GOptionGroup*, GOptionErrorFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:348</i>
	 */
	public static void g_option_group_set_error_hook(Pointer<GtkLibrary.GOptionGroup > group, GtkLibrary.GOptionErrorFunc error_func) {
		g_option_group_set_error_hook(Pointer.getPeer(group), Pointer.getPeer(error_func));
	}
	protected native static void g_option_group_set_error_hook(@Ptr long group, @Ptr long error_func);
	/**
	 * Original signature : <code>void g_option_group_free(GOptionGroup*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:351</i>
	 */
	public static void g_option_group_free(Pointer<GtkLibrary.GOptionGroup > group) {
		g_option_group_free(Pointer.getPeer(group));
	}
	protected native static void g_option_group_free(@Ptr long group);
	/**
	 * Original signature : <code>void g_option_group_add_entries(GOptionGroup*, const GOptionEntry*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:353</i>
	 */
	public static void g_option_group_add_entries(Pointer<GtkLibrary.GOptionGroup > group, Pointer<GtkLibrary.GOptionEntry > entries) {
		g_option_group_add_entries(Pointer.getPeer(group), Pointer.getPeer(entries));
	}
	protected native static void g_option_group_add_entries(@Ptr long group, @Ptr long entries);
	/**
	 * Original signature : <code>void g_option_group_set_translate_func(GOptionGroup*, GTranslateFunc, gpointer, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:356</i>
	 */
	public static void g_option_group_set_translate_func(Pointer<GtkLibrary.GOptionGroup > group, GtkLibrary.GTranslateFunc func, GtkLibrary.gpointer data, GtkLibrary.GDestroyNotify destroy_notify) {
		g_option_group_set_translate_func(Pointer.getPeer(group), Pointer.getPeer(func), Pointer.getPeer(data), Pointer.getPeer(destroy_notify));
	}
	protected native static void g_option_group_set_translate_func(@Ptr long group, @Ptr long func, @Ptr long data, @Ptr long destroy_notify);
	/**
	 * Original signature : <code>void g_option_group_set_translation_domain(GOptionGroup*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/goption.h:361</i>
	 */
	public static void g_option_group_set_translation_domain(Pointer<GtkLibrary.GOptionGroup > group, Pointer<GtkLibrary.gchar > domain) {
		g_option_group_set_translation_domain(Pointer.getPeer(group), Pointer.getPeer(domain));
	}
	protected native static void g_option_group_set_translation_domain(@Ptr long group, @Ptr long domain);
	/**
	 * Original signature : <code>GPatternSpec* g_pattern_spec_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpattern.h:7</i>
	 */
	public static Pointer<GtkLibrary.GPatternSpec > g_pattern_spec_new(Pointer<GtkLibrary.gchar > pattern) {
		return Pointer.pointerToAddress(g_pattern_spec_new(Pointer.getPeer(pattern)), GtkLibrary.GPatternSpec.class);
	}
	@Ptr 
	protected native static long g_pattern_spec_new(@Ptr long pattern);
	/**
	 * Original signature : <code>void g_pattern_spec_free(GPatternSpec*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpattern.h:9</i>
	 */
	public static void g_pattern_spec_free(Pointer<GtkLibrary.GPatternSpec > pspec) {
		g_pattern_spec_free(Pointer.getPeer(pspec));
	}
	protected native static void g_pattern_spec_free(@Ptr long pspec);
	/**
	 * Original signature : <code>gboolean g_pattern_spec_equal(GPatternSpec*, GPatternSpec*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpattern.h:11</i>
	 */
	public static GtkLibrary.gboolean g_pattern_spec_equal(Pointer<GtkLibrary.GPatternSpec > pspec1, Pointer<GtkLibrary.GPatternSpec > pspec2) {
		return Pointer.pointerToAddress(g_pattern_spec_equal(Pointer.getPeer(pspec1), Pointer.getPeer(pspec2)), .class);
	}
	@Ptr 
	protected native static long g_pattern_spec_equal(@Ptr long pspec1, @Ptr long pspec2);
	/**
	 * Original signature : <code>gboolean g_pattern_match(GPatternSpec*, guint, const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpattern.h:14</i>
	 */
	public static GtkLibrary.gboolean g_pattern_match(Pointer<GtkLibrary.GPatternSpec > pspec, guint string_length, Pointer<GtkLibrary.gchar > string, Pointer<GtkLibrary.gchar > string_reversed) {
		return Pointer.pointerToAddress(g_pattern_match(Pointer.getPeer(pspec), Pointer.getPeer(string_length), Pointer.getPeer(string), Pointer.getPeer(string_reversed)), .class);
	}
	@Ptr 
	protected native static long g_pattern_match(@Ptr long pspec, @Ptr long string_length, @Ptr long string, @Ptr long string_reversed);
	/**
	 * Original signature : <code>gboolean g_pattern_match_string(GPatternSpec*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpattern.h:19</i>
	 */
	public static GtkLibrary.gboolean g_pattern_match_string(Pointer<GtkLibrary.GPatternSpec > pspec, Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_pattern_match_string(Pointer.getPeer(pspec), Pointer.getPeer(string)), .class);
	}
	@Ptr 
	protected native static long g_pattern_match_string(@Ptr long pspec, @Ptr long string);
	/**
	 * Original signature : <code>gboolean g_pattern_match_simple(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gpattern.h:22</i>
	 */
	public static GtkLibrary.gboolean g_pattern_match_simple(Pointer<GtkLibrary.gchar > pattern, Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_pattern_match_simple(Pointer.getPeer(pattern), Pointer.getPeer(string)), .class);
	}
	@Ptr 
	protected native static long g_pattern_match_simple(@Ptr long pattern, @Ptr long string);
	/**
	 * This function returns prime numbers spaced by approximately 1.5-2.0<br>
	 * and is for use in resizing data structures which prefer<br>
	 * prime-valued sizes.	The closest spaced prime function returns the<br>
	 * next largest prime, or the highest it knows about which is about<br>
	 * MAXINT/4.<br>
	 * Original signature : <code>guint g_spaced_primes_closest(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprimes.h:13</i>
	 */
	public static guint g_spaced_primes_closest(guint num) {
		return Pointer.pointerToAddress(g_spaced_primes_closest(Pointer.getPeer(num)), .class);
	}
	@Ptr 
	protected native static long g_spaced_primes_closest(@Ptr long num);
	/**
	 * Original signature : <code>void g_qsort_with_data(gconstpointer, gint, gsize, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqsort.h:4</i>
	 */
	public static void g_qsort_with_data(GtkLibrary.gconstpointer pbase, GtkLibrary.gint total_elems, gsize size, GtkLibrary.GCompareDataFunc compare_func, GtkLibrary.gpointer user_data) {
		g_qsort_with_data(Pointer.getPeer(pbase), Pointer.getPeer(total_elems), Pointer.getPeer(size), Pointer.getPeer(compare_func), Pointer.getPeer(user_data));
	}
	protected native static void g_qsort_with_data(@Ptr long pbase, @Ptr long total_elems, @Ptr long size, @Ptr long compare_func, @Ptr long user_data);
	/**
	 * Queues<br>
	 * Original signature : <code>GQueue* g_queue_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:40</i>
	 */
	public static Pointer<GtkLibrary.GQueue > g_queue_new() {
		return Pointer.pointerToAddress(g_queue_new$2(), GtkLibrary.GQueue.class);
	}
	@Ptr 
	protected native static long g_queue_new$2();
	/**
	 * Original signature : <code>void g_queue_free(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:42</i>
	 */
	public static void g_queue_free(Pointer<GtkLibrary.GQueue > queue) {
		g_queue_free(Pointer.getPeer(queue));
	}
	protected native static void g_queue_free(@Ptr long queue);
	/**
	 * Original signature : <code>void g_queue_free_full(GQueue*, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:44</i>
	 */
	public static void g_queue_free_full(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.GDestroyNotify free_func) {
		g_queue_free_full(Pointer.getPeer(queue), Pointer.getPeer(free_func));
	}
	protected native static void g_queue_free_full(@Ptr long queue, @Ptr long free_func);
	/**
	 * Original signature : <code>void g_queue_init(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:47</i>
	 */
	public static void g_queue_init(Pointer<GtkLibrary.GQueue > queue) {
		g_queue_init(Pointer.getPeer(queue));
	}
	protected native static void g_queue_init(@Ptr long queue);
	/**
	 * Original signature : <code>void g_queue_clear(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:49</i>
	 */
	public static void g_queue_clear(Pointer<GtkLibrary.GQueue > queue) {
		g_queue_clear(Pointer.getPeer(queue));
	}
	protected native static void g_queue_clear(@Ptr long queue);
	/**
	 * Original signature : <code>gboolean g_queue_is_empty(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:51</i>
	 */
	public static GtkLibrary.gboolean g_queue_is_empty(Pointer<GtkLibrary.GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_is_empty(Pointer.getPeer(queue)), .class);
	}
	@Ptr 
	protected native static long g_queue_is_empty(@Ptr long queue);
	/**
	 * Original signature : <code>guint g_queue_get_length(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:53</i>
	 */
	public static guint g_queue_get_length(Pointer<GtkLibrary.GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_get_length(Pointer.getPeer(queue)), .class);
	}
	@Ptr 
	protected native static long g_queue_get_length(@Ptr long queue);
	/**
	 * Original signature : <code>void g_queue_reverse(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:55</i>
	 */
	public static void g_queue_reverse(Pointer<GtkLibrary.GQueue > queue) {
		g_queue_reverse(Pointer.getPeer(queue));
	}
	protected native static void g_queue_reverse(@Ptr long queue);
	/**
	 * Original signature : <code>GQueue* g_queue_copy(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:57</i>
	 */
	public static Pointer<GtkLibrary.GQueue > g_queue_copy(Pointer<GtkLibrary.GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_copy(Pointer.getPeer(queue)), GtkLibrary.GQueue.class);
	}
	@Ptr 
	protected native static long g_queue_copy(@Ptr long queue);
	/**
	 * Original signature : <code>void g_queue_foreach(GQueue*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:59</i>
	 */
	public static void g_queue_foreach(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.GFunc func, GtkLibrary.gpointer user_data) {
		g_queue_foreach(Pointer.getPeer(queue), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_queue_foreach(@Ptr long queue, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>GList* g_queue_find(GQueue*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:63</i>
	 */
	public static Pointer<GtkLibrary.GList > g_queue_find(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.gconstpointer data) {
		return Pointer.pointerToAddress(g_queue_find(Pointer.getPeer(queue), Pointer.getPeer(data)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_queue_find(@Ptr long queue, @Ptr long data);
	/**
	 * Original signature : <code>GList* g_queue_find_custom(GQueue*, gconstpointer, GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:66</i>
	 */
	public static Pointer<GtkLibrary.GList > g_queue_find_custom(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.gconstpointer data, GtkLibrary.GCompareFunc func) {
		return Pointer.pointerToAddress(g_queue_find_custom(Pointer.getPeer(queue), Pointer.getPeer(data), Pointer.getPeer(func)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_queue_find_custom(@Ptr long queue, @Ptr long data, @Ptr long func);
	/**
	 * Original signature : <code>void g_queue_sort(GQueue*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:70</i>
	 */
	public static void g_queue_sort(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.GCompareDataFunc compare_func, GtkLibrary.gpointer user_data) {
		g_queue_sort(Pointer.getPeer(queue), Pointer.getPeer(compare_func), Pointer.getPeer(user_data));
	}
	protected native static void g_queue_sort(@Ptr long queue, @Ptr long compare_func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_queue_push_head(GQueue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:75</i>
	 */
	public static void g_queue_push_head(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.gpointer data) {
		g_queue_push_head(Pointer.getPeer(queue), Pointer.getPeer(data));
	}
	protected native static void g_queue_push_head(@Ptr long queue, @Ptr long data);
	/**
	 * Original signature : <code>void g_queue_push_tail(GQueue*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:78</i>
	 */
	public static void g_queue_push_tail(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.gpointer data) {
		g_queue_push_tail(Pointer.getPeer(queue), Pointer.getPeer(data));
	}
	protected native static void g_queue_push_tail(@Ptr long queue, @Ptr long data);
	/**
	 * Original signature : <code>void g_queue_push_nth(GQueue*, gpointer, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:81</i>
	 */
	public static void g_queue_push_nth(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.gpointer data, GtkLibrary.gint n) {
		g_queue_push_nth(Pointer.getPeer(queue), Pointer.getPeer(data), Pointer.getPeer(n));
	}
	protected native static void g_queue_push_nth(@Ptr long queue, @Ptr long data, @Ptr long n);
	/**
	 * Original signature : <code>gpointer g_queue_pop_head(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:85</i>
	 */
	public static GtkLibrary.gpointer g_queue_pop_head(Pointer<GtkLibrary.GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_pop_head(Pointer.getPeer(queue)), .class);
	}
	@Ptr 
	protected native static long g_queue_pop_head(@Ptr long queue);
	/**
	 * Original signature : <code>gpointer g_queue_pop_tail(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:87</i>
	 */
	public static GtkLibrary.gpointer g_queue_pop_tail(Pointer<GtkLibrary.GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_pop_tail(Pointer.getPeer(queue)), .class);
	}
	@Ptr 
	protected native static long g_queue_pop_tail(@Ptr long queue);
	/**
	 * Original signature : <code>gpointer g_queue_pop_nth(GQueue*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:89</i>
	 */
	public static GtkLibrary.gpointer g_queue_pop_nth(Pointer<GtkLibrary.GQueue > queue, guint n) {
		return Pointer.pointerToAddress(g_queue_pop_nth(Pointer.getPeer(queue), Pointer.getPeer(n)), .class);
	}
	@Ptr 
	protected native static long g_queue_pop_nth(@Ptr long queue, @Ptr long n);
	/**
	 * Original signature : <code>gpointer g_queue_peek_head(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:92</i>
	 */
	public static GtkLibrary.gpointer g_queue_peek_head(Pointer<GtkLibrary.GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_peek_head(Pointer.getPeer(queue)), .class);
	}
	@Ptr 
	protected native static long g_queue_peek_head(@Ptr long queue);
	/**
	 * Original signature : <code>gpointer g_queue_peek_tail(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:94</i>
	 */
	public static GtkLibrary.gpointer g_queue_peek_tail(Pointer<GtkLibrary.GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_peek_tail(Pointer.getPeer(queue)), .class);
	}
	@Ptr 
	protected native static long g_queue_peek_tail(@Ptr long queue);
	/**
	 * Original signature : <code>gpointer g_queue_peek_nth(GQueue*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:96</i>
	 */
	public static GtkLibrary.gpointer g_queue_peek_nth(Pointer<GtkLibrary.GQueue > queue, guint n) {
		return Pointer.pointerToAddress(g_queue_peek_nth(Pointer.getPeer(queue), Pointer.getPeer(n)), .class);
	}
	@Ptr 
	protected native static long g_queue_peek_nth(@Ptr long queue, @Ptr long n);
	/**
	 * Original signature : <code>gint g_queue_index(GQueue*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:99</i>
	 */
	public static GtkLibrary.gint g_queue_index(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.gconstpointer data) {
		return Pointer.pointerToAddress(g_queue_index(Pointer.getPeer(queue), Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_queue_index(@Ptr long queue, @Ptr long data);
	/**
	 * Original signature : <code>gboolean g_queue_remove(GQueue*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:102</i>
	 */
	public static GtkLibrary.gboolean g_queue_remove(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.gconstpointer data) {
		return Pointer.pointerToAddress(g_queue_remove(Pointer.getPeer(queue), Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_queue_remove(@Ptr long queue, @Ptr long data);
	/**
	 * Original signature : <code>guint g_queue_remove_all(GQueue*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:105</i>
	 */
	public static guint g_queue_remove_all(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.gconstpointer data) {
		return Pointer.pointerToAddress(g_queue_remove_all(Pointer.getPeer(queue), Pointer.getPeer(data)), .class);
	}
	@Ptr 
	protected native static long g_queue_remove_all(@Ptr long queue, @Ptr long data);
	/**
	 * Original signature : <code>void g_queue_insert_before(GQueue*, GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:108</i>
	 */
	public static void g_queue_insert_before(Pointer<GtkLibrary.GQueue > queue, Pointer<GtkLibrary.GList > sibling, GtkLibrary.gpointer data) {
		g_queue_insert_before(Pointer.getPeer(queue), Pointer.getPeer(sibling), Pointer.getPeer(data));
	}
	protected native static void g_queue_insert_before(@Ptr long queue, @Ptr long sibling, @Ptr long data);
	/**
	 * Original signature : <code>void g_queue_insert_after(GQueue*, GList*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:112</i>
	 */
	public static void g_queue_insert_after(Pointer<GtkLibrary.GQueue > queue, Pointer<GtkLibrary.GList > sibling, GtkLibrary.gpointer data) {
		g_queue_insert_after(Pointer.getPeer(queue), Pointer.getPeer(sibling), Pointer.getPeer(data));
	}
	protected native static void g_queue_insert_after(@Ptr long queue, @Ptr long sibling, @Ptr long data);
	/**
	 * Original signature : <code>void g_queue_insert_sorted(GQueue*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:116</i>
	 */
	public static void g_queue_insert_sorted(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.gpointer data, GtkLibrary.GCompareDataFunc func, GtkLibrary.gpointer user_data) {
		g_queue_insert_sorted(Pointer.getPeer(queue), Pointer.getPeer(data), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_queue_insert_sorted(@Ptr long queue, @Ptr long data, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_queue_push_head_link(GQueue*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:122</i>
	 */
	public static void g_queue_push_head_link(Pointer<GtkLibrary.GQueue > queue, Pointer<GtkLibrary.GList > link_) {
		g_queue_push_head_link(Pointer.getPeer(queue), Pointer.getPeer(link_));
	}
	protected native static void g_queue_push_head_link(@Ptr long queue, @Ptr long link_);
	/**
	 * Original signature : <code>void g_queue_push_tail_link(GQueue*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:125</i>
	 */
	public static void g_queue_push_tail_link(Pointer<GtkLibrary.GQueue > queue, Pointer<GtkLibrary.GList > link_) {
		g_queue_push_tail_link(Pointer.getPeer(queue), Pointer.getPeer(link_));
	}
	protected native static void g_queue_push_tail_link(@Ptr long queue, @Ptr long link_);
	/**
	 * Original signature : <code>void g_queue_push_nth_link(GQueue*, gint, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:128</i>
	 */
	public static void g_queue_push_nth_link(Pointer<GtkLibrary.GQueue > queue, GtkLibrary.gint n, Pointer<GtkLibrary.GList > link_) {
		g_queue_push_nth_link(Pointer.getPeer(queue), Pointer.getPeer(n), Pointer.getPeer(link_));
	}
	protected native static void g_queue_push_nth_link(@Ptr long queue, @Ptr long n, @Ptr long link_);
	/**
	 * Original signature : <code>GList* g_queue_pop_head_link(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:132</i>
	 */
	public static Pointer<GtkLibrary.GList > g_queue_pop_head_link(Pointer<GtkLibrary.GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_pop_head_link(Pointer.getPeer(queue)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_queue_pop_head_link(@Ptr long queue);
	/**
	 * Original signature : <code>GList* g_queue_pop_tail_link(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:134</i>
	 */
	public static Pointer<GtkLibrary.GList > g_queue_pop_tail_link(Pointer<GtkLibrary.GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_pop_tail_link(Pointer.getPeer(queue)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_queue_pop_tail_link(@Ptr long queue);
	/**
	 * Original signature : <code>GList* g_queue_pop_nth_link(GQueue*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:136</i>
	 */
	public static Pointer<GtkLibrary.GList > g_queue_pop_nth_link(Pointer<GtkLibrary.GQueue > queue, guint n) {
		return Pointer.pointerToAddress(g_queue_pop_nth_link(Pointer.getPeer(queue), Pointer.getPeer(n)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_queue_pop_nth_link(@Ptr long queue, @Ptr long n);
	/**
	 * Original signature : <code>GList* g_queue_peek_head_link(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:139</i>
	 */
	public static Pointer<GtkLibrary.GList > g_queue_peek_head_link(Pointer<GtkLibrary.GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_peek_head_link(Pointer.getPeer(queue)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_queue_peek_head_link(@Ptr long queue);
	/**
	 * Original signature : <code>GList* g_queue_peek_tail_link(GQueue*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:141</i>
	 */
	public static Pointer<GtkLibrary.GList > g_queue_peek_tail_link(Pointer<GtkLibrary.GQueue > queue) {
		return Pointer.pointerToAddress(g_queue_peek_tail_link(Pointer.getPeer(queue)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_queue_peek_tail_link(@Ptr long queue);
	/**
	 * Original signature : <code>GList* g_queue_peek_nth_link(GQueue*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:143</i>
	 */
	public static Pointer<GtkLibrary.GList > g_queue_peek_nth_link(Pointer<GtkLibrary.GQueue > queue, guint n) {
		return Pointer.pointerToAddress(g_queue_peek_nth_link(Pointer.getPeer(queue), Pointer.getPeer(n)), GtkLibrary.GList.class);
	}
	@Ptr 
	protected native static long g_queue_peek_nth_link(@Ptr long queue, @Ptr long n);
	/**
	 * Original signature : <code>gint g_queue_link_index(GQueue*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:146</i>
	 */
	public static GtkLibrary.gint g_queue_link_index(Pointer<GtkLibrary.GQueue > queue, Pointer<GtkLibrary.GList > link_) {
		return Pointer.pointerToAddress(g_queue_link_index(Pointer.getPeer(queue), Pointer.getPeer(link_)), .class);
	}
	@Ptr 
	protected native static long g_queue_link_index(@Ptr long queue, @Ptr long link_);
	/**
	 * Original signature : <code>void g_queue_unlink(GQueue*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:149</i>
	 */
	public static void g_queue_unlink(Pointer<GtkLibrary.GQueue > queue, Pointer<GtkLibrary.GList > link_) {
		g_queue_unlink(Pointer.getPeer(queue), Pointer.getPeer(link_));
	}
	protected native static void g_queue_unlink(@Ptr long queue, @Ptr long link_);
	/**
	 * Original signature : <code>void g_queue_delete_link(GQueue*, GList*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gqueue.h:152</i>
	 */
	public static void g_queue_delete_link(Pointer<GtkLibrary.GQueue > queue, Pointer<GtkLibrary.GList > link_) {
		g_queue_delete_link(Pointer.getPeer(queue), Pointer.getPeer(link_));
	}
	protected native static void g_queue_delete_link(@Ptr long queue, @Ptr long link_);
	/**
	 * Original signature : <code>GRand* g_rand_new_with_seed(guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:15</i>
	 */
	public static Pointer<GtkLibrary.GRand > g_rand_new_with_seed(GtkLibrary.guint32 seed) {
		return Pointer.pointerToAddress(g_rand_new_with_seed(Pointer.getPeer(seed)), GtkLibrary.GRand.class);
	}
	@Ptr 
	protected native static long g_rand_new_with_seed(@Ptr long seed);
	/**
	 * Original signature : <code>GRand* g_rand_new_with_seed_array(const guint32*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:17</i>
	 */
	public static Pointer<GtkLibrary.GRand > g_rand_new_with_seed_array(Pointer<GtkLibrary.guint32 > seed, guint seed_length) {
		return Pointer.pointerToAddress(g_rand_new_with_seed_array(Pointer.getPeer(seed), Pointer.getPeer(seed_length)), GtkLibrary.GRand.class);
	}
	@Ptr 
	protected native static long g_rand_new_with_seed_array(@Ptr long seed, @Ptr long seed_length);
	/**
	 * Original signature : <code>GRand* g_rand_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:20</i>
	 */
	public static Pointer<GtkLibrary.GRand > g_rand_new() {
		return Pointer.pointerToAddress(g_rand_new$2(), GtkLibrary.GRand.class);
	}
	@Ptr 
	protected native static long g_rand_new$2();
	/**
	 * Original signature : <code>void g_rand_free(GRand*)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:22</i>
	 */
	public static void g_rand_free(Pointer<GtkLibrary.GRand > rand_) {
		g_rand_free(Pointer.getPeer(rand_));
	}
	protected native static void g_rand_free(@Ptr long rand_);
	/**
	 * Original signature : <code>GRand* g_rand_copy(GRand*)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:24</i>
	 */
	public static Pointer<GtkLibrary.GRand > g_rand_copy(Pointer<GtkLibrary.GRand > rand_) {
		return Pointer.pointerToAddress(g_rand_copy(Pointer.getPeer(rand_)), GtkLibrary.GRand.class);
	}
	@Ptr 
	protected native static long g_rand_copy(@Ptr long rand_);
	/**
	 * Original signature : <code>void g_rand_set_seed(GRand*, guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:26</i>
	 */
	public static void g_rand_set_seed(Pointer<GtkLibrary.GRand > rand_, GtkLibrary.guint32 seed) {
		g_rand_set_seed(Pointer.getPeer(rand_), Pointer.getPeer(seed));
	}
	protected native static void g_rand_set_seed(@Ptr long rand_, @Ptr long seed);
	/**
	 * Original signature : <code>void g_rand_set_seed_array(GRand*, const guint32*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:29</i>
	 */
	public static void g_rand_set_seed_array(Pointer<GtkLibrary.GRand > rand_, Pointer<GtkLibrary.guint32 > seed, guint seed_length) {
		g_rand_set_seed_array(Pointer.getPeer(rand_), Pointer.getPeer(seed), Pointer.getPeer(seed_length));
	}
	protected native static void g_rand_set_seed_array(@Ptr long rand_, @Ptr long seed, @Ptr long seed_length);
	/**
	 * Original signature : <code>guint32 g_rand_int(GRand*)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:36</i>
	 */
	public static GtkLibrary.guint32 g_rand_int(Pointer<GtkLibrary.GRand > rand_) {
		return Pointer.pointerToAddress(g_rand_int(Pointer.getPeer(rand_)), .class);
	}
	@Ptr 
	protected native static long g_rand_int(@Ptr long rand_);
	/**
	 * Original signature : <code>gint32 g_rand_int_range(GRand*, gint32, gint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:38</i>
	 */
	public static GtkLibrary.gint32 g_rand_int_range(Pointer<GtkLibrary.GRand > rand_, GtkLibrary.gint32 begin, GtkLibrary.gint32 end) {
		return Pointer.pointerToAddress(g_rand_int_range(Pointer.getPeer(rand_), Pointer.getPeer(begin), Pointer.getPeer(end)), .class);
	}
	@Ptr 
	protected native static long g_rand_int_range(@Ptr long rand_, @Ptr long begin, @Ptr long end);
	/**
	 * Original signature : <code>gdouble g_rand_double(GRand*)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:42</i>
	 */
	public static GtkLibrary.gdouble g_rand_double(Pointer<GtkLibrary.GRand > rand_) {
		return Pointer.pointerToAddress(g_rand_double(Pointer.getPeer(rand_)), .class);
	}
	@Ptr 
	protected native static long g_rand_double(@Ptr long rand_);
	/**
	 * Original signature : <code>gdouble g_rand_double_range(GRand*, gdouble, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:44</i>
	 */
	public static GtkLibrary.gdouble g_rand_double_range(Pointer<GtkLibrary.GRand > rand_, GtkLibrary.gdouble begin, GtkLibrary.gdouble end) {
		return Pointer.pointerToAddress(g_rand_double_range(Pointer.getPeer(rand_), Pointer.getPeer(begin), Pointer.getPeer(end)), .class);
	}
	@Ptr 
	protected native static long g_rand_double_range(@Ptr long rand_, @Ptr long begin, @Ptr long end);
	/**
	 * Original signature : <code>void g_random_set_seed(guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:48</i>
	 */
	public static void g_random_set_seed(GtkLibrary.guint32 seed) {
		g_random_set_seed(Pointer.getPeer(seed));
	}
	protected native static void g_random_set_seed(@Ptr long seed);
	/**
	 * Original signature : <code>guint32 g_random_int()</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:53</i>
	 */
	public static GtkLibrary.guint32 g_random_int() {
		return Pointer.pointerToAddress(g_random_int$2(), .class);
	}
	@Ptr 
	protected native static long g_random_int$2();
	/**
	 * Original signature : <code>gint32 g_random_int_range(gint32, gint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:55</i>
	 */
	public static GtkLibrary.gint32 g_random_int_range(GtkLibrary.gint32 begin, GtkLibrary.gint32 end) {
		return Pointer.pointerToAddress(g_random_int_range(Pointer.getPeer(begin), Pointer.getPeer(end)), .class);
	}
	@Ptr 
	protected native static long g_random_int_range(@Ptr long begin, @Ptr long end);
	/**
	 * Original signature : <code>gdouble g_random_double()</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:58</i>
	 */
	public static GtkLibrary.gdouble g_random_double() {
		return Pointer.pointerToAddress(g_random_double$2(), .class);
	}
	@Ptr 
	protected native static long g_random_double$2();
	/**
	 * Original signature : <code>gdouble g_random_double_range(gdouble, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/grand.h:60</i>
	 */
	public static GtkLibrary.gdouble g_random_double_range(GtkLibrary.gdouble begin, GtkLibrary.gdouble end) {
		return Pointer.pointerToAddress(g_random_double_range(Pointer.getPeer(begin), Pointer.getPeer(end)), .class);
	}
	@Ptr 
	protected native static long g_random_double_range(@Ptr long begin, @Ptr long end);
	/**
	 * Original signature : <code>GQuark g_regex_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:185</i>
	 */
	public static GtkLibrary.GQuark g_regex_error_quark() {
		return Pointer.pointerToAddress(g_regex_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_regex_error_quark$2();
	/**
	 * Original signature : <code>GRegex* g_regex_new(const gchar*, GRegexCompileFlags, GRegexMatchFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:410</i>
	 */
	public static Pointer<GtkLibrary.GRegex > g_regex_new(Pointer<GtkLibrary.gchar > pattern, GtkLibrary.GRegexCompileFlags compile_options, GtkLibrary.GRegexMatchFlags match_options, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_regex_new(Pointer.getPeer(pattern), Pointer.getPeer(compile_options), Pointer.getPeer(match_options), Pointer.getPeer(error)), GtkLibrary.GRegex.class);
	}
	@Ptr 
	protected native static long g_regex_new(@Ptr long pattern, @Ptr long compile_options, @Ptr long match_options, @Ptr long error);
	/**
	 * Original signature : <code>GRegex* g_regex_ref(GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:415</i>
	 */
	public static Pointer<GtkLibrary.GRegex > g_regex_ref(Pointer<GtkLibrary.GRegex > regex) {
		return Pointer.pointerToAddress(g_regex_ref(Pointer.getPeer(regex)), GtkLibrary.GRegex.class);
	}
	@Ptr 
	protected native static long g_regex_ref(@Ptr long regex);
	/**
	 * Original signature : <code>void g_regex_unref(GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:417</i>
	 */
	public static void g_regex_unref(Pointer<GtkLibrary.GRegex > regex) {
		g_regex_unref(Pointer.getPeer(regex));
	}
	protected native static void g_regex_unref(@Ptr long regex);
	/**
	 * Original signature : <code>gchar* g_regex_get_pattern(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:419</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_regex_get_pattern(Pointer<GtkLibrary.GRegex > regex) {
		return Pointer.pointerToAddress(g_regex_get_pattern(Pointer.getPeer(regex)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_regex_get_pattern(@Ptr long regex);
	/**
	 * Original signature : <code>gint g_regex_get_max_backref(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:421</i>
	 */
	public static GtkLibrary.gint g_regex_get_max_backref(Pointer<GtkLibrary.GRegex > regex) {
		return Pointer.pointerToAddress(g_regex_get_max_backref(Pointer.getPeer(regex)), .class);
	}
	@Ptr 
	protected native static long g_regex_get_max_backref(@Ptr long regex);
	/**
	 * Original signature : <code>gint g_regex_get_capture_count(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:423</i>
	 */
	public static GtkLibrary.gint g_regex_get_capture_count(Pointer<GtkLibrary.GRegex > regex) {
		return Pointer.pointerToAddress(g_regex_get_capture_count(Pointer.getPeer(regex)), .class);
	}
	@Ptr 
	protected native static long g_regex_get_capture_count(@Ptr long regex);
	/**
	 * Original signature : <code>gboolean g_regex_get_has_cr_or_lf(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:425</i>
	 */
	public static GtkLibrary.gboolean g_regex_get_has_cr_or_lf(Pointer<GtkLibrary.GRegex > regex) {
		return Pointer.pointerToAddress(g_regex_get_has_cr_or_lf(Pointer.getPeer(regex)), .class);
	}
	@Ptr 
	protected native static long g_regex_get_has_cr_or_lf(@Ptr long regex);
	/**
	 * Original signature : <code>gint g_regex_get_max_lookbehind(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:427</i>
	 */
	public static GtkLibrary.gint g_regex_get_max_lookbehind(Pointer<GtkLibrary.GRegex > regex) {
		return Pointer.pointerToAddress(g_regex_get_max_lookbehind(Pointer.getPeer(regex)), .class);
	}
	@Ptr 
	protected native static long g_regex_get_max_lookbehind(@Ptr long regex);
	/**
	 * Original signature : <code>gint g_regex_get_string_number(const GRegex*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:429</i>
	 */
	public static GtkLibrary.gint g_regex_get_string_number(Pointer<GtkLibrary.GRegex > regex, Pointer<GtkLibrary.gchar > name) {
		return Pointer.pointerToAddress(g_regex_get_string_number(Pointer.getPeer(regex), Pointer.getPeer(name)), .class);
	}
	@Ptr 
	protected native static long g_regex_get_string_number(@Ptr long regex, @Ptr long name);
	/**
	 * Original signature : <code>gchar* g_regex_escape_string(const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:432</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_regex_escape_string(Pointer<GtkLibrary.gchar > string, GtkLibrary.gint length) {
		return Pointer.pointerToAddress(g_regex_escape_string(Pointer.getPeer(string), Pointer.getPeer(length)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_regex_escape_string(@Ptr long string, @Ptr long length);
	/**
	 * Original signature : <code>gchar* g_regex_escape_nul(const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:435</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_regex_escape_nul(Pointer<GtkLibrary.gchar > string, GtkLibrary.gint length) {
		return Pointer.pointerToAddress(g_regex_escape_nul(Pointer.getPeer(string), Pointer.getPeer(length)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_regex_escape_nul(@Ptr long string, @Ptr long length);
	/**
	 * Original signature : <code>GRegexCompileFlags g_regex_get_compile_flags(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:439</i>
	 */
	public static GtkLibrary.GRegexCompileFlags g_regex_get_compile_flags(Pointer<GtkLibrary.GRegex > regex) {
		return Pointer.pointerToAddress(g_regex_get_compile_flags(Pointer.getPeer(regex)), .class);
	}
	@Ptr 
	protected native static long g_regex_get_compile_flags(@Ptr long regex);
	/**
	 * Original signature : <code>GRegexMatchFlags g_regex_get_match_flags(const GRegex*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:441</i>
	 */
	public static GtkLibrary.GRegexMatchFlags g_regex_get_match_flags(Pointer<GtkLibrary.GRegex > regex) {
		return Pointer.pointerToAddress(g_regex_get_match_flags(Pointer.getPeer(regex)), .class);
	}
	@Ptr 
	protected native static long g_regex_get_match_flags(@Ptr long regex);
	/**
	 * Matching.<br>
	 * Original signature : <code>gboolean g_regex_match_simple(const gchar*, const gchar*, GRegexCompileFlags, GRegexMatchFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:445</i>
	 */
	public static GtkLibrary.gboolean g_regex_match_simple(Pointer<GtkLibrary.gchar > pattern, Pointer<GtkLibrary.gchar > string, GtkLibrary.GRegexCompileFlags compile_options, GtkLibrary.GRegexMatchFlags match_options) {
		return Pointer.pointerToAddress(g_regex_match_simple(Pointer.getPeer(pattern), Pointer.getPeer(string), Pointer.getPeer(compile_options), Pointer.getPeer(match_options)), .class);
	}
	@Ptr 
	protected native static long g_regex_match_simple(@Ptr long pattern, @Ptr long string, @Ptr long compile_options, @Ptr long match_options);
	/**
	 * Original signature : <code>gboolean g_regex_match(const GRegex*, const gchar*, GRegexMatchFlags, GMatchInfo**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:450</i>
	 */
	public static GtkLibrary.gboolean g_regex_match(Pointer<GtkLibrary.GRegex > regex, Pointer<GtkLibrary.gchar > string, GtkLibrary.GRegexMatchFlags match_options, Pointer<Pointer<GtkLibrary.GMatchInfo > > match_info) {
		return Pointer.pointerToAddress(g_regex_match(Pointer.getPeer(regex), Pointer.getPeer(string), Pointer.getPeer(match_options), Pointer.getPeer(match_info)), .class);
	}
	@Ptr 
	protected native static long g_regex_match(@Ptr long regex, @Ptr long string, @Ptr long match_options, @Ptr long match_info);
	/**
	 * Original signature : <code>gboolean g_regex_match_full(const GRegex*, const gchar*, gssize, gint, GRegexMatchFlags, GMatchInfo**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:455</i>
	 */
	public static GtkLibrary.gboolean g_regex_match_full(Pointer<GtkLibrary.GRegex > regex, Pointer<GtkLibrary.gchar > string, GtkLibrary.gssize string_len, GtkLibrary.gint start_position, GtkLibrary.GRegexMatchFlags match_options, Pointer<Pointer<GtkLibrary.GMatchInfo > > match_info, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_regex_match_full(Pointer.getPeer(regex), Pointer.getPeer(string), Pointer.getPeer(string_len), Pointer.getPeer(start_position), Pointer.getPeer(match_options), Pointer.getPeer(match_info), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_regex_match_full(@Ptr long regex, @Ptr long string, @Ptr long string_len, @Ptr long start_position, @Ptr long match_options, @Ptr long match_info, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_regex_match_all(const GRegex*, const gchar*, GRegexMatchFlags, GMatchInfo**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:463</i>
	 */
	public static GtkLibrary.gboolean g_regex_match_all(Pointer<GtkLibrary.GRegex > regex, Pointer<GtkLibrary.gchar > string, GtkLibrary.GRegexMatchFlags match_options, Pointer<Pointer<GtkLibrary.GMatchInfo > > match_info) {
		return Pointer.pointerToAddress(g_regex_match_all(Pointer.getPeer(regex), Pointer.getPeer(string), Pointer.getPeer(match_options), Pointer.getPeer(match_info)), .class);
	}
	@Ptr 
	protected native static long g_regex_match_all(@Ptr long regex, @Ptr long string, @Ptr long match_options, @Ptr long match_info);
	/**
	 * Original signature : <code>gboolean g_regex_match_all_full(const GRegex*, const gchar*, gssize, gint, GRegexMatchFlags, GMatchInfo**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:468</i>
	 */
	public static GtkLibrary.gboolean g_regex_match_all_full(Pointer<GtkLibrary.GRegex > regex, Pointer<GtkLibrary.gchar > string, GtkLibrary.gssize string_len, GtkLibrary.gint start_position, GtkLibrary.GRegexMatchFlags match_options, Pointer<Pointer<GtkLibrary.GMatchInfo > > match_info, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_regex_match_all_full(Pointer.getPeer(regex), Pointer.getPeer(string), Pointer.getPeer(string_len), Pointer.getPeer(start_position), Pointer.getPeer(match_options), Pointer.getPeer(match_info), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_regex_match_all_full(@Ptr long regex, @Ptr long string, @Ptr long string_len, @Ptr long start_position, @Ptr long match_options, @Ptr long match_info, @Ptr long error);
	/**
	 * String splitting.<br>
	 * Original signature : <code>gchar** g_regex_split_simple(const gchar*, const gchar*, GRegexCompileFlags, GRegexMatchFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:478</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_regex_split_simple(Pointer<GtkLibrary.gchar > pattern, Pointer<GtkLibrary.gchar > string, GtkLibrary.GRegexCompileFlags compile_options, GtkLibrary.GRegexMatchFlags match_options) {
		return Pointer.pointerToAddress(g_regex_split_simple(Pointer.getPeer(pattern), Pointer.getPeer(string), Pointer.getPeer(compile_options), Pointer.getPeer(match_options)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_regex_split_simple(@Ptr long pattern, @Ptr long string, @Ptr long compile_options, @Ptr long match_options);
	/**
	 * Original signature : <code>gchar** g_regex_split(const GRegex*, const gchar*, GRegexMatchFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:483</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_regex_split(Pointer<GtkLibrary.GRegex > regex, Pointer<GtkLibrary.gchar > string, GtkLibrary.GRegexMatchFlags match_options) {
		return Pointer.pointerToAddress(g_regex_split(Pointer.getPeer(regex), Pointer.getPeer(string), Pointer.getPeer(match_options)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_regex_split(@Ptr long regex, @Ptr long string, @Ptr long match_options);
	/**
	 * Original signature : <code>gchar** g_regex_split_full(const GRegex*, const gchar*, gssize, gint, GRegexMatchFlags, gint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:487</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_regex_split_full(Pointer<GtkLibrary.GRegex > regex, Pointer<GtkLibrary.gchar > string, GtkLibrary.gssize string_len, GtkLibrary.gint start_position, GtkLibrary.GRegexMatchFlags match_options, GtkLibrary.gint max_tokens, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_regex_split_full(Pointer.getPeer(regex), Pointer.getPeer(string), Pointer.getPeer(string_len), Pointer.getPeer(start_position), Pointer.getPeer(match_options), Pointer.getPeer(max_tokens), Pointer.getPeer(error)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_regex_split_full(@Ptr long regex, @Ptr long string, @Ptr long string_len, @Ptr long start_position, @Ptr long match_options, @Ptr long max_tokens, @Ptr long error);
	/**
	 * String replacement.<br>
	 * Original signature : <code>gchar* g_regex_replace(const GRegex*, const gchar*, gssize, gint, const gchar*, GRegexMatchFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:497</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_regex_replace(Pointer<GtkLibrary.GRegex > regex, Pointer<GtkLibrary.gchar > string, GtkLibrary.gssize string_len, GtkLibrary.gint start_position, Pointer<GtkLibrary.gchar > replacement, GtkLibrary.GRegexMatchFlags match_options, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_regex_replace(Pointer.getPeer(regex), Pointer.getPeer(string), Pointer.getPeer(string_len), Pointer.getPeer(start_position), Pointer.getPeer(replacement), Pointer.getPeer(match_options), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_regex_replace(@Ptr long regex, @Ptr long string, @Ptr long string_len, @Ptr long start_position, @Ptr long replacement, @Ptr long match_options, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_regex_replace_literal(const GRegex*, const gchar*, gssize, gint, const gchar*, GRegexMatchFlags, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:505</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_regex_replace_literal(Pointer<GtkLibrary.GRegex > regex, Pointer<GtkLibrary.gchar > string, GtkLibrary.gssize string_len, GtkLibrary.gint start_position, Pointer<GtkLibrary.gchar > replacement, GtkLibrary.GRegexMatchFlags match_options, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_regex_replace_literal(Pointer.getPeer(regex), Pointer.getPeer(string), Pointer.getPeer(string_len), Pointer.getPeer(start_position), Pointer.getPeer(replacement), Pointer.getPeer(match_options), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_regex_replace_literal(@Ptr long regex, @Ptr long string, @Ptr long string_len, @Ptr long start_position, @Ptr long replacement, @Ptr long match_options, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_regex_replace_eval(const GRegex*, const gchar*, gssize, gint, GRegexMatchFlags, GRegexEvalCallback, gpointer, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:513</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_regex_replace_eval(Pointer<GtkLibrary.GRegex > regex, Pointer<GtkLibrary.gchar > string, GtkLibrary.gssize string_len, GtkLibrary.gint start_position, GtkLibrary.GRegexMatchFlags match_options, GtkLibrary.GRegexEvalCallback eval, GtkLibrary.gpointer user_data, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_regex_replace_eval(Pointer.getPeer(regex), Pointer.getPeer(string), Pointer.getPeer(string_len), Pointer.getPeer(start_position), Pointer.getPeer(match_options), Pointer.getPeer(eval), Pointer.getPeer(user_data), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_regex_replace_eval(@Ptr long regex, @Ptr long string, @Ptr long string_len, @Ptr long start_position, @Ptr long match_options, @Ptr long eval, @Ptr long user_data, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_regex_check_replacement(const gchar*, gboolean*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:522</i>
	 */
	public static GtkLibrary.gboolean g_regex_check_replacement(Pointer<GtkLibrary.gchar > replacement, Pointer<GtkLibrary.gboolean > has_references, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_regex_check_replacement(Pointer.getPeer(replacement), Pointer.getPeer(has_references), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_regex_check_replacement(@Ptr long replacement, @Ptr long has_references, @Ptr long error);
	/**
	 * Match info<br>
	 * Original signature : <code>GRegex* g_match_info_get_regex(const GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:528</i>
	 */
	public static Pointer<GtkLibrary.GRegex > g_match_info_get_regex(Pointer<GtkLibrary.GMatchInfo > match_info) {
		return Pointer.pointerToAddress(g_match_info_get_regex(Pointer.getPeer(match_info)), GtkLibrary.GRegex.class);
	}
	@Ptr 
	protected native static long g_match_info_get_regex(@Ptr long match_info);
	/**
	 * Original signature : <code>gchar* g_match_info_get_string(const GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:530</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_match_info_get_string(Pointer<GtkLibrary.GMatchInfo > match_info) {
		return Pointer.pointerToAddress(g_match_info_get_string(Pointer.getPeer(match_info)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_match_info_get_string(@Ptr long match_info);
	/**
	 * Original signature : <code>GMatchInfo* g_match_info_ref(GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:533</i>
	 */
	public static Pointer<GtkLibrary.GMatchInfo > g_match_info_ref(Pointer<GtkLibrary.GMatchInfo > match_info) {
		return Pointer.pointerToAddress(g_match_info_ref(Pointer.getPeer(match_info)), GtkLibrary.GMatchInfo.class);
	}
	@Ptr 
	protected native static long g_match_info_ref(@Ptr long match_info);
	/**
	 * Original signature : <code>void g_match_info_unref(GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:535</i>
	 */
	public static void g_match_info_unref(Pointer<GtkLibrary.GMatchInfo > match_info) {
		g_match_info_unref(Pointer.getPeer(match_info));
	}
	protected native static void g_match_info_unref(@Ptr long match_info);
	/**
	 * Original signature : <code>void g_match_info_free(GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:537</i>
	 */
	public static void g_match_info_free(Pointer<GtkLibrary.GMatchInfo > match_info) {
		g_match_info_free(Pointer.getPeer(match_info));
	}
	protected native static void g_match_info_free(@Ptr long match_info);
	/**
	 * Original signature : <code>gboolean g_match_info_next(GMatchInfo*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:539</i>
	 */
	public static GtkLibrary.gboolean g_match_info_next(Pointer<GtkLibrary.GMatchInfo > match_info, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_match_info_next(Pointer.getPeer(match_info), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_match_info_next(@Ptr long match_info, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_match_info_matches(const GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:542</i>
	 */
	public static GtkLibrary.gboolean g_match_info_matches(Pointer<GtkLibrary.GMatchInfo > match_info) {
		return Pointer.pointerToAddress(g_match_info_matches(Pointer.getPeer(match_info)), .class);
	}
	@Ptr 
	protected native static long g_match_info_matches(@Ptr long match_info);
	/**
	 * Original signature : <code>gint g_match_info_get_match_count(const GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:544</i>
	 */
	public static GtkLibrary.gint g_match_info_get_match_count(Pointer<GtkLibrary.GMatchInfo > match_info) {
		return Pointer.pointerToAddress(g_match_info_get_match_count(Pointer.getPeer(match_info)), .class);
	}
	@Ptr 
	protected native static long g_match_info_get_match_count(@Ptr long match_info);
	/**
	 * Original signature : <code>gboolean g_match_info_is_partial_match(const GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:546</i>
	 */
	public static GtkLibrary.gboolean g_match_info_is_partial_match(Pointer<GtkLibrary.GMatchInfo > match_info) {
		return Pointer.pointerToAddress(g_match_info_is_partial_match(Pointer.getPeer(match_info)), .class);
	}
	@Ptr 
	protected native static long g_match_info_is_partial_match(@Ptr long match_info);
	/**
	 * Original signature : <code>gchar* g_match_info_expand_references(const GMatchInfo*, const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:548</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_match_info_expand_references(Pointer<GtkLibrary.GMatchInfo > match_info, Pointer<GtkLibrary.gchar > string_to_expand, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_match_info_expand_references(Pointer.getPeer(match_info), Pointer.getPeer(string_to_expand), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_match_info_expand_references(@Ptr long match_info, @Ptr long string_to_expand, @Ptr long error);
	/**
	 * Original signature : <code>gchar* g_match_info_fetch(const GMatchInfo*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:552</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_match_info_fetch(Pointer<GtkLibrary.GMatchInfo > match_info, GtkLibrary.gint match_num) {
		return Pointer.pointerToAddress(g_match_info_fetch(Pointer.getPeer(match_info), Pointer.getPeer(match_num)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_match_info_fetch(@Ptr long match_info, @Ptr long match_num);
	/**
	 * Original signature : <code>gboolean g_match_info_fetch_pos(const GMatchInfo*, gint, gint*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:555</i>
	 */
	public static GtkLibrary.gboolean g_match_info_fetch_pos(Pointer<GtkLibrary.GMatchInfo > match_info, GtkLibrary.gint match_num, Pointer<GtkLibrary.gint > start_pos, Pointer<GtkLibrary.gint > end_pos) {
		return Pointer.pointerToAddress(g_match_info_fetch_pos(Pointer.getPeer(match_info), Pointer.getPeer(match_num), Pointer.getPeer(start_pos), Pointer.getPeer(end_pos)), .class);
	}
	@Ptr 
	protected native static long g_match_info_fetch_pos(@Ptr long match_info, @Ptr long match_num, @Ptr long start_pos, @Ptr long end_pos);
	/**
	 * Original signature : <code>gchar* g_match_info_fetch_named(const GMatchInfo*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:560</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_match_info_fetch_named(Pointer<GtkLibrary.GMatchInfo > match_info, Pointer<GtkLibrary.gchar > name) {
		return Pointer.pointerToAddress(g_match_info_fetch_named(Pointer.getPeer(match_info), Pointer.getPeer(name)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_match_info_fetch_named(@Ptr long match_info, @Ptr long name);
	/**
	 * Original signature : <code>gboolean g_match_info_fetch_named_pos(const GMatchInfo*, const gchar*, gint*, gint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:563</i>
	 */
	public static GtkLibrary.gboolean g_match_info_fetch_named_pos(Pointer<GtkLibrary.GMatchInfo > match_info, Pointer<GtkLibrary.gchar > name, Pointer<GtkLibrary.gint > start_pos, Pointer<GtkLibrary.gint > end_pos) {
		return Pointer.pointerToAddress(g_match_info_fetch_named_pos(Pointer.getPeer(match_info), Pointer.getPeer(name), Pointer.getPeer(start_pos), Pointer.getPeer(end_pos)), .class);
	}
	@Ptr 
	protected native static long g_match_info_fetch_named_pos(@Ptr long match_info, @Ptr long name, @Ptr long start_pos, @Ptr long end_pos);
	/**
	 * Original signature : <code>gchar** g_match_info_fetch_all(const GMatchInfo*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gregex.h:568</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_match_info_fetch_all(Pointer<GtkLibrary.GMatchInfo > match_info) {
		return Pointer.pointerToAddress(g_match_info_fetch_all(Pointer.getPeer(match_info)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_match_info_fetch_all(@Ptr long match_info);
	/**
	 * Original signature : <code>GScanner* g_scanner_new(const GScannerConfig*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:180</i>
	 */
	public static Pointer<GtkLibrary.GScanner > g_scanner_new(Pointer<GtkLibrary.GScannerConfig > config_templ) {
		return Pointer.pointerToAddress(g_scanner_new(Pointer.getPeer(config_templ)), GtkLibrary.GScanner.class);
	}
	@Ptr 
	protected native static long g_scanner_new(@Ptr long config_templ);
	/**
	 * Original signature : <code>void g_scanner_destroy(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:182</i>
	 */
	public static void g_scanner_destroy(Pointer<GtkLibrary.GScanner > scanner) {
		g_scanner_destroy(Pointer.getPeer(scanner));
	}
	protected native static void g_scanner_destroy(@Ptr long scanner);
	/**
	 * Original signature : <code>void g_scanner_input_file(GScanner*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:184</i>
	 */
	public static void g_scanner_input_file(Pointer<GtkLibrary.GScanner > scanner, GtkLibrary.gint input_fd) {
		g_scanner_input_file(Pointer.getPeer(scanner), Pointer.getPeer(input_fd));
	}
	protected native static void g_scanner_input_file(@Ptr long scanner, @Ptr long input_fd);
	/**
	 * Original signature : <code>void g_scanner_sync_file_offset(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:187</i>
	 */
	public static void g_scanner_sync_file_offset(Pointer<GtkLibrary.GScanner > scanner) {
		g_scanner_sync_file_offset(Pointer.getPeer(scanner));
	}
	protected native static void g_scanner_sync_file_offset(@Ptr long scanner);
	/**
	 * Original signature : <code>void g_scanner_input_text(GScanner*, const gchar*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:189</i>
	 */
	public static void g_scanner_input_text(Pointer<GtkLibrary.GScanner > scanner, Pointer<GtkLibrary.gchar > text, guint text_len) {
		g_scanner_input_text(Pointer.getPeer(scanner), Pointer.getPeer(text), Pointer.getPeer(text_len));
	}
	protected native static void g_scanner_input_text(@Ptr long scanner, @Ptr long text, @Ptr long text_len);
	/**
	 * Original signature : <code>GTokenType g_scanner_get_next_token(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:193</i>
	 */
	public static GtkLibrary.GTokenType g_scanner_get_next_token(Pointer<GtkLibrary.GScanner > scanner) {
		return Pointer.pointerToAddress(g_scanner_get_next_token(Pointer.getPeer(scanner)), .class);
	}
	@Ptr 
	protected native static long g_scanner_get_next_token(@Ptr long scanner);
	/**
	 * Original signature : <code>GTokenType g_scanner_peek_next_token(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:195</i>
	 */
	public static GtkLibrary.GTokenType g_scanner_peek_next_token(Pointer<GtkLibrary.GScanner > scanner) {
		return Pointer.pointerToAddress(g_scanner_peek_next_token(Pointer.getPeer(scanner)), .class);
	}
	@Ptr 
	protected native static long g_scanner_peek_next_token(@Ptr long scanner);
	/**
	 * Original signature : <code>GTokenType g_scanner_cur_token(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:197</i>
	 */
	public static GtkLibrary.GTokenType g_scanner_cur_token(Pointer<GtkLibrary.GScanner > scanner) {
		return Pointer.pointerToAddress(g_scanner_cur_token(Pointer.getPeer(scanner)), .class);
	}
	@Ptr 
	protected native static long g_scanner_cur_token(@Ptr long scanner);
	/**
	 * Original signature : <code>GTokenValue g_scanner_cur_value(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:199</i>
	 */
	public static GtkLibrary.GTokenValue g_scanner_cur_value(Pointer<GtkLibrary.GScanner > scanner) {
		return Pointer.pointerToAddress(g_scanner_cur_value(Pointer.getPeer(scanner)), .class);
	}
	@Ptr 
	protected native static long g_scanner_cur_value(@Ptr long scanner);
	/**
	 * Original signature : <code>guint g_scanner_cur_line(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:201</i>
	 */
	public static guint g_scanner_cur_line(Pointer<GtkLibrary.GScanner > scanner) {
		return Pointer.pointerToAddress(g_scanner_cur_line(Pointer.getPeer(scanner)), .class);
	}
	@Ptr 
	protected native static long g_scanner_cur_line(@Ptr long scanner);
	/**
	 * Original signature : <code>guint g_scanner_cur_position(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:203</i>
	 */
	public static guint g_scanner_cur_position(Pointer<GtkLibrary.GScanner > scanner) {
		return Pointer.pointerToAddress(g_scanner_cur_position(Pointer.getPeer(scanner)), .class);
	}
	@Ptr 
	protected native static long g_scanner_cur_position(@Ptr long scanner);
	/**
	 * Original signature : <code>gboolean g_scanner_eof(GScanner*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:205</i>
	 */
	public static GtkLibrary.gboolean g_scanner_eof(Pointer<GtkLibrary.GScanner > scanner) {
		return Pointer.pointerToAddress(g_scanner_eof(Pointer.getPeer(scanner)), .class);
	}
	@Ptr 
	protected native static long g_scanner_eof(@Ptr long scanner);
	/**
	 * Original signature : <code>guint g_scanner_set_scope(GScanner*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:207</i>
	 */
	public static guint g_scanner_set_scope(Pointer<GtkLibrary.GScanner > scanner, guint scope_id) {
		return Pointer.pointerToAddress(g_scanner_set_scope(Pointer.getPeer(scanner), Pointer.getPeer(scope_id)), .class);
	}
	@Ptr 
	protected native static long g_scanner_set_scope(@Ptr long scanner, @Ptr long scope_id);
	/**
	 * Original signature : <code>void g_scanner_scope_add_symbol(GScanner*, guint, const gchar*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:210</i>
	 */
	public static void g_scanner_scope_add_symbol(Pointer<GtkLibrary.GScanner > scanner, guint scope_id, Pointer<GtkLibrary.gchar > symbol, GtkLibrary.gpointer value) {
		g_scanner_scope_add_symbol(Pointer.getPeer(scanner), Pointer.getPeer(scope_id), Pointer.getPeer(symbol), Pointer.getPeer(value));
	}
	protected native static void g_scanner_scope_add_symbol(@Ptr long scanner, @Ptr long scope_id, @Ptr long symbol, @Ptr long value);
	/**
	 * Original signature : <code>void g_scanner_scope_remove_symbol(GScanner*, guint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:215</i>
	 */
	public static void g_scanner_scope_remove_symbol(Pointer<GtkLibrary.GScanner > scanner, guint scope_id, Pointer<GtkLibrary.gchar > symbol) {
		g_scanner_scope_remove_symbol(Pointer.getPeer(scanner), Pointer.getPeer(scope_id), Pointer.getPeer(symbol));
	}
	protected native static void g_scanner_scope_remove_symbol(@Ptr long scanner, @Ptr long scope_id, @Ptr long symbol);
	/**
	 * Original signature : <code>gpointer g_scanner_scope_lookup_symbol(GScanner*, guint, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:219</i>
	 */
	public static GtkLibrary.gpointer g_scanner_scope_lookup_symbol(Pointer<GtkLibrary.GScanner > scanner, guint scope_id, Pointer<GtkLibrary.gchar > symbol) {
		return Pointer.pointerToAddress(g_scanner_scope_lookup_symbol(Pointer.getPeer(scanner), Pointer.getPeer(scope_id), Pointer.getPeer(symbol)), .class);
	}
	@Ptr 
	protected native static long g_scanner_scope_lookup_symbol(@Ptr long scanner, @Ptr long scope_id, @Ptr long symbol);
	/**
	 * Original signature : <code>void g_scanner_scope_foreach_symbol(GScanner*, guint, GHFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:223</i>
	 */
	public static void g_scanner_scope_foreach_symbol(Pointer<GtkLibrary.GScanner > scanner, guint scope_id, GtkLibrary.GHFunc func, GtkLibrary.gpointer user_data) {
		g_scanner_scope_foreach_symbol(Pointer.getPeer(scanner), Pointer.getPeer(scope_id), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_scanner_scope_foreach_symbol(@Ptr long scanner, @Ptr long scope_id, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>gpointer g_scanner_lookup_symbol(GScanner*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:228</i>
	 */
	public static GtkLibrary.gpointer g_scanner_lookup_symbol(Pointer<GtkLibrary.GScanner > scanner, Pointer<GtkLibrary.gchar > symbol) {
		return Pointer.pointerToAddress(g_scanner_lookup_symbol(Pointer.getPeer(scanner), Pointer.getPeer(symbol)), .class);
	}
	@Ptr 
	protected native static long g_scanner_lookup_symbol(@Ptr long scanner, @Ptr long symbol);
	/**
	 * Original signature : <code>void g_scanner_unexp_token(GScanner*, GTokenType, const gchar*, const gchar*, const gchar*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:231</i>
	 */
	public static void g_scanner_unexp_token(Pointer<GtkLibrary.GScanner > scanner, GtkLibrary.GTokenType expected_token, Pointer<GtkLibrary.gchar > identifier_spec, Pointer<GtkLibrary.gchar > symbol_spec, Pointer<GtkLibrary.gchar > symbol_name, Pointer<GtkLibrary.gchar > message, GtkLibrary.gint is_error) {
		g_scanner_unexp_token(Pointer.getPeer(scanner), Pointer.getPeer(expected_token), Pointer.getPeer(identifier_spec), Pointer.getPeer(symbol_spec), Pointer.getPeer(symbol_name), Pointer.getPeer(message), Pointer.getPeer(is_error));
	}
	protected native static void g_scanner_unexp_token(@Ptr long scanner, @Ptr long expected_token, @Ptr long identifier_spec, @Ptr long symbol_spec, @Ptr long symbol_name, @Ptr long message, @Ptr long is_error);
	/**
	 * Original signature : <code>void g_scanner_error(GScanner*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:239</i>
	 */
	public static void g_scanner_error(Pointer<GtkLibrary.GScanner > scanner, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		g_scanner_error(Pointer.getPeer(scanner), Pointer.getPeer(format), varargs);
	}
	protected native static void g_scanner_error(@Ptr long scanner, @Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>void g_scanner_warn(GScanner*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gscanner.h:243</i>
	 */
	public static void g_scanner_warn(Pointer<GtkLibrary.GScanner > scanner, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		g_scanner_warn(Pointer.getPeer(scanner), Pointer.getPeer(format), varargs);
	}
	protected native static void g_scanner_warn(@Ptr long scanner, @Ptr long format, Object... varargs);
	/**
	 * GSequence<br>
	 * Original signature : <code>GSequence* g_sequence_new(GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:13</i>
	 */
	public static Pointer<GtkLibrary.GSequence > g_sequence_new(GtkLibrary.GDestroyNotify data_destroy) {
		return Pointer.pointerToAddress(g_sequence_new(Pointer.getPeer(data_destroy)), GtkLibrary.GSequence.class);
	}
	@Ptr 
	protected native static long g_sequence_new(@Ptr long data_destroy);
	/**
	 * Original signature : <code>void g_sequence_free(GSequence*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:15</i>
	 */
	public static void g_sequence_free(Pointer<GtkLibrary.GSequence > seq) {
		g_sequence_free(Pointer.getPeer(seq));
	}
	protected native static void g_sequence_free(@Ptr long seq);
	/**
	 * Original signature : <code>gint g_sequence_get_length(GSequence*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:17</i>
	 */
	public static GtkLibrary.gint g_sequence_get_length(Pointer<GtkLibrary.GSequence > seq) {
		return Pointer.pointerToAddress(g_sequence_get_length(Pointer.getPeer(seq)), .class);
	}
	@Ptr 
	protected native static long g_sequence_get_length(@Ptr long seq);
	/**
	 * Original signature : <code>void g_sequence_foreach(GSequence*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:19</i>
	 */
	public static void g_sequence_foreach(Pointer<GtkLibrary.GSequence > seq, GtkLibrary.GFunc func, GtkLibrary.gpointer user_data) {
		g_sequence_foreach(Pointer.getPeer(seq), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_sequence_foreach(@Ptr long seq, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_sequence_foreach_range(GSequenceIter*, GSequenceIter*, GFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:23</i>
	 */
	public static void g_sequence_foreach_range(Pointer<GtkLibrary.GSequenceIter > begin, Pointer<GtkLibrary.GSequenceIter > end, GtkLibrary.GFunc func, GtkLibrary.gpointer user_data) {
		g_sequence_foreach_range(Pointer.getPeer(begin), Pointer.getPeer(end), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_sequence_foreach_range(@Ptr long begin, @Ptr long end, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_sequence_sort(GSequence*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:28</i>
	 */
	public static void g_sequence_sort(Pointer<GtkLibrary.GSequence > seq, GtkLibrary.GCompareDataFunc cmp_func, GtkLibrary.gpointer cmp_data) {
		g_sequence_sort(Pointer.getPeer(seq), Pointer.getPeer(cmp_func), Pointer.getPeer(cmp_data));
	}
	protected native static void g_sequence_sort(@Ptr long seq, @Ptr long cmp_func, @Ptr long cmp_data);
	/**
	 * Original signature : <code>void g_sequence_sort_iter(GSequence*, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:32</i>
	 */
	public static void g_sequence_sort_iter(Pointer<GtkLibrary.GSequence > seq, GtkLibrary.GSequenceIterCompareFunc cmp_func, GtkLibrary.gpointer cmp_data) {
		g_sequence_sort_iter(Pointer.getPeer(seq), Pointer.getPeer(cmp_func), Pointer.getPeer(cmp_data));
	}
	protected native static void g_sequence_sort_iter(@Ptr long seq, @Ptr long cmp_func, @Ptr long cmp_data);
	/**
	 * Getting iters<br>
	 * Original signature : <code>GSequenceIter* g_sequence_get_begin_iter(GSequence*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:39</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_get_begin_iter(Pointer<GtkLibrary.GSequence > seq) {
		return Pointer.pointerToAddress(g_sequence_get_begin_iter(Pointer.getPeer(seq)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_get_begin_iter(@Ptr long seq);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_get_end_iter(GSequence*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:41</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_get_end_iter(Pointer<GtkLibrary.GSequence > seq) {
		return Pointer.pointerToAddress(g_sequence_get_end_iter(Pointer.getPeer(seq)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_get_end_iter(@Ptr long seq);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_get_iter_at_pos(GSequence*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:43</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_get_iter_at_pos(Pointer<GtkLibrary.GSequence > seq, GtkLibrary.gint pos) {
		return Pointer.pointerToAddress(g_sequence_get_iter_at_pos(Pointer.getPeer(seq), Pointer.getPeer(pos)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_get_iter_at_pos(@Ptr long seq, @Ptr long pos);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_append(GSequence*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:46</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_append(Pointer<GtkLibrary.GSequence > seq, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_sequence_append(Pointer.getPeer(seq), Pointer.getPeer(data)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_append(@Ptr long seq, @Ptr long data);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_prepend(GSequence*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:49</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_prepend(Pointer<GtkLibrary.GSequence > seq, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_sequence_prepend(Pointer.getPeer(seq), Pointer.getPeer(data)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_prepend(@Ptr long seq, @Ptr long data);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_insert_before(GSequenceIter*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:52</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_insert_before(Pointer<GtkLibrary.GSequenceIter > iter, GtkLibrary.gpointer data) {
		return Pointer.pointerToAddress(g_sequence_insert_before(Pointer.getPeer(iter), Pointer.getPeer(data)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_insert_before(@Ptr long iter, @Ptr long data);
	/**
	 * Original signature : <code>void g_sequence_move(GSequenceIter*, GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:55</i>
	 */
	public static void g_sequence_move(Pointer<GtkLibrary.GSequenceIter > src, Pointer<GtkLibrary.GSequenceIter > dest) {
		g_sequence_move(Pointer.getPeer(src), Pointer.getPeer(dest));
	}
	protected native static void g_sequence_move(@Ptr long src, @Ptr long dest);
	/**
	 * Original signature : <code>void g_sequence_swap(GSequenceIter*, GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:58</i>
	 */
	public static void g_sequence_swap(Pointer<GtkLibrary.GSequenceIter > a, Pointer<GtkLibrary.GSequenceIter > b) {
		g_sequence_swap(Pointer.getPeer(a), Pointer.getPeer(b));
	}
	protected native static void g_sequence_swap(@Ptr long a, @Ptr long b);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_insert_sorted(GSequence*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:61</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_insert_sorted(Pointer<GtkLibrary.GSequence > seq, GtkLibrary.gpointer data, GtkLibrary.GCompareDataFunc cmp_func, GtkLibrary.gpointer cmp_data) {
		return Pointer.pointerToAddress(g_sequence_insert_sorted(Pointer.getPeer(seq), Pointer.getPeer(data), Pointer.getPeer(cmp_func), Pointer.getPeer(cmp_data)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_insert_sorted(@Ptr long seq, @Ptr long data, @Ptr long cmp_func, @Ptr long cmp_data);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_insert_sorted_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:66</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_insert_sorted_iter(Pointer<GtkLibrary.GSequence > seq, GtkLibrary.gpointer data, GtkLibrary.GSequenceIterCompareFunc iter_cmp, GtkLibrary.gpointer cmp_data) {
		return Pointer.pointerToAddress(g_sequence_insert_sorted_iter(Pointer.getPeer(seq), Pointer.getPeer(data), Pointer.getPeer(iter_cmp), Pointer.getPeer(cmp_data)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_insert_sorted_iter(@Ptr long seq, @Ptr long data, @Ptr long iter_cmp, @Ptr long cmp_data);
	/**
	 * Original signature : <code>void g_sequence_sort_changed(GSequenceIter*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:71</i>
	 */
	public static void g_sequence_sort_changed(Pointer<GtkLibrary.GSequenceIter > iter, GtkLibrary.GCompareDataFunc cmp_func, GtkLibrary.gpointer cmp_data) {
		g_sequence_sort_changed(Pointer.getPeer(iter), Pointer.getPeer(cmp_func), Pointer.getPeer(cmp_data));
	}
	protected native static void g_sequence_sort_changed(@Ptr long iter, @Ptr long cmp_func, @Ptr long cmp_data);
	/**
	 * Original signature : <code>void g_sequence_sort_changed_iter(GSequenceIter*, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:75</i>
	 */
	public static void g_sequence_sort_changed_iter(Pointer<GtkLibrary.GSequenceIter > iter, GtkLibrary.GSequenceIterCompareFunc iter_cmp, GtkLibrary.gpointer cmp_data) {
		g_sequence_sort_changed_iter(Pointer.getPeer(iter), Pointer.getPeer(iter_cmp), Pointer.getPeer(cmp_data));
	}
	protected native static void g_sequence_sort_changed_iter(@Ptr long iter, @Ptr long iter_cmp, @Ptr long cmp_data);
	/**
	 * Original signature : <code>void g_sequence_remove(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:79</i>
	 */
	public static void g_sequence_remove(Pointer<GtkLibrary.GSequenceIter > iter) {
		g_sequence_remove(Pointer.getPeer(iter));
	}
	protected native static void g_sequence_remove(@Ptr long iter);
	/**
	 * Original signature : <code>void g_sequence_remove_range(GSequenceIter*, GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:81</i>
	 */
	public static void g_sequence_remove_range(Pointer<GtkLibrary.GSequenceIter > begin, Pointer<GtkLibrary.GSequenceIter > end) {
		g_sequence_remove_range(Pointer.getPeer(begin), Pointer.getPeer(end));
	}
	protected native static void g_sequence_remove_range(@Ptr long begin, @Ptr long end);
	/**
	 * Original signature : <code>void g_sequence_move_range(GSequenceIter*, GSequenceIter*, GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:84</i>
	 */
	public static void g_sequence_move_range(Pointer<GtkLibrary.GSequenceIter > dest, Pointer<GtkLibrary.GSequenceIter > begin, Pointer<GtkLibrary.GSequenceIter > end) {
		g_sequence_move_range(Pointer.getPeer(dest), Pointer.getPeer(begin), Pointer.getPeer(end));
	}
	protected native static void g_sequence_move_range(@Ptr long dest, @Ptr long begin, @Ptr long end);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_search(GSequence*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:88</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_search(Pointer<GtkLibrary.GSequence > seq, GtkLibrary.gpointer data, GtkLibrary.GCompareDataFunc cmp_func, GtkLibrary.gpointer cmp_data) {
		return Pointer.pointerToAddress(g_sequence_search(Pointer.getPeer(seq), Pointer.getPeer(data), Pointer.getPeer(cmp_func), Pointer.getPeer(cmp_data)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_search(@Ptr long seq, @Ptr long data, @Ptr long cmp_func, @Ptr long cmp_data);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_search_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:93</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_search_iter(Pointer<GtkLibrary.GSequence > seq, GtkLibrary.gpointer data, GtkLibrary.GSequenceIterCompareFunc iter_cmp, GtkLibrary.gpointer cmp_data) {
		return Pointer.pointerToAddress(g_sequence_search_iter(Pointer.getPeer(seq), Pointer.getPeer(data), Pointer.getPeer(iter_cmp), Pointer.getPeer(cmp_data)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_search_iter(@Ptr long seq, @Ptr long data, @Ptr long iter_cmp, @Ptr long cmp_data);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_lookup(GSequence*, gpointer, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:98</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_lookup(Pointer<GtkLibrary.GSequence > seq, GtkLibrary.gpointer data, GtkLibrary.GCompareDataFunc cmp_func, GtkLibrary.gpointer cmp_data) {
		return Pointer.pointerToAddress(g_sequence_lookup(Pointer.getPeer(seq), Pointer.getPeer(data), Pointer.getPeer(cmp_func), Pointer.getPeer(cmp_data)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_lookup(@Ptr long seq, @Ptr long data, @Ptr long cmp_func, @Ptr long cmp_data);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_lookup_iter(GSequence*, gpointer, GSequenceIterCompareFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:103</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_lookup_iter(Pointer<GtkLibrary.GSequence > seq, GtkLibrary.gpointer data, GtkLibrary.GSequenceIterCompareFunc iter_cmp, GtkLibrary.gpointer cmp_data) {
		return Pointer.pointerToAddress(g_sequence_lookup_iter(Pointer.getPeer(seq), Pointer.getPeer(data), Pointer.getPeer(iter_cmp), Pointer.getPeer(cmp_data)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_lookup_iter(@Ptr long seq, @Ptr long data, @Ptr long iter_cmp, @Ptr long cmp_data);
	/**
	 * Dereferencing<br>
	 * Original signature : <code>gpointer g_sequence_get(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:111</i>
	 */
	public static GtkLibrary.gpointer g_sequence_get(Pointer<GtkLibrary.GSequenceIter > iter) {
		return Pointer.pointerToAddress(g_sequence_get(Pointer.getPeer(iter)), .class);
	}
	@Ptr 
	protected native static long g_sequence_get(@Ptr long iter);
	/**
	 * Original signature : <code>void g_sequence_set(GSequenceIter*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:113</i>
	 */
	public static void g_sequence_set(Pointer<GtkLibrary.GSequenceIter > iter, GtkLibrary.gpointer data) {
		g_sequence_set(Pointer.getPeer(iter), Pointer.getPeer(data));
	}
	protected native static void g_sequence_set(@Ptr long iter, @Ptr long data);
	/**
	 * Operations on GSequenceIter *<br>
	 * Original signature : <code>gboolean g_sequence_iter_is_begin(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:118</i>
	 */
	public static GtkLibrary.gboolean g_sequence_iter_is_begin(Pointer<GtkLibrary.GSequenceIter > iter) {
		return Pointer.pointerToAddress(g_sequence_iter_is_begin(Pointer.getPeer(iter)), .class);
	}
	@Ptr 
	protected native static long g_sequence_iter_is_begin(@Ptr long iter);
	/**
	 * Original signature : <code>gboolean g_sequence_iter_is_end(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:120</i>
	 */
	public static GtkLibrary.gboolean g_sequence_iter_is_end(Pointer<GtkLibrary.GSequenceIter > iter) {
		return Pointer.pointerToAddress(g_sequence_iter_is_end(Pointer.getPeer(iter)), .class);
	}
	@Ptr 
	protected native static long g_sequence_iter_is_end(@Ptr long iter);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_iter_next(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:122</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_iter_next(Pointer<GtkLibrary.GSequenceIter > iter) {
		return Pointer.pointerToAddress(g_sequence_iter_next(Pointer.getPeer(iter)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_iter_next(@Ptr long iter);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_iter_prev(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:124</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_iter_prev(Pointer<GtkLibrary.GSequenceIter > iter) {
		return Pointer.pointerToAddress(g_sequence_iter_prev(Pointer.getPeer(iter)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_iter_prev(@Ptr long iter);
	/**
	 * Original signature : <code>gint g_sequence_iter_get_position(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:126</i>
	 */
	public static GtkLibrary.gint g_sequence_iter_get_position(Pointer<GtkLibrary.GSequenceIter > iter) {
		return Pointer.pointerToAddress(g_sequence_iter_get_position(Pointer.getPeer(iter)), .class);
	}
	@Ptr 
	protected native static long g_sequence_iter_get_position(@Ptr long iter);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_iter_move(GSequenceIter*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:128</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_iter_move(Pointer<GtkLibrary.GSequenceIter > iter, GtkLibrary.gint delta) {
		return Pointer.pointerToAddress(g_sequence_iter_move(Pointer.getPeer(iter), Pointer.getPeer(delta)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_iter_move(@Ptr long iter, @Ptr long delta);
	/**
	 * Original signature : <code>GSequence* g_sequence_iter_get_sequence(GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:131</i>
	 */
	public static Pointer<GtkLibrary.GSequence > g_sequence_iter_get_sequence(Pointer<GtkLibrary.GSequenceIter > iter) {
		return Pointer.pointerToAddress(g_sequence_iter_get_sequence(Pointer.getPeer(iter)), GtkLibrary.GSequence.class);
	}
	@Ptr 
	protected native static long g_sequence_iter_get_sequence(@Ptr long iter);
	/**
	 * Search<br>
	 * Original signature : <code>gint g_sequence_iter_compare(GSequenceIter*, GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:136</i>
	 */
	public static GtkLibrary.gint g_sequence_iter_compare(Pointer<GtkLibrary.GSequenceIter > a, Pointer<GtkLibrary.GSequenceIter > b) {
		return Pointer.pointerToAddress(g_sequence_iter_compare(Pointer.getPeer(a), Pointer.getPeer(b)), .class);
	}
	@Ptr 
	protected native static long g_sequence_iter_compare(@Ptr long a, @Ptr long b);
	/**
	 * Original signature : <code>GSequenceIter* g_sequence_range_get_midpoint(GSequenceIter*, GSequenceIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gsequence.h:139</i>
	 */
	public static Pointer<GtkLibrary.GSequenceIter > g_sequence_range_get_midpoint(Pointer<GtkLibrary.GSequenceIter > begin, Pointer<GtkLibrary.GSequenceIter > end) {
		return Pointer.pointerToAddress(g_sequence_range_get_midpoint(Pointer.getPeer(begin), Pointer.getPeer(end)), GtkLibrary.GSequenceIter.class);
	}
	@Ptr 
	protected native static long g_sequence_range_get_midpoint(@Ptr long begin, @Ptr long end);
	/**
	 * Original signature : <code>GQuark g_shell_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gshell.h:15</i>
	 */
	public static GtkLibrary.GQuark g_shell_error_quark() {
		return Pointer.pointerToAddress(g_shell_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_shell_error_quark$2();
	/**
	 * Original signature : <code>gchar* g_shell_quote(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gshell.h:18</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_shell_quote(Pointer<GtkLibrary.gchar > unquoted_string) {
		return Pointer.pointerToAddress(g_shell_quote(Pointer.getPeer(unquoted_string)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_shell_quote(@Ptr long unquoted_string);
	/**
	 * Original signature : <code>gchar* g_shell_unquote(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gshell.h:20</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_shell_unquote(Pointer<GtkLibrary.gchar > quoted_string, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_shell_unquote(Pointer.getPeer(quoted_string), Pointer.getPeer(error)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_shell_unquote(@Ptr long quoted_string, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_shell_parse_argv(const gchar*, gint*, gchar***, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gshell.h:23</i>
	 */
	public static GtkLibrary.gboolean g_shell_parse_argv(Pointer<GtkLibrary.gchar > command_line, Pointer<GtkLibrary.gint > argcp, Pointer<Pointer<Pointer<GtkLibrary.gchar > > > argvp, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_shell_parse_argv(Pointer.getPeer(command_line), Pointer.getPeer(argcp), Pointer.getPeer(argvp), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_shell_parse_argv(@Ptr long command_line, @Ptr long argcp, @Ptr long argvp, @Ptr long error);
	/**
	 * slices - fast allocation/release of small memory blocks<br>
	 * Original signature : <code>gpointer g_slice_alloc(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:6</i>
	 */
	public static GtkLibrary.gpointer g_slice_alloc(gsize block_size) {
		return Pointer.pointerToAddress(g_slice_alloc(Pointer.getPeer(block_size)), .class);
	}
	@Ptr 
	protected native static long g_slice_alloc(@Ptr long block_size);
	/**
	 * Original signature : <code>gpointer g_slice_alloc0(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:8</i>
	 */
	public static GtkLibrary.gpointer g_slice_alloc0(gsize block_size) {
		return Pointer.pointerToAddress(g_slice_alloc0(Pointer.getPeer(block_size)), .class);
	}
	@Ptr 
	protected native static long g_slice_alloc0(@Ptr long block_size);
	/**
	 * Original signature : <code>gpointer g_slice_copy(gsize, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:10</i>
	 */
	public static GtkLibrary.gpointer g_slice_copy(gsize block_size, GtkLibrary.gconstpointer mem_block) {
		return Pointer.pointerToAddress(g_slice_copy(Pointer.getPeer(block_size), Pointer.getPeer(mem_block)), .class);
	}
	@Ptr 
	protected native static long g_slice_copy(@Ptr long block_size, @Ptr long mem_block);
	/**
	 * Original signature : <code>void g_slice_free1(gsize, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:13</i>
	 */
	public static void g_slice_free1(gsize block_size, GtkLibrary.gpointer mem_block) {
		g_slice_free1(Pointer.getPeer(block_size), Pointer.getPeer(mem_block));
	}
	protected native static void g_slice_free1(@Ptr long block_size, @Ptr long mem_block);
	/**
	 * Original signature : <code>void g_slice_free_chain_with_offset(gsize, gpointer, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:16</i>
	 */
	public static void g_slice_free_chain_with_offset(gsize block_size, GtkLibrary.gpointer mem_chain, gsize next_offset) {
		g_slice_free_chain_with_offset(Pointer.getPeer(block_size), Pointer.getPeer(mem_chain), Pointer.getPeer(next_offset));
	}
	protected native static void g_slice_free_chain_with_offset(@Ptr long block_size, @Ptr long mem_chain, @Ptr long next_offset);
	/**
	 * Original signature : <code>void g_slice_set_config(GSliceConfig, gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:59</i>
	 */
	public static void g_slice_set_config(GtkLibrary.GSliceConfig ckey, gint64 value) {
		g_slice_set_config(Pointer.getPeer(ckey), Pointer.getPeer(value));
	}
	protected native static void g_slice_set_config(@Ptr long ckey, @Ptr long value);
	/**
	 * Original signature : <code>gint64 g_slice_get_config(GSliceConfig)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:61</i>
	 */
	public static gint64 g_slice_get_config(GtkLibrary.GSliceConfig ckey) {
		return Pointer.pointerToAddress(g_slice_get_config(Pointer.getPeer(ckey)), .class);
	}
	@Ptr 
	protected native static long g_slice_get_config(@Ptr long ckey);
	/**
	 * Original signature : <code>gint64* g_slice_get_config_state(GSliceConfig, gint64, guint*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gslice.h:63</i>
	 */
	public static Pointer<gint64 > g_slice_get_config_state(GtkLibrary.GSliceConfig ckey, gint64 address, Pointer<guint > n_values) {
		return Pointer.pointerToAddress(g_slice_get_config_state(Pointer.getPeer(ckey), Pointer.getPeer(address), Pointer.getPeer(n_values)), gint64.class);
	}
	@Ptr 
	protected native static long g_slice_get_config_state(@Ptr long ckey, @Ptr long address, @Ptr long n_values);
	/**
	 * Original signature : <code>GQuark g_spawn_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:160</i>
	 */
	public static GtkLibrary.GQuark g_spawn_error_quark() {
		return Pointer.pointerToAddress(g_spawn_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_spawn_error_quark$2();
	/**
	 * Original signature : <code>GQuark g_spawn_exit_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:162</i>
	 */
	public static GtkLibrary.GQuark g_spawn_exit_error_quark() {
		return Pointer.pointerToAddress(g_spawn_exit_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_spawn_exit_error_quark$2();
	/**
	 * Original signature : <code>gboolean g_spawn_async(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, GPid*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:165</i>
	 */
	public static GtkLibrary.gboolean g_spawn_async(Pointer<GtkLibrary.gchar > working_directory, Pointer<Pointer<GtkLibrary.gchar > > argv, Pointer<Pointer<GtkLibrary.gchar > > envp, GtkLibrary.GSpawnFlags flags, GtkLibrary.GSpawnChildSetupFunc child_setup, GtkLibrary.gpointer user_data, Pointer<GtkLibrary.GPid > child_pid, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_spawn_async(Pointer.getPeer(working_directory), Pointer.getPeer(argv), Pointer.getPeer(envp), Pointer.getPeer(flags), Pointer.getPeer(child_setup), Pointer.getPeer(user_data), Pointer.getPeer(child_pid), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_spawn_async(@Ptr long working_directory, @Ptr long argv, @Ptr long envp, @Ptr long flags, @Ptr long child_setup, @Ptr long user_data, @Ptr long child_pid, @Ptr long error);
	/**
	 * Opens pipes for non-NULL standard_output, standard_input, standard_error,<br>
	 * and returns the parent's end of the pipes.<br>
	 * Original signature : <code>gboolean g_spawn_async_with_pipes(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, GPid*, gint*, gint*, gint*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:179</i>
	 */
	public static GtkLibrary.gboolean g_spawn_async_with_pipes(Pointer<GtkLibrary.gchar > working_directory, Pointer<Pointer<GtkLibrary.gchar > > argv, Pointer<Pointer<GtkLibrary.gchar > > envp, GtkLibrary.GSpawnFlags flags, GtkLibrary.GSpawnChildSetupFunc child_setup, GtkLibrary.gpointer user_data, Pointer<GtkLibrary.GPid > child_pid, Pointer<GtkLibrary.gint > standard_input, Pointer<GtkLibrary.gint > standard_output, Pointer<GtkLibrary.gint > standard_error, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_spawn_async_with_pipes(Pointer.getPeer(working_directory), Pointer.getPeer(argv), Pointer.getPeer(envp), Pointer.getPeer(flags), Pointer.getPeer(child_setup), Pointer.getPeer(user_data), Pointer.getPeer(child_pid), Pointer.getPeer(standard_input), Pointer.getPeer(standard_output), Pointer.getPeer(standard_error), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_spawn_async_with_pipes(@Ptr long working_directory, @Ptr long argv, @Ptr long envp, @Ptr long flags, @Ptr long child_setup, @Ptr long user_data, @Ptr long child_pid, @Ptr long standard_input, @Ptr long standard_output, @Ptr long standard_error, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_spawn_sync(const gchar*, gchar**, gchar**, GSpawnFlags, GSpawnChildSetupFunc, gpointer, gchar**, gchar**, gint*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:197</i>
	 */
	public static GtkLibrary.gboolean g_spawn_sync(Pointer<GtkLibrary.gchar > working_directory, Pointer<Pointer<GtkLibrary.gchar > > argv, Pointer<Pointer<GtkLibrary.gchar > > envp, GtkLibrary.GSpawnFlags flags, GtkLibrary.GSpawnChildSetupFunc child_setup, GtkLibrary.gpointer user_data, Pointer<Pointer<GtkLibrary.gchar > > standard_output, Pointer<Pointer<GtkLibrary.gchar > > standard_error, Pointer<GtkLibrary.gint > exit_status, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_spawn_sync(Pointer.getPeer(working_directory), Pointer.getPeer(argv), Pointer.getPeer(envp), Pointer.getPeer(flags), Pointer.getPeer(child_setup), Pointer.getPeer(user_data), Pointer.getPeer(standard_output), Pointer.getPeer(standard_error), Pointer.getPeer(exit_status), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_spawn_sync(@Ptr long working_directory, @Ptr long argv, @Ptr long envp, @Ptr long flags, @Ptr long child_setup, @Ptr long user_data, @Ptr long standard_output, @Ptr long standard_error, @Ptr long exit_status, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_spawn_command_line_sync(const gchar*, gchar**, gchar**, gint*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:209</i>
	 */
	public static GtkLibrary.gboolean g_spawn_command_line_sync(Pointer<GtkLibrary.gchar > command_line, Pointer<Pointer<GtkLibrary.gchar > > standard_output, Pointer<Pointer<GtkLibrary.gchar > > standard_error, Pointer<GtkLibrary.gint > exit_status, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_spawn_command_line_sync(Pointer.getPeer(command_line), Pointer.getPeer(standard_output), Pointer.getPeer(standard_error), Pointer.getPeer(exit_status), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_spawn_command_line_sync(@Ptr long command_line, @Ptr long standard_output, @Ptr long standard_error, @Ptr long exit_status, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_spawn_command_line_async(const gchar*, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:215</i>
	 */
	public static GtkLibrary.gboolean g_spawn_command_line_async(Pointer<GtkLibrary.gchar > command_line, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_spawn_command_line_async(Pointer.getPeer(command_line), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_spawn_command_line_async(@Ptr long command_line, @Ptr long error);
	/**
	 * Original signature : <code>gboolean g_spawn_check_exit_status(gint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:219</i>
	 */
	public static GtkLibrary.gboolean g_spawn_check_exit_status(GtkLibrary.gint exit_status, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_spawn_check_exit_status(Pointer.getPeer(exit_status), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_spawn_check_exit_status(@Ptr long exit_status, @Ptr long error);
	/**
	 * Original signature : <code>void g_spawn_close_pid(GPid)</code><br>
	 * <i>native declaration : glib-2.0/glib/gspawn.h:223</i>
	 */
	public static void g_spawn_close_pid(GtkLibrary.GPid pid) {
		g_spawn_close_pid(Pointer.getPeer(pid));
	}
	protected native static void g_spawn_close_pid(@Ptr long pid);
	/**
	 * Original signature : <code>gchar g_ascii_tolower(gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:54</i>
	 */
	public static GtkLibrary.gchar g_ascii_tolower(GtkLibrary.gchar c) {
		return Pointer.pointerToAddress(g_ascii_tolower(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_ascii_tolower(@Ptr long c);
	/**
	 * Original signature : <code>gchar g_ascii_toupper(gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:56</i>
	 */
	public static GtkLibrary.gchar g_ascii_toupper(GtkLibrary.gchar c) {
		return Pointer.pointerToAddress(g_ascii_toupper(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_ascii_toupper(@Ptr long c);
	/**
	 * Original signature : <code>gint g_ascii_digit_value(gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:59</i>
	 */
	public static GtkLibrary.gint g_ascii_digit_value(GtkLibrary.gchar c) {
		return Pointer.pointerToAddress(g_ascii_digit_value(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_ascii_digit_value(@Ptr long c);
	/**
	 * Original signature : <code>gint g_ascii_xdigit_value(gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:61</i>
	 */
	public static GtkLibrary.gint g_ascii_xdigit_value(GtkLibrary.gchar c) {
		return Pointer.pointerToAddress(g_ascii_xdigit_value(Pointer.getPeer(c)), .class);
	}
	@Ptr 
	protected native static long g_ascii_xdigit_value(@Ptr long c);
	/**
	 * Original signature : <code>gchar* g_strdelimit(gchar*, const gchar*, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:68</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strdelimit(Pointer<GtkLibrary.gchar > string, Pointer<GtkLibrary.gchar > delimiters, GtkLibrary.gchar new_delimiter) {
		return Pointer.pointerToAddress(g_strdelimit(Pointer.getPeer(string), Pointer.getPeer(delimiters), Pointer.getPeer(new_delimiter)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strdelimit(@Ptr long string, @Ptr long delimiters, @Ptr long new_delimiter);
	/**
	 * Original signature : <code>gchar* g_strcanon(gchar*, const gchar*, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:72</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strcanon(Pointer<GtkLibrary.gchar > string, Pointer<GtkLibrary.gchar > valid_chars, GtkLibrary.gchar substitutor) {
		return Pointer.pointerToAddress(g_strcanon(Pointer.getPeer(string), Pointer.getPeer(valid_chars), Pointer.getPeer(substitutor)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strcanon(@Ptr long string, @Ptr long valid_chars, @Ptr long substitutor);
	/**
	 * Original signature : <code>gchar* g_strerror(gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:76</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strerror(GtkLibrary.gint errnum) {
		return Pointer.pointerToAddress(g_strerror(Pointer.getPeer(errnum)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strerror(@Ptr long errnum);
	/**
	 * Original signature : <code>gchar* g_strsignal(gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:78</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strsignal(GtkLibrary.gint signum) {
		return Pointer.pointerToAddress(g_strsignal(Pointer.getPeer(signum)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strsignal(@Ptr long signum);
	/**
	 * Original signature : <code>gchar* g_strreverse(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:80</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strreverse(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_strreverse(Pointer.getPeer(string)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strreverse(@Ptr long string);
	/**
	 * Original signature : <code>gsize g_strlcpy(gchar*, const gchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:82</i>
	 */
	public static gsize g_strlcpy(Pointer<GtkLibrary.gchar > dest, Pointer<GtkLibrary.gchar > src, gsize dest_size) {
		return Pointer.pointerToAddress(g_strlcpy(Pointer.getPeer(dest), Pointer.getPeer(src), Pointer.getPeer(dest_size)), .class);
	}
	@Ptr 
	protected native static long g_strlcpy(@Ptr long dest, @Ptr long src, @Ptr long dest_size);
	/**
	 * Original signature : <code>gsize g_strlcat(gchar*, const gchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:86</i>
	 */
	public static gsize g_strlcat(Pointer<GtkLibrary.gchar > dest, Pointer<GtkLibrary.gchar > src, gsize dest_size) {
		return Pointer.pointerToAddress(g_strlcat(Pointer.getPeer(dest), Pointer.getPeer(src), Pointer.getPeer(dest_size)), .class);
	}
	@Ptr 
	protected native static long g_strlcat(@Ptr long dest, @Ptr long src, @Ptr long dest_size);
	/**
	 * Original signature : <code>gchar* g_strstr_len(const gchar*, gssize, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:90</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strstr_len(Pointer<GtkLibrary.gchar > haystack, GtkLibrary.gssize haystack_len, Pointer<GtkLibrary.gchar > needle) {
		return Pointer.pointerToAddress(g_strstr_len(Pointer.getPeer(haystack), Pointer.getPeer(haystack_len), Pointer.getPeer(needle)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strstr_len(@Ptr long haystack, @Ptr long haystack_len, @Ptr long needle);
	/**
	 * Original signature : <code>gchar* g_strrstr(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:94</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strrstr(Pointer<GtkLibrary.gchar > haystack, Pointer<GtkLibrary.gchar > needle) {
		return Pointer.pointerToAddress(g_strrstr(Pointer.getPeer(haystack), Pointer.getPeer(needle)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strrstr(@Ptr long haystack, @Ptr long needle);
	/**
	 * Original signature : <code>gchar* g_strrstr_len(const gchar*, gssize, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:97</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strrstr_len(Pointer<GtkLibrary.gchar > haystack, GtkLibrary.gssize haystack_len, Pointer<GtkLibrary.gchar > needle) {
		return Pointer.pointerToAddress(g_strrstr_len(Pointer.getPeer(haystack), Pointer.getPeer(haystack_len), Pointer.getPeer(needle)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strrstr_len(@Ptr long haystack, @Ptr long haystack_len, @Ptr long needle);
	/**
	 * Original signature : <code>gboolean g_str_has_suffix(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:102</i>
	 */
	public static GtkLibrary.gboolean g_str_has_suffix(Pointer<GtkLibrary.gchar > str, Pointer<GtkLibrary.gchar > suffix) {
		return Pointer.pointerToAddress(g_str_has_suffix(Pointer.getPeer(str), Pointer.getPeer(suffix)), .class);
	}
	@Ptr 
	protected native static long g_str_has_suffix(@Ptr long str, @Ptr long suffix);
	/**
	 * Original signature : <code>gboolean g_str_has_prefix(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:105</i>
	 */
	public static GtkLibrary.gboolean g_str_has_prefix(Pointer<GtkLibrary.gchar > str, Pointer<GtkLibrary.gchar > prefix) {
		return Pointer.pointerToAddress(g_str_has_prefix(Pointer.getPeer(str), Pointer.getPeer(prefix)), .class);
	}
	@Ptr 
	protected native static long g_str_has_prefix(@Ptr long str, @Ptr long prefix);
	/**
	 * Original signature : <code>gdouble g_strtod(const gchar*, gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:111</i>
	 */
	public static GtkLibrary.gdouble g_strtod(Pointer<GtkLibrary.gchar > nptr, Pointer<Pointer<GtkLibrary.gchar > > endptr) {
		return Pointer.pointerToAddress(g_strtod(Pointer.getPeer(nptr), Pointer.getPeer(endptr)), .class);
	}
	@Ptr 
	protected native static long g_strtod(@Ptr long nptr, @Ptr long endptr);
	/**
	 * Original signature : <code>gdouble g_ascii_strtod(const gchar*, gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:114</i>
	 */
	public static GtkLibrary.gdouble g_ascii_strtod(Pointer<GtkLibrary.gchar > nptr, Pointer<Pointer<GtkLibrary.gchar > > endptr) {
		return Pointer.pointerToAddress(g_ascii_strtod(Pointer.getPeer(nptr), Pointer.getPeer(endptr)), .class);
	}
	@Ptr 
	protected native static long g_ascii_strtod(@Ptr long nptr, @Ptr long endptr);
	/**
	 * Original signature : <code>guint64 g_ascii_strtoull(const gchar*, gchar**, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:117</i>
	 */
	public static GtkLibrary.guint64 g_ascii_strtoull(Pointer<GtkLibrary.gchar > nptr, Pointer<Pointer<GtkLibrary.gchar > > endptr, guint base) {
		return Pointer.pointerToAddress(g_ascii_strtoull(Pointer.getPeer(nptr), Pointer.getPeer(endptr), Pointer.getPeer(base)), .class);
	}
	@Ptr 
	protected native static long g_ascii_strtoull(@Ptr long nptr, @Ptr long endptr, @Ptr long base);
	/**
	 * Original signature : <code>gint64 g_ascii_strtoll(const gchar*, gchar**, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:121</i>
	 */
	public static gint64 g_ascii_strtoll(Pointer<GtkLibrary.gchar > nptr, Pointer<Pointer<GtkLibrary.gchar > > endptr, guint base) {
		return Pointer.pointerToAddress(g_ascii_strtoll(Pointer.getPeer(nptr), Pointer.getPeer(endptr), Pointer.getPeer(base)), .class);
	}
	@Ptr 
	protected native static long g_ascii_strtoll(@Ptr long nptr, @Ptr long endptr, @Ptr long base);
	/**
	 * Original signature : <code>gchar* g_ascii_dtostr(gchar*, gint, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:129</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_ascii_dtostr(Pointer<GtkLibrary.gchar > buffer, GtkLibrary.gint buf_len, GtkLibrary.gdouble d) {
		return Pointer.pointerToAddress(g_ascii_dtostr(Pointer.getPeer(buffer), Pointer.getPeer(buf_len), Pointer.getPeer(d)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_ascii_dtostr(@Ptr long buffer, @Ptr long buf_len, @Ptr long d);
	/**
	 * Original signature : <code>gchar* g_ascii_formatd(gchar*, gint, const gchar*, gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:133</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_ascii_formatd(Pointer<GtkLibrary.gchar > buffer, GtkLibrary.gint buf_len, Pointer<GtkLibrary.gchar > format, GtkLibrary.gdouble d) {
		return Pointer.pointerToAddress(g_ascii_formatd(Pointer.getPeer(buffer), Pointer.getPeer(buf_len), Pointer.getPeer(format), Pointer.getPeer(d)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_ascii_formatd(@Ptr long buffer, @Ptr long buf_len, @Ptr long format, @Ptr long d);
	/**
	 * removes leading spaces<br>
	 * Original signature : <code>gchar* g_strchug(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:140</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strchug(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_strchug(Pointer.getPeer(string)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strchug(@Ptr long string);
	/**
	 * removes trailing spaces<br>
	 * Original signature : <code>gchar* g_strchomp(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:143</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strchomp(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_strchomp(Pointer.getPeer(string)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strchomp(@Ptr long string);
	/**
	 * Original signature : <code>gint g_ascii_strcasecmp(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:148</i>
	 */
	public static GtkLibrary.gint g_ascii_strcasecmp(Pointer<GtkLibrary.gchar > s1, Pointer<GtkLibrary.gchar > s2) {
		return Pointer.pointerToAddress(g_ascii_strcasecmp(Pointer.getPeer(s1), Pointer.getPeer(s2)), .class);
	}
	@Ptr 
	protected native static long g_ascii_strcasecmp(@Ptr long s1, @Ptr long s2);
	/**
	 * Original signature : <code>gint g_ascii_strncasecmp(const gchar*, const gchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:151</i>
	 */
	public static GtkLibrary.gint g_ascii_strncasecmp(Pointer<GtkLibrary.gchar > s1, Pointer<GtkLibrary.gchar > s2, gsize n) {
		return Pointer.pointerToAddress(g_ascii_strncasecmp(Pointer.getPeer(s1), Pointer.getPeer(s2), Pointer.getPeer(n)), .class);
	}
	@Ptr 
	protected native static long g_ascii_strncasecmp(@Ptr long s1, @Ptr long s2, @Ptr long n);
	/**
	 * Original signature : <code>gchar* g_ascii_strdown(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:155</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_ascii_strdown(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_ascii_strdown(Pointer.getPeer(str), Pointer.getPeer(len)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_ascii_strdown(@Ptr long str, @Ptr long len);
	/**
	 * Original signature : <code>gchar* g_ascii_strup(const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:158</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_ascii_strup(Pointer<GtkLibrary.gchar > str, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_ascii_strup(Pointer.getPeer(str), Pointer.getPeer(len)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_ascii_strup(@Ptr long str, @Ptr long len);
	/**
	 * Original signature : <code>gint g_strcasecmp(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:163</i>
	 */
	public static GtkLibrary.gint g_strcasecmp(Pointer<GtkLibrary.gchar > s1, Pointer<GtkLibrary.gchar > s2) {
		return Pointer.pointerToAddress(g_strcasecmp(Pointer.getPeer(s1), Pointer.getPeer(s2)), .class);
	}
	@Ptr 
	protected native static long g_strcasecmp(@Ptr long s1, @Ptr long s2);
	/**
	 * Original signature : <code>gint g_strncasecmp(const gchar*, const gchar*, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:166</i>
	 */
	public static GtkLibrary.gint g_strncasecmp(Pointer<GtkLibrary.gchar > s1, Pointer<GtkLibrary.gchar > s2, guint n) {
		return Pointer.pointerToAddress(g_strncasecmp(Pointer.getPeer(s1), Pointer.getPeer(s2), Pointer.getPeer(n)), .class);
	}
	@Ptr 
	protected native static long g_strncasecmp(@Ptr long s1, @Ptr long s2, @Ptr long n);
	/**
	 * Original signature : <code>gchar* g_strdown(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:170</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strdown(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_strdown(Pointer.getPeer(string)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strdown(@Ptr long string);
	/**
	 * Original signature : <code>gchar* g_strup(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:172</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strup(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_strup(Pointer.getPeer(string)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strup(@Ptr long string);
	/**
	 * String utility functions that return a newly allocated string which<br>
	 * ought to be freed with g_free from the caller at some point.<br>
	 * Original signature : <code>gchar* g_strdup(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:179</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strdup(Pointer<GtkLibrary.gchar > str) {
		return Pointer.pointerToAddress(g_strdup(Pointer.getPeer(str)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strdup(@Ptr long str);
	/**
	 * Original signature : <code>gchar* g_strdup_printf(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:181</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strdup_printf(Pointer<GtkLibrary.gchar > format, Object... varargs) {
		return Pointer.pointerToAddress(g_strdup_printf(Pointer.getPeer(format), varargs), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strdup_printf(@Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>gchar* g_strdup_vprintf(const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:184</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strdup_vprintf(Pointer<GtkLibrary.gchar > format, GtkLibrary.__builtin_va_list args) {
		return Pointer.pointerToAddress(g_strdup_vprintf(Pointer.getPeer(format), Pointer.getPeer(args)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strdup_vprintf(@Ptr long format, @Ptr long args);
	/**
	 * Original signature : <code>gchar* g_strndup(const gchar*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:188</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strndup(Pointer<GtkLibrary.gchar > str, gsize n) {
		return Pointer.pointerToAddress(g_strndup(Pointer.getPeer(str), Pointer.getPeer(n)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strndup(@Ptr long str, @Ptr long n);
	/**
	 * Original signature : <code>gchar* g_strnfill(gsize, gchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:191</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strnfill(gsize length, GtkLibrary.gchar fill_char) {
		return Pointer.pointerToAddress(g_strnfill(Pointer.getPeer(length), Pointer.getPeer(fill_char)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strnfill(@Ptr long length, @Ptr long fill_char);
	/**
	 * Original signature : <code>gchar* g_strconcat(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:194</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strconcat(Pointer<GtkLibrary.gchar > string1, Object... varargs) {
		return Pointer.pointerToAddress(g_strconcat(Pointer.getPeer(string1), varargs), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strconcat(@Ptr long string1, Object... varargs);
	/**
	 * Original signature : <code>gchar* g_strjoin(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:197</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strjoin(Pointer<GtkLibrary.gchar > separator, Object... varargs) {
		return Pointer.pointerToAddress(g_strjoin(Pointer.getPeer(separator), varargs), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strjoin(@Ptr long separator, Object... varargs);
	/**
	 * Make a copy of a string interpreting C string -style escape<br>
	 * sequences. Inverse of g_strescape. The recognized sequences are \b<br>
	 * \f \n \r \t \\ \" and the octal format.<br>
	 * Original signature : <code>gchar* g_strcompress(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:205</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strcompress(Pointer<GtkLibrary.gchar > source) {
		return Pointer.pointerToAddress(g_strcompress(Pointer.getPeer(source)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strcompress(@Ptr long source);
	/**
	 * Copy a string escaping nonprintable characters like in C strings.<br>
	 * Inverse of g_strcompress. The exceptions parameter, if non-NULL, points<br>
	 * to a string containing characters that are not to be escaped.<br>
	 * * Deprecated API: gchar* g_strescape (const gchar *source);<br>
	 * Luckily this function wasn't used much, using NULL as second parameter<br>
	 * provides mostly identical semantics.<br>
	 * Original signature : <code>gchar* g_strescape(const gchar*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:216</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strescape(Pointer<GtkLibrary.gchar > source, Pointer<GtkLibrary.gchar > exceptions) {
		return Pointer.pointerToAddress(g_strescape(Pointer.getPeer(source), Pointer.getPeer(exceptions)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strescape(@Ptr long source, @Ptr long exceptions);
	/**
	 * Original signature : <code>gpointer g_memdup(gconstpointer, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:220</i>
	 */
	public static GtkLibrary.gpointer g_memdup(GtkLibrary.gconstpointer mem, guint byte_size) {
		return Pointer.pointerToAddress(g_memdup(Pointer.getPeer(mem), Pointer.getPeer(byte_size)), .class);
	}
	@Ptr 
	protected native static long g_memdup(@Ptr long mem, @Ptr long byte_size);
	/**
	 * NULL terminated string arrays.<br>
	 * g_strsplit(), g_strsplit_set() split up string into max_tokens tokens<br>
	 * at delim and return a newly allocated string array.<br>
	 * g_strjoinv() concatenates all of str_array's strings, sliding in an<br>
	 * optional separator, the returned string is newly allocated.<br>
	 * g_strfreev() frees the array itself and all of its strings.<br>
	 * g_strdupv() copies a NULL-terminated array of strings<br>
	 * g_strv_length() returns the length of a NULL-terminated array of strings<br>
	 * Original signature : <code>gchar** g_strsplit(const gchar*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:233</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_strsplit(Pointer<GtkLibrary.gchar > string, Pointer<GtkLibrary.gchar > delimiter, GtkLibrary.gint max_tokens) {
		return Pointer.pointerToAddress(g_strsplit(Pointer.getPeer(string), Pointer.getPeer(delimiter), Pointer.getPeer(max_tokens)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_strsplit(@Ptr long string, @Ptr long delimiter, @Ptr long max_tokens);
	/**
	 * Original signature : <code>gchar** g_strsplit_set(const gchar*, const gchar*, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:237</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_strsplit_set(Pointer<GtkLibrary.gchar > string, Pointer<GtkLibrary.gchar > delimiters, GtkLibrary.gint max_tokens) {
		return Pointer.pointerToAddress(g_strsplit_set(Pointer.getPeer(string), Pointer.getPeer(delimiters), Pointer.getPeer(max_tokens)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_strsplit_set(@Ptr long string, @Ptr long delimiters, @Ptr long max_tokens);
	/**
	 * Original signature : <code>gchar* g_strjoinv(const gchar*, gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:241</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_strjoinv(Pointer<GtkLibrary.gchar > separator, Pointer<Pointer<GtkLibrary.gchar > > str_array) {
		return Pointer.pointerToAddress(g_strjoinv(Pointer.getPeer(separator), Pointer.getPeer(str_array)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_strjoinv(@Ptr long separator, @Ptr long str_array);
	/**
	 * Original signature : <code>void g_strfreev(gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:244</i>
	 */
	public static void g_strfreev(Pointer<Pointer<GtkLibrary.gchar > > str_array) {
		g_strfreev(Pointer.getPeer(str_array));
	}
	protected native static void g_strfreev(@Ptr long str_array);
	/**
	 * Original signature : <code>gchar** g_strdupv(gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:246</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_strdupv(Pointer<Pointer<GtkLibrary.gchar > > str_array) {
		return Pointer.pointerToAddress(g_strdupv(Pointer.getPeer(str_array)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_strdupv(@Ptr long str_array);
	/**
	 * Original signature : <code>guint g_strv_length(gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:248</i>
	 */
	public static guint g_strv_length(Pointer<Pointer<GtkLibrary.gchar > > str_array) {
		return Pointer.pointerToAddress(g_strv_length(Pointer.getPeer(str_array)), .class);
	}
	@Ptr 
	protected native static long g_strv_length(@Ptr long str_array);
	/**
	 * Original signature : <code>gchar* g_stpcpy(gchar*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstrfuncs.h:251</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_stpcpy(Pointer<GtkLibrary.gchar > dest, Pointer<Byte > src) {
		return Pointer.pointerToAddress(g_stpcpy(Pointer.getPeer(dest), Pointer.getPeer(src)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_stpcpy(@Ptr long dest, @Ptr long src);
	/**
	 * Original signature : <code>GStringChunk* g_string_chunk_new(gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstringchunk.h:6</i>
	 */
	public static Pointer<GtkLibrary.GStringChunk > g_string_chunk_new(gsize size) {
		return Pointer.pointerToAddress(g_string_chunk_new(Pointer.getPeer(size)), GtkLibrary.GStringChunk.class);
	}
	@Ptr 
	protected native static long g_string_chunk_new(@Ptr long size);
	/**
	 * Original signature : <code>void g_string_chunk_free(GStringChunk*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstringchunk.h:8</i>
	 */
	public static void g_string_chunk_free(Pointer<GtkLibrary.GStringChunk > chunk) {
		g_string_chunk_free(Pointer.getPeer(chunk));
	}
	protected native static void g_string_chunk_free(@Ptr long chunk);
	/**
	 * Original signature : <code>void g_string_chunk_clear(GStringChunk*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstringchunk.h:10</i>
	 */
	public static void g_string_chunk_clear(Pointer<GtkLibrary.GStringChunk > chunk) {
		g_string_chunk_clear(Pointer.getPeer(chunk));
	}
	protected native static void g_string_chunk_clear(@Ptr long chunk);
	/**
	 * Original signature : <code>gchar* g_string_chunk_insert(GStringChunk*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstringchunk.h:12</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_string_chunk_insert(Pointer<GtkLibrary.GStringChunk > chunk, Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_string_chunk_insert(Pointer.getPeer(chunk), Pointer.getPeer(string)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_string_chunk_insert(@Ptr long chunk, @Ptr long string);
	/**
	 * Original signature : <code>gchar* g_string_chunk_insert_len(GStringChunk*, const gchar*, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstringchunk.h:15</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_string_chunk_insert_len(Pointer<GtkLibrary.GStringChunk > chunk, Pointer<GtkLibrary.gchar > string, GtkLibrary.gssize len) {
		return Pointer.pointerToAddress(g_string_chunk_insert_len(Pointer.getPeer(chunk), Pointer.getPeer(string), Pointer.getPeer(len)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_string_chunk_insert_len(@Ptr long chunk, @Ptr long string, @Ptr long len);
	/**
	 * Original signature : <code>gchar* g_string_chunk_insert_const(GStringChunk*, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstringchunk.h:19</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_string_chunk_insert_const(Pointer<GtkLibrary.GStringChunk > chunk, Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_string_chunk_insert_const(Pointer.getPeer(chunk), Pointer.getPeer(string)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_string_chunk_insert_const(@Ptr long chunk, @Ptr long string);
	/**
	 * Original signature : <code>int g_strcmp0(const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:61</i>
	 */
	public static int g_strcmp0(Pointer<Byte > str1, Pointer<Byte > str2) {
		return g_strcmp0(Pointer.getPeer(str1), Pointer.getPeer(str2));
	}
	protected native static int g_strcmp0(@Ptr long str1, @Ptr long str2);
	/**
	 * report performance results<br>
	 * Original signature : <code>void g_test_minimized_result(double, const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:66</i>
	 */
	public static void g_test_minimized_result(double minimized_quantity, Pointer<Byte > format, Object... varargs) {
		g_test_minimized_result(minimized_quantity, Pointer.getPeer(format), varargs);
	}
	protected native static void g_test_minimized_result(double minimized_quantity, @Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>void g_test_maximized_result(double, const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:70</i>
	 */
	public static void g_test_maximized_result(double maximized_quantity, Pointer<Byte > format, Object... varargs) {
		g_test_maximized_result(maximized_quantity, Pointer.getPeer(format), varargs);
	}
	protected native static void g_test_maximized_result(double maximized_quantity, @Ptr long format, Object... varargs);
	/**
	 * initialize testing framework<br>
	 * Original signature : <code>void g_test_init(int*, char***, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:76</i>
	 */
	public static void g_test_init(Pointer<Integer > argc, Pointer<Pointer<Pointer<Byte > > > argv, Object... varargs) {
		g_test_init(Pointer.getPeer(argc), Pointer.getPeer(argv), varargs);
	}
	protected native static void g_test_init(@Ptr long argc, @Ptr long argv, Object... varargs);
	/**
	 * Original signature : <code>gboolean g_test_subprocess()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:89</i>
	 */
	public static GtkLibrary.gboolean g_test_subprocess() {
		return Pointer.pointerToAddress(g_test_subprocess$2(), .class);
	}
	@Ptr 
	protected native static long g_test_subprocess$2();
	/**
	 * run all tests under toplevel suite (path: /)<br>
	 * Original signature : <code>int g_test_run()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:93</i>
	 */
	public static native int g_test_run();
	/**
	 * hook up a test functions under test path<br>
	 * Original signature : <code>void g_test_add_func(const char*, GTestFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:96</i>
	 */
	public static void g_test_add_func(Pointer<Byte > testpath, GtkLibrary.GTestFunc test_func) {
		g_test_add_func(Pointer.getPeer(testpath), Pointer.getPeer(test_func));
	}
	protected native static void g_test_add_func(@Ptr long testpath, @Ptr long test_func);
	/**
	 * Original signature : <code>void g_test_add_data_func(const char*, gconstpointer, GTestDataFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:100</i>
	 */
	public static void g_test_add_data_func(Pointer<Byte > testpath, GtkLibrary.gconstpointer test_data, GtkLibrary.GTestDataFunc test_func) {
		g_test_add_data_func(Pointer.getPeer(testpath), Pointer.getPeer(test_data), Pointer.getPeer(test_func));
	}
	protected native static void g_test_add_data_func(@Ptr long testpath, @Ptr long test_data, @Ptr long test_func);
	/**
	 * Original signature : <code>void g_test_add_data_func_full(const char*, gpointer, GTestDataFunc, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:105</i>
	 */
	public static void g_test_add_data_func_full(Pointer<Byte > testpath, GtkLibrary.gpointer test_data, GtkLibrary.GTestDataFunc test_func, GtkLibrary.GDestroyNotify data_free_func) {
		g_test_add_data_func_full(Pointer.getPeer(testpath), Pointer.getPeer(test_data), Pointer.getPeer(test_func), Pointer.getPeer(data_free_func));
	}
	protected native static void g_test_add_data_func_full(@Ptr long testpath, @Ptr long test_data, @Ptr long test_func, @Ptr long data_free_func);
	/**
	 * tell about failure<br>
	 * Original signature : <code>void g_test_fail()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:112</i>
	 */
	public static native void g_test_fail();
	/**
	 * Original signature : <code>void g_test_incomplete(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:114</i>
	 */
	public static void g_test_incomplete(Pointer<GtkLibrary.gchar > msg) {
		g_test_incomplete(Pointer.getPeer(msg));
	}
	protected native static void g_test_incomplete(@Ptr long msg);
	/**
	 * Original signature : <code>void g_test_skip(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:116</i>
	 */
	public static void g_test_skip(Pointer<GtkLibrary.gchar > msg) {
		g_test_skip(Pointer.getPeer(msg));
	}
	protected native static void g_test_skip(@Ptr long msg);
	/**
	 * Original signature : <code>gboolean g_test_failed()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:118</i>
	 */
	public static GtkLibrary.gboolean g_test_failed() {
		return Pointer.pointerToAddress(g_test_failed$2(), .class);
	}
	@Ptr 
	protected native static long g_test_failed$2();
	/**
	 * Original signature : <code>void g_test_set_nonfatal_assertions()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:120</i>
	 */
	public static native void g_test_set_nonfatal_assertions();
	/**
	 * add test messages to the test report<br>
	 * Original signature : <code>void g_test_message(const char*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:137</i>
	 */
	public static void g_test_message(Pointer<Byte > format, Object... varargs) {
		g_test_message(Pointer.getPeer(format), varargs);
	}
	protected native static void g_test_message(@Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>void g_test_bug_base(const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:140</i>
	 */
	public static void g_test_bug_base(Pointer<Byte > uri_pattern) {
		g_test_bug_base(Pointer.getPeer(uri_pattern));
	}
	protected native static void g_test_bug_base(@Ptr long uri_pattern);
	/**
	 * Original signature : <code>void g_test_bug(const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:142</i>
	 */
	public static void g_test_bug(Pointer<Byte > bug_uri_snippet) {
		g_test_bug(Pointer.getPeer(bug_uri_snippet));
	}
	protected native static void g_test_bug(@Ptr long bug_uri_snippet);
	/**
	 * measure test timings<br>
	 * Original signature : <code>void g_test_timer_start()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:145</i>
	 */
	public static native void g_test_timer_start();
	/**
	 * Original signature : <code>double g_test_timer_elapsed()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:147</i>
	 */
	public static native double g_test_timer_elapsed();
	/**
	 * Original signature : <code>double g_test_timer_last()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:149</i>
	 */
	public static native double g_test_timer_last();
	/**
	 * automatically g_free or g_object_unref upon teardown<br>
	 * Original signature : <code>void g_test_queue_free(gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:153</i>
	 */
	public static void g_test_queue_free(GtkLibrary.gpointer gfree_pointer) {
		g_test_queue_free(Pointer.getPeer(gfree_pointer));
	}
	protected native static void g_test_queue_free(@Ptr long gfree_pointer);
	/**
	 * Original signature : <code>void g_test_queue_destroy(GDestroyNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:155</i>
	 */
	public static void g_test_queue_destroy(GtkLibrary.GDestroyNotify destroy_func, GtkLibrary.gpointer destroy_data) {
		g_test_queue_destroy(Pointer.getPeer(destroy_func), Pointer.getPeer(destroy_data));
	}
	protected native static void g_test_queue_destroy(@Ptr long destroy_func, @Ptr long destroy_data);
	/**
	 * Original signature : <code>gboolean g_test_trap_fork(guint64, GTestTrapFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:166</i>
	 */
	public static GtkLibrary.gboolean g_test_trap_fork(GtkLibrary.guint64 usec_timeout, GtkLibrary.GTestTrapFlags test_trap_flags) {
		return Pointer.pointerToAddress(g_test_trap_fork(Pointer.getPeer(usec_timeout), Pointer.getPeer(test_trap_flags)), .class);
	}
	@Ptr 
	protected native static long g_test_trap_fork(@Ptr long usec_timeout, @Ptr long test_trap_flags);
	/**
	 * Original signature : <code>void g_test_trap_subprocess(const char*, guint64, GTestSubprocessFlags)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:176</i>
	 */
	public static void g_test_trap_subprocess(Pointer<Byte > test_path, GtkLibrary.guint64 usec_timeout, GtkLibrary.GTestSubprocessFlags test_flags) {
		g_test_trap_subprocess(Pointer.getPeer(test_path), Pointer.getPeer(usec_timeout), Pointer.getPeer(test_flags));
	}
	protected native static void g_test_trap_subprocess(@Ptr long test_path, @Ptr long usec_timeout, @Ptr long test_flags);
	/**
	 * Original signature : <code>gboolean g_test_trap_has_passed()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:181</i>
	 */
	public static GtkLibrary.gboolean g_test_trap_has_passed() {
		return Pointer.pointerToAddress(g_test_trap_has_passed$2(), .class);
	}
	@Ptr 
	protected native static long g_test_trap_has_passed$2();
	/**
	 * Original signature : <code>gboolean g_test_trap_reached_timeout()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:183</i>
	 */
	public static GtkLibrary.gboolean g_test_trap_reached_timeout() {
		return Pointer.pointerToAddress(g_test_trap_reached_timeout$2(), .class);
	}
	@Ptr 
	protected native static long g_test_trap_reached_timeout$2();
	/**
	 * Original signature : <code>gint32 g_test_rand_int()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:194</i>
	 */
	public static GtkLibrary.gint32 g_test_rand_int() {
		return Pointer.pointerToAddress(g_test_rand_int$2(), .class);
	}
	@Ptr 
	protected native static long g_test_rand_int$2();
	/**
	 * Original signature : <code>gint32 g_test_rand_int_range(gint32, gint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:196</i>
	 */
	public static GtkLibrary.gint32 g_test_rand_int_range(GtkLibrary.gint32 begin, GtkLibrary.gint32 end) {
		return Pointer.pointerToAddress(g_test_rand_int_range(Pointer.getPeer(begin), Pointer.getPeer(end)), .class);
	}
	@Ptr 
	protected native static long g_test_rand_int_range(@Ptr long begin, @Ptr long end);
	/**
	 * Original signature : <code>double g_test_rand_double()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:199</i>
	 */
	public static native double g_test_rand_double();
	/**
	 * Original signature : <code>double g_test_rand_double_range(double, double)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:201</i>
	 */
	public static native double g_test_rand_double_range(double range_start, double range_end);
	/**
	 * semi-internal API<br>
	 * Original signature : <code>GTestCase* g_test_create_case(const char*, gsize, gconstpointer, GTestFixtureFunc, GTestFixtureFunc, GTestFixtureFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:206</i>
	 */
	public static Pointer<GtkLibrary.GTestCase > g_test_create_case(Pointer<Byte > test_name, gsize data_size, GtkLibrary.gconstpointer test_data, GtkLibrary.GTestFixtureFunc data_setup, GtkLibrary.GTestFixtureFunc data_test, GtkLibrary.GTestFixtureFunc data_teardown) {
		return Pointer.pointerToAddress(g_test_create_case(Pointer.getPeer(test_name), Pointer.getPeer(data_size), Pointer.getPeer(test_data), Pointer.getPeer(data_setup), Pointer.getPeer(data_test), Pointer.getPeer(data_teardown)), GtkLibrary.GTestCase.class);
	}
	@Ptr 
	protected native static long g_test_create_case(@Ptr long test_name, @Ptr long data_size, @Ptr long test_data, @Ptr long data_setup, @Ptr long data_test, @Ptr long data_teardown);
	/**
	 * Original signature : <code>GTestSuite* g_test_create_suite(const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:213</i>
	 */
	public static Pointer<GtkLibrary.GTestSuite > g_test_create_suite(Pointer<Byte > suite_name) {
		return Pointer.pointerToAddress(g_test_create_suite(Pointer.getPeer(suite_name)), GtkLibrary.GTestSuite.class);
	}
	@Ptr 
	protected native static long g_test_create_suite(@Ptr long suite_name);
	/**
	 * Original signature : <code>GTestSuite* g_test_get_root()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:215</i>
	 */
	public static Pointer<GtkLibrary.GTestSuite > g_test_get_root() {
		return Pointer.pointerToAddress(g_test_get_root$2(), GtkLibrary.GTestSuite.class);
	}
	@Ptr 
	protected native static long g_test_get_root$2();
	/**
	 * Original signature : <code>void g_test_suite_add(GTestSuite*, GTestCase*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:217</i>
	 */
	public static void g_test_suite_add(Pointer<GtkLibrary.GTestSuite > suite, Pointer<GtkLibrary.GTestCase > test_case) {
		g_test_suite_add(Pointer.getPeer(suite), Pointer.getPeer(test_case));
	}
	protected native static void g_test_suite_add(@Ptr long suite, @Ptr long test_case);
	/**
	 * Original signature : <code>void g_test_suite_add_suite(GTestSuite*, GTestSuite*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:220</i>
	 */
	public static void g_test_suite_add_suite(Pointer<GtkLibrary.GTestSuite > suite, Pointer<GtkLibrary.GTestSuite > nestedsuite) {
		g_test_suite_add_suite(Pointer.getPeer(suite), Pointer.getPeer(nestedsuite));
	}
	protected native static void g_test_suite_add_suite(@Ptr long suite, @Ptr long nestedsuite);
	/**
	 * Original signature : <code>int g_test_run_suite(GTestSuite*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:223</i>
	 */
	public static int g_test_run_suite(Pointer<GtkLibrary.GTestSuite > suite) {
		return g_test_run_suite(Pointer.getPeer(suite));
	}
	protected native static int g_test_run_suite(@Ptr long suite);
	/**
	 * internal ABI<br>
	 * Original signature : <code>void g_test_trap_assertions(const char*, const char*, int, const char*, guint64, const char*)</code><br>
	 * @param assertion_flags 0-pass, 1-fail, 2-outpattern, 4-errpattern<br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:227</i>
	 */
	public static void g_test_trap_assertions(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, GtkLibrary.guint64 assertion_flags, Pointer<Byte > pattern) {
		g_test_trap_assertions(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(assertion_flags), Pointer.getPeer(pattern));
	}
	protected native static void g_test_trap_assertions(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long assertion_flags, @Ptr long pattern);
	/**
	 * Original signature : <code>void g_assertion_message(const char*, const char*, int, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:234</i>
	 */
	public static void g_assertion_message(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, Pointer<Byte > message) {
		g_assertion_message(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(message));
	}
	protected native static void g_assertion_message(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long message);
	/**
	 * Original signature : <code>void g_assertion_message_expr(const char*, const char*, int, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:240</i>
	 */
	public static void g_assertion_message_expr(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, Pointer<Byte > expr) {
		g_assertion_message_expr(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(expr));
	}
	protected native static void g_assertion_message_expr(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long expr);
	/**
	 * Original signature : <code>void g_assertion_message_cmpstr(const char*, const char*, int, const char*, const char*, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:246</i>
	 */
	public static void g_assertion_message_cmpstr(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, Pointer<Byte > expr, Pointer<Byte > arg1, Pointer<Byte > cmp, Pointer<Byte > arg2) {
		g_assertion_message_cmpstr(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(expr), Pointer.getPeer(arg1), Pointer.getPeer(cmp), Pointer.getPeer(arg2));
	}
	protected native static void g_assertion_message_cmpstr(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long expr, @Ptr long arg1, @Ptr long cmp, @Ptr long arg2);
	/**
	 * Original signature : <code>void g_assertion_message_cmpnum(const char*, const char*, int, const char*, const char*, long double, const char*, long double, char)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:255</i>
	 */
	public static void g_assertion_message_cmpnum(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, Pointer<Byte > expr, double arg1, Pointer<Byte > cmp, double arg2, byte numtype) {
		g_assertion_message_cmpnum(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(expr), arg1, Pointer.getPeer(cmp), arg2, numtype);
	}
	protected native static void g_assertion_message_cmpnum(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long expr, double arg1, @Ptr long cmp, double arg2, byte numtype);
	/**
	 * Original signature : <code>void g_assertion_message_error(const char*, const char*, int, const char*, const char*, const GError*, GQuark, int)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:265</i>
	 */
	public static void g_assertion_message_error(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func, Pointer<Byte > expr, Pointer<GError > error, GtkLibrary.GQuark error_domain, int error_code) {
		g_assertion_message_error(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func), Pointer.getPeer(expr), Pointer.getPeer(error), Pointer.getPeer(error_domain), error_code);
	}
	protected native static void g_assertion_message_error(@Ptr long domain, @Ptr long file, int line, @Ptr long func, @Ptr long expr, @Ptr long error, @Ptr long error_domain, int error_code);
	/**
	 * Original signature : <code>void g_test_add_vtable(const char*, gsize, gconstpointer, GTestFixtureFunc, GTestFixtureFunc, GTestFixtureFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:274</i>
	 */
	public static void g_test_add_vtable(Pointer<Byte > testpath, gsize data_size, GtkLibrary.gconstpointer test_data, GtkLibrary.GTestFixtureFunc data_setup, GtkLibrary.GTestFixtureFunc data_test, GtkLibrary.GTestFixtureFunc data_teardown) {
		g_test_add_vtable(Pointer.getPeer(testpath), Pointer.getPeer(data_size), Pointer.getPeer(test_data), Pointer.getPeer(data_setup), Pointer.getPeer(data_test), Pointer.getPeer(data_teardown));
	}
	protected native static void g_test_add_vtable(@Ptr long testpath, @Ptr long data_size, @Ptr long test_data, @Ptr long data_setup, @Ptr long data_test, @Ptr long data_teardown);
	/**
	 * Original signature : <code>char* g_test_log_type_name(GTestLogType)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:320</i>
	 */
	public static Pointer<Byte > g_test_log_type_name(GtkLibrary.GTestLogType log_type) {
		return Pointer.pointerToAddress(g_test_log_type_name(Pointer.getPeer(log_type)), Byte.class);
	}
	@Ptr 
	protected native static long g_test_log_type_name(@Ptr long log_type);
	/**
	 * Original signature : <code>GTestLogBuffer* g_test_log_buffer_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:322</i>
	 */
	public static Pointer<GtkLibrary.GTestLogBuffer > g_test_log_buffer_new() {
		return Pointer.pointerToAddress(g_test_log_buffer_new$2(), GtkLibrary.GTestLogBuffer.class);
	}
	@Ptr 
	protected native static long g_test_log_buffer_new$2();
	/**
	 * Original signature : <code>void g_test_log_buffer_free(GTestLogBuffer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:324</i>
	 */
	public static void g_test_log_buffer_free(Pointer<GtkLibrary.GTestLogBuffer > tbuffer) {
		g_test_log_buffer_free(Pointer.getPeer(tbuffer));
	}
	protected native static void g_test_log_buffer_free(@Ptr long tbuffer);
	/**
	 * Original signature : <code>void g_test_log_buffer_push(GTestLogBuffer*, guint, const guint8*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:326</i>
	 */
	public static void g_test_log_buffer_push(Pointer<GtkLibrary.GTestLogBuffer > tbuffer, guint n_bytes, Pointer<GtkLibrary.guint8 > bytes) {
		g_test_log_buffer_push(Pointer.getPeer(tbuffer), Pointer.getPeer(n_bytes), Pointer.getPeer(bytes));
	}
	protected native static void g_test_log_buffer_push(@Ptr long tbuffer, @Ptr long n_bytes, @Ptr long bytes);
	/**
	 * Original signature : <code>GTestLogMsg* g_test_log_buffer_pop(GTestLogBuffer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:330</i>
	 */
	public static Pointer<GtkLibrary.GTestLogMsg > g_test_log_buffer_pop(Pointer<GtkLibrary.GTestLogBuffer > tbuffer) {
		return Pointer.pointerToAddress(g_test_log_buffer_pop(Pointer.getPeer(tbuffer)), GtkLibrary.GTestLogMsg.class);
	}
	@Ptr 
	protected native static long g_test_log_buffer_pop(@Ptr long tbuffer);
	/**
	 * Original signature : <code>void g_test_log_msg_free(GTestLogMsg*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:332</i>
	 */
	public static void g_test_log_msg_free(Pointer<GtkLibrary.GTestLogMsg > tmsg) {
		g_test_log_msg_free(Pointer.getPeer(tmsg));
	}
	protected native static void g_test_log_msg_free(@Ptr long tmsg);
	/**
	 * Original signature : <code>void g_test_log_set_fatal_handler(GTestLogFatalFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:352</i>
	 */
	public static void g_test_log_set_fatal_handler(GtkLibrary.GTestLogFatalFunc log_func, GtkLibrary.gpointer user_data) {
		g_test_log_set_fatal_handler(Pointer.getPeer(log_func), Pointer.getPeer(user_data));
	}
	protected native static void g_test_log_set_fatal_handler(@Ptr long log_func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_test_expect_message(const gchar*, GLogLevelFlags, const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:357</i>
	 */
	public static void g_test_expect_message(Pointer<GtkLibrary.gchar > log_domain, GtkLibrary.GLogLevelFlags log_level, Pointer<GtkLibrary.gchar > pattern) {
		g_test_expect_message(Pointer.getPeer(log_domain), Pointer.getPeer(log_level), Pointer.getPeer(pattern));
	}
	protected native static void g_test_expect_message(@Ptr long log_domain, @Ptr long log_level, @Ptr long pattern);
	/**
	 * Original signature : <code>void g_test_assert_expected_messages_internal(const char*, const char*, int, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:361</i>
	 */
	public static void g_test_assert_expected_messages_internal(Pointer<Byte > domain, Pointer<Byte > file, int line, Pointer<Byte > func) {
		g_test_assert_expected_messages_internal(Pointer.getPeer(domain), Pointer.getPeer(file), line, Pointer.getPeer(func));
	}
	protected native static void g_test_assert_expected_messages_internal(@Ptr long domain, @Ptr long file, int line, @Ptr long func);
	/**
	 * Original signature : <code>gchar* g_test_build_filename(GTestFileType, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:373</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_test_build_filename(GtkLibrary.GTestFileType file_type, Pointer<GtkLibrary.gchar > first_path, Object... varargs) {
		return Pointer.pointerToAddress(g_test_build_filename(Pointer.getPeer(file_type), Pointer.getPeer(first_path), varargs), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_test_build_filename(@Ptr long file_type, @Ptr long first_path, Object... varargs);
	/**
	 * Original signature : <code>gchar* g_test_get_dir(GTestFileType)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:377</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_test_get_dir(GtkLibrary.GTestFileType file_type) {
		return Pointer.pointerToAddress(g_test_get_dir(Pointer.getPeer(file_type)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_test_get_dir(@Ptr long file_type);
	/**
	 * Original signature : <code>gchar* g_test_get_filename(GTestFileType, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtestutils.h:379</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_test_get_filename(GtkLibrary.GTestFileType file_type, Pointer<GtkLibrary.gchar > first_path, Object... varargs) {
		return Pointer.pointerToAddress(g_test_get_filename(Pointer.getPeer(file_type), Pointer.getPeer(first_path), varargs), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_test_get_filename(@Ptr long file_type, @Ptr long first_path, Object... varargs);
	/**
	 * Original signature : <code>GThreadPool* g_thread_pool_new(GFunc, gpointer, gint, gboolean, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:16</i>
	 */
	public static Pointer<GtkLibrary.GThreadPool > g_thread_pool_new(GtkLibrary.GFunc func, GtkLibrary.gpointer user_data, GtkLibrary.gint max_threads, GtkLibrary.gboolean exclusive, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_thread_pool_new(Pointer.getPeer(func), Pointer.getPeer(user_data), Pointer.getPeer(max_threads), Pointer.getPeer(exclusive), Pointer.getPeer(error)), GtkLibrary.GThreadPool.class);
	}
	@Ptr 
	protected native static long g_thread_pool_new(@Ptr long func, @Ptr long user_data, @Ptr long max_threads, @Ptr long exclusive, @Ptr long error);
	/**
	 * Original signature : <code>void g_thread_pool_free(GThreadPool*, gboolean, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:22</i>
	 */
	public static void g_thread_pool_free(Pointer<GtkLibrary.GThreadPool > pool, GtkLibrary.gboolean immediate, GtkLibrary.gboolean wait_) {
		g_thread_pool_free(Pointer.getPeer(pool), Pointer.getPeer(immediate), Pointer.getPeer(wait_));
	}
	protected native static void g_thread_pool_free(@Ptr long pool, @Ptr long immediate, @Ptr long wait_);
	/**
	 * Original signature : <code>gboolean g_thread_pool_push(GThreadPool*, gpointer, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:26</i>
	 */
	public static GtkLibrary.gboolean g_thread_pool_push(Pointer<GtkLibrary.GThreadPool > pool, GtkLibrary.gpointer data, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_thread_pool_push(Pointer.getPeer(pool), Pointer.getPeer(data), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_thread_pool_push(@Ptr long pool, @Ptr long data, @Ptr long error);
	/**
	 * Original signature : <code>guint g_thread_pool_unprocessed(GThreadPool*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:30</i>
	 */
	public static guint g_thread_pool_unprocessed(Pointer<GtkLibrary.GThreadPool > pool) {
		return Pointer.pointerToAddress(g_thread_pool_unprocessed(Pointer.getPeer(pool)), .class);
	}
	@Ptr 
	protected native static long g_thread_pool_unprocessed(@Ptr long pool);
	/**
	 * Original signature : <code>void g_thread_pool_set_sort_function(GThreadPool*, GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:32</i>
	 */
	public static void g_thread_pool_set_sort_function(Pointer<GtkLibrary.GThreadPool > pool, GtkLibrary.GCompareDataFunc func, GtkLibrary.gpointer user_data) {
		g_thread_pool_set_sort_function(Pointer.getPeer(pool), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_thread_pool_set_sort_function(@Ptr long pool, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>gboolean g_thread_pool_set_max_threads(GThreadPool*, gint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:36</i>
	 */
	public static GtkLibrary.gboolean g_thread_pool_set_max_threads(Pointer<GtkLibrary.GThreadPool > pool, GtkLibrary.gint max_threads, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_thread_pool_set_max_threads(Pointer.getPeer(pool), Pointer.getPeer(max_threads), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_thread_pool_set_max_threads(@Ptr long pool, @Ptr long max_threads, @Ptr long error);
	/**
	 * Original signature : <code>gint g_thread_pool_get_max_threads(GThreadPool*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:40</i>
	 */
	public static GtkLibrary.gint g_thread_pool_get_max_threads(Pointer<GtkLibrary.GThreadPool > pool) {
		return Pointer.pointerToAddress(g_thread_pool_get_max_threads(Pointer.getPeer(pool)), .class);
	}
	@Ptr 
	protected native static long g_thread_pool_get_max_threads(@Ptr long pool);
	/**
	 * Original signature : <code>guint g_thread_pool_get_num_threads(GThreadPool*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:42</i>
	 */
	public static guint g_thread_pool_get_num_threads(Pointer<GtkLibrary.GThreadPool > pool) {
		return Pointer.pointerToAddress(g_thread_pool_get_num_threads(Pointer.getPeer(pool)), .class);
	}
	@Ptr 
	protected native static long g_thread_pool_get_num_threads(@Ptr long pool);
	/**
	 * Original signature : <code>void g_thread_pool_set_max_unused_threads(gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:45</i>
	 */
	public static void g_thread_pool_set_max_unused_threads(GtkLibrary.gint max_threads) {
		g_thread_pool_set_max_unused_threads(Pointer.getPeer(max_threads));
	}
	protected native static void g_thread_pool_set_max_unused_threads(@Ptr long max_threads);
	/**
	 * Original signature : <code>gint g_thread_pool_get_max_unused_threads()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:47</i>
	 */
	public static GtkLibrary.gint g_thread_pool_get_max_unused_threads() {
		return Pointer.pointerToAddress(g_thread_pool_get_max_unused_threads$2(), .class);
	}
	@Ptr 
	protected native static long g_thread_pool_get_max_unused_threads$2();
	/**
	 * Original signature : <code>guint g_thread_pool_get_num_unused_threads()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:49</i>
	 */
	public static guint g_thread_pool_get_num_unused_threads() {
		return Pointer.pointerToAddress(g_thread_pool_get_num_unused_threads$2(), .class);
	}
	@Ptr 
	protected native static long g_thread_pool_get_num_unused_threads$2();
	/**
	 * Original signature : <code>void g_thread_pool_stop_unused_threads()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:51</i>
	 */
	public static native void g_thread_pool_stop_unused_threads();
	/**
	 * Original signature : <code>void g_thread_pool_set_max_idle_time(guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:53</i>
	 */
	public static void g_thread_pool_set_max_idle_time(guint interval) {
		g_thread_pool_set_max_idle_time(Pointer.getPeer(interval));
	}
	protected native static void g_thread_pool_set_max_idle_time(@Ptr long interval);
	/**
	 * Original signature : <code>guint g_thread_pool_get_max_idle_time()</code><br>
	 * <i>native declaration : glib-2.0/glib/gthreadpool.h:55</i>
	 */
	public static guint g_thread_pool_get_max_idle_time() {
		return Pointer.pointerToAddress(g_thread_pool_get_max_idle_time$2(), .class);
	}
	@Ptr 
	protected native static long g_thread_pool_get_max_idle_time$2();
	/**
	 * Original signature : <code>GTimer* g_timer_new()</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:12</i>
	 */
	public static Pointer<GtkLibrary.GTimer > g_timer_new() {
		return Pointer.pointerToAddress(g_timer_new$2(), GtkLibrary.GTimer.class);
	}
	@Ptr 
	protected native static long g_timer_new$2();
	/**
	 * Original signature : <code>void g_timer_destroy(GTimer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:14</i>
	 */
	public static void g_timer_destroy(Pointer<GtkLibrary.GTimer > timer) {
		g_timer_destroy(Pointer.getPeer(timer));
	}
	protected native static void g_timer_destroy(@Ptr long timer);
	/**
	 * Original signature : <code>void g_timer_start(GTimer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:16</i>
	 */
	public static void g_timer_start(Pointer<GtkLibrary.GTimer > timer) {
		g_timer_start(Pointer.getPeer(timer));
	}
	protected native static void g_timer_start(@Ptr long timer);
	/**
	 * Original signature : <code>void g_timer_stop(GTimer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:18</i>
	 */
	public static void g_timer_stop(Pointer<GtkLibrary.GTimer > timer) {
		g_timer_stop(Pointer.getPeer(timer));
	}
	protected native static void g_timer_stop(@Ptr long timer);
	/**
	 * Original signature : <code>void g_timer_reset(GTimer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:20</i>
	 */
	public static void g_timer_reset(Pointer<GtkLibrary.GTimer > timer) {
		g_timer_reset(Pointer.getPeer(timer));
	}
	protected native static void g_timer_reset(@Ptr long timer);
	/**
	 * Original signature : <code>void g_timer_continue(GTimer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:22</i>
	 */
	public static void g_timer_continue(Pointer<GtkLibrary.GTimer > timer) {
		g_timer_continue(Pointer.getPeer(timer));
	}
	protected native static void g_timer_continue(@Ptr long timer);
	/**
	 * Original signature : <code>gdouble g_timer_elapsed(GTimer*, gulong*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:24</i>
	 */
	public static GtkLibrary.gdouble g_timer_elapsed(Pointer<GtkLibrary.GTimer > timer, Pointer<GtkLibrary.gulong > microseconds) {
		return Pointer.pointerToAddress(g_timer_elapsed(Pointer.getPeer(timer), Pointer.getPeer(microseconds)), .class);
	}
	@Ptr 
	protected native static long g_timer_elapsed(@Ptr long timer, @Ptr long microseconds);
	/**
	 * Original signature : <code>void g_usleep(gulong)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:28</i>
	 */
	public static void g_usleep(GtkLibrary.gulong microseconds) {
		g_usleep(Pointer.getPeer(microseconds));
	}
	protected native static void g_usleep(@Ptr long microseconds);
	/**
	 * Original signature : <code>void g_time_val_add(GTimeVal*, glong)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:31</i>
	 */
	public static void g_time_val_add(Pointer<GtkLibrary.GTimeVal > time_, GtkLibrary.glong microseconds) {
		g_time_val_add(Pointer.getPeer(time_), Pointer.getPeer(microseconds));
	}
	protected native static void g_time_val_add(@Ptr long time_, @Ptr long microseconds);
	/**
	 * Original signature : <code>gboolean g_time_val_from_iso8601(const gchar*, GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:34</i>
	 */
	public static GtkLibrary.gboolean g_time_val_from_iso8601(Pointer<GtkLibrary.gchar > iso_date, Pointer<GtkLibrary.GTimeVal > time_) {
		return Pointer.pointerToAddress(g_time_val_from_iso8601(Pointer.getPeer(iso_date), Pointer.getPeer(time_)), .class);
	}
	@Ptr 
	protected native static long g_time_val_from_iso8601(@Ptr long iso_date, @Ptr long time_);
	/**
	 * Original signature : <code>gchar* g_time_val_to_iso8601(GTimeVal*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtimer.h:37</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_time_val_to_iso8601(Pointer<GtkLibrary.GTimeVal > time_) {
		return Pointer.pointerToAddress(g_time_val_to_iso8601(Pointer.getPeer(time_)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_time_val_to_iso8601(@Ptr long time_);
	/**
	 * Balanced binary trees<br>
	 * Original signature : <code>GTree* g_tree_new(GCompareFunc)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:12</i>
	 */
	public static Pointer<GtkLibrary.GTree > g_tree_new(GtkLibrary.GCompareFunc key_compare_func) {
		return Pointer.pointerToAddress(g_tree_new(Pointer.getPeer(key_compare_func)), GtkLibrary.GTree.class);
	}
	@Ptr 
	protected native static long g_tree_new(@Ptr long key_compare_func);
	/**
	 * Original signature : <code>GTree* g_tree_new_with_data(GCompareDataFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:14</i>
	 */
	public static Pointer<GtkLibrary.GTree > g_tree_new_with_data(GtkLibrary.GCompareDataFunc key_compare_func, GtkLibrary.gpointer key_compare_data) {
		return Pointer.pointerToAddress(g_tree_new_with_data(Pointer.getPeer(key_compare_func), Pointer.getPeer(key_compare_data)), GtkLibrary.GTree.class);
	}
	@Ptr 
	protected native static long g_tree_new_with_data(@Ptr long key_compare_func, @Ptr long key_compare_data);
	/**
	 * Original signature : <code>GTree* g_tree_new_full(GCompareDataFunc, gpointer, GDestroyNotify, GDestroyNotify)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:17</i>
	 */
	public static Pointer<GtkLibrary.GTree > g_tree_new_full(GtkLibrary.GCompareDataFunc key_compare_func, GtkLibrary.gpointer key_compare_data, GtkLibrary.GDestroyNotify key_destroy_func, GtkLibrary.GDestroyNotify value_destroy_func) {
		return Pointer.pointerToAddress(g_tree_new_full(Pointer.getPeer(key_compare_func), Pointer.getPeer(key_compare_data), Pointer.getPeer(key_destroy_func), Pointer.getPeer(value_destroy_func)), GtkLibrary.GTree.class);
	}
	@Ptr 
	protected native static long g_tree_new_full(@Ptr long key_compare_func, @Ptr long key_compare_data, @Ptr long key_destroy_func, @Ptr long value_destroy_func);
	/**
	 * Original signature : <code>GTree* g_tree_ref(GTree*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:22</i>
	 */
	public static Pointer<GtkLibrary.GTree > g_tree_ref(Pointer<GtkLibrary.GTree > tree) {
		return Pointer.pointerToAddress(g_tree_ref(Pointer.getPeer(tree)), GtkLibrary.GTree.class);
	}
	@Ptr 
	protected native static long g_tree_ref(@Ptr long tree);
	/**
	 * Original signature : <code>void g_tree_unref(GTree*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:24</i>
	 */
	public static void g_tree_unref(Pointer<GtkLibrary.GTree > tree) {
		g_tree_unref(Pointer.getPeer(tree));
	}
	protected native static void g_tree_unref(@Ptr long tree);
	/**
	 * Original signature : <code>void g_tree_destroy(GTree*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:26</i>
	 */
	public static void g_tree_destroy(Pointer<GtkLibrary.GTree > tree) {
		g_tree_destroy(Pointer.getPeer(tree));
	}
	protected native static void g_tree_destroy(@Ptr long tree);
	/**
	 * Original signature : <code>void g_tree_insert(GTree*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:28</i>
	 */
	public static void g_tree_insert(Pointer<GtkLibrary.GTree > tree, GtkLibrary.gpointer key, GtkLibrary.gpointer value) {
		g_tree_insert(Pointer.getPeer(tree), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_tree_insert(@Ptr long tree, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>void g_tree_replace(GTree*, gpointer, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:32</i>
	 */
	public static void g_tree_replace(Pointer<GtkLibrary.GTree > tree, GtkLibrary.gpointer key, GtkLibrary.gpointer value) {
		g_tree_replace(Pointer.getPeer(tree), Pointer.getPeer(key), Pointer.getPeer(value));
	}
	protected native static void g_tree_replace(@Ptr long tree, @Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>gboolean g_tree_remove(GTree*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:36</i>
	 */
	public static GtkLibrary.gboolean g_tree_remove(Pointer<GtkLibrary.GTree > tree, GtkLibrary.gconstpointer key) {
		return Pointer.pointerToAddress(g_tree_remove(Pointer.getPeer(tree), Pointer.getPeer(key)), .class);
	}
	@Ptr 
	protected native static long g_tree_remove(@Ptr long tree, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_tree_steal(GTree*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:39</i>
	 */
	public static GtkLibrary.gboolean g_tree_steal(Pointer<GtkLibrary.GTree > tree, GtkLibrary.gconstpointer key) {
		return Pointer.pointerToAddress(g_tree_steal(Pointer.getPeer(tree), Pointer.getPeer(key)), .class);
	}
	@Ptr 
	protected native static long g_tree_steal(@Ptr long tree, @Ptr long key);
	/**
	 * Original signature : <code>gpointer g_tree_lookup(GTree*, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:42</i>
	 */
	public static GtkLibrary.gpointer g_tree_lookup(Pointer<GtkLibrary.GTree > tree, GtkLibrary.gconstpointer key) {
		return Pointer.pointerToAddress(g_tree_lookup(Pointer.getPeer(tree), Pointer.getPeer(key)), .class);
	}
	@Ptr 
	protected native static long g_tree_lookup(@Ptr long tree, @Ptr long key);
	/**
	 * Original signature : <code>gboolean g_tree_lookup_extended(GTree*, gconstpointer, gpointer*, gpointer*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:45</i>
	 */
	public static GtkLibrary.gboolean g_tree_lookup_extended(Pointer<GtkLibrary.GTree > tree, GtkLibrary.gconstpointer lookup_key, Pointer<GtkLibrary.gpointer > orig_key, Pointer<GtkLibrary.gpointer > value) {
		return Pointer.pointerToAddress(g_tree_lookup_extended(Pointer.getPeer(tree), Pointer.getPeer(lookup_key), Pointer.getPeer(orig_key), Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_tree_lookup_extended(@Ptr long tree, @Ptr long lookup_key, @Ptr long orig_key, @Ptr long value);
	/**
	 * Original signature : <code>void g_tree_foreach(GTree*, GTraverseFunc, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:50</i>
	 */
	public static void g_tree_foreach(Pointer<GtkLibrary.GTree > tree, GtkLibrary.GTraverseFunc func, GtkLibrary.gpointer user_data) {
		g_tree_foreach(Pointer.getPeer(tree), Pointer.getPeer(func), Pointer.getPeer(user_data));
	}
	protected native static void g_tree_foreach(@Ptr long tree, @Ptr long func, @Ptr long user_data);
	/**
	 * Original signature : <code>void g_tree_traverse(GTree*, GTraverseFunc, GTraverseType, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:55</i>
	 */
	public static void g_tree_traverse(Pointer<GtkLibrary.GTree > tree, GtkLibrary.GTraverseFunc traverse_func, GtkLibrary.GTraverseType traverse_type, GtkLibrary.gpointer user_data) {
		g_tree_traverse(Pointer.getPeer(tree), Pointer.getPeer(traverse_func), Pointer.getPeer(traverse_type), Pointer.getPeer(user_data));
	}
	protected native static void g_tree_traverse(@Ptr long tree, @Ptr long traverse_func, @Ptr long traverse_type, @Ptr long user_data);
	/**
	 * Original signature : <code>gpointer g_tree_search(GTree*, GCompareFunc, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:61</i>
	 */
	public static GtkLibrary.gpointer g_tree_search(Pointer<GtkLibrary.GTree > tree, GtkLibrary.GCompareFunc search_func, GtkLibrary.gconstpointer user_data) {
		return Pointer.pointerToAddress(g_tree_search(Pointer.getPeer(tree), Pointer.getPeer(search_func), Pointer.getPeer(user_data)), .class);
	}
	@Ptr 
	protected native static long g_tree_search(@Ptr long tree, @Ptr long search_func, @Ptr long user_data);
	/**
	 * Original signature : <code>gint g_tree_height(GTree*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:65</i>
	 */
	public static GtkLibrary.gint g_tree_height(Pointer<GtkLibrary.GTree > tree) {
		return Pointer.pointerToAddress(g_tree_height(Pointer.getPeer(tree)), .class);
	}
	@Ptr 
	protected native static long g_tree_height(@Ptr long tree);
	/**
	 * Original signature : <code>gint g_tree_nnodes(GTree*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gtree.h:67</i>
	 */
	public static GtkLibrary.gint g_tree_nnodes(Pointer<GtkLibrary.GTree > tree) {
		return Pointer.pointerToAddress(g_tree_nnodes(Pointer.getPeer(tree)), .class);
	}
	@Ptr 
	protected native static long g_tree_nnodes(@Ptr long tree);
	/**
	 * Original signature : <code>char* g_uri_unescape_string(const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gurifuncs.h:39</i>
	 */
	public static Pointer<Byte > g_uri_unescape_string(Pointer<Byte > escaped_string, Pointer<Byte > illegal_characters) {
		return Pointer.pointerToAddress(g_uri_unescape_string(Pointer.getPeer(escaped_string), Pointer.getPeer(illegal_characters)), Byte.class);
	}
	@Ptr 
	protected native static long g_uri_unescape_string(@Ptr long escaped_string, @Ptr long illegal_characters);
	/**
	 * Original signature : <code>char* g_uri_unescape_segment(const char*, const char*, const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gurifuncs.h:42</i>
	 */
	public static Pointer<Byte > g_uri_unescape_segment(Pointer<Byte > escaped_string, Pointer<Byte > escaped_string_end, Pointer<Byte > illegal_characters) {
		return Pointer.pointerToAddress(g_uri_unescape_segment(Pointer.getPeer(escaped_string), Pointer.getPeer(escaped_string_end), Pointer.getPeer(illegal_characters)), Byte.class);
	}
	@Ptr 
	protected native static long g_uri_unescape_segment(@Ptr long escaped_string, @Ptr long escaped_string_end, @Ptr long illegal_characters);
	/**
	 * Original signature : <code>char* g_uri_parse_scheme(const char*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gurifuncs.h:46</i>
	 */
	public static Pointer<Byte > g_uri_parse_scheme(Pointer<Byte > uri) {
		return Pointer.pointerToAddress(g_uri_parse_scheme(Pointer.getPeer(uri)), Byte.class);
	}
	@Ptr 
	protected native static long g_uri_parse_scheme(@Ptr long uri);
	/**
	 * Original signature : <code>char* g_uri_escape_string(const char*, const char*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gurifuncs.h:48</i>
	 */
	public static Pointer<Byte > g_uri_escape_string(Pointer<Byte > unescaped, Pointer<Byte > reserved_chars_allowed, GtkLibrary.gboolean allow_utf8) {
		return Pointer.pointerToAddress(g_uri_escape_string(Pointer.getPeer(unescaped), Pointer.getPeer(reserved_chars_allowed), Pointer.getPeer(allow_utf8)), Byte.class);
	}
	@Ptr 
	protected native static long g_uri_escape_string(@Ptr long unescaped, @Ptr long reserved_chars_allowed, @Ptr long allow_utf8);
	/**
	 * type string checking<br>
	 * Original signature : <code>gboolean g_variant_type_string_is_valid(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:266</i>
	 */
	public static GtkLibrary.gboolean g_variant_type_string_is_valid(Pointer<GtkLibrary.gchar > type_string) {
		return Pointer.pointerToAddress(g_variant_type_string_is_valid(Pointer.getPeer(type_string)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_string_is_valid(@Ptr long type_string);
	/**
	 * Original signature : <code>gboolean g_variant_type_string_scan(const gchar*, const gchar*, const gchar**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:268</i>
	 */
	public static GtkLibrary.gboolean g_variant_type_string_scan(Pointer<GtkLibrary.gchar > string, Pointer<GtkLibrary.gchar > limit, Pointer<Pointer<GtkLibrary.gchar > > endptr) {
		return Pointer.pointerToAddress(g_variant_type_string_scan(Pointer.getPeer(string), Pointer.getPeer(limit), Pointer.getPeer(endptr)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_string_scan(@Ptr long string, @Ptr long limit, @Ptr long endptr);
	/**
	 * create/destroy<br>
	 * Original signature : <code>void g_variant_type_free(GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:274</i>
	 */
	public static void g_variant_type_free(Pointer<GtkLibrary.GVariantType > type) {
		g_variant_type_free(Pointer.getPeer(type));
	}
	protected native static void g_variant_type_free(@Ptr long type);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_copy(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:276</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_type_copy(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_copy(Pointer.getPeer(type)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_copy(@Ptr long type);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_new(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:278</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_type_new(Pointer<GtkLibrary.gchar > type_string) {
		return Pointer.pointerToAddress(g_variant_type_new(Pointer.getPeer(type_string)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_new(@Ptr long type_string);
	/**
	 * getters<br>
	 * Original signature : <code>gsize g_variant_type_get_string_length(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:282</i>
	 */
	public static gsize g_variant_type_get_string_length(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_get_string_length(Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_get_string_length(@Ptr long type);
	/**
	 * Original signature : <code>gchar* g_variant_type_peek_string(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:284</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_variant_type_peek_string(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_peek_string(Pointer.getPeer(type)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_variant_type_peek_string(@Ptr long type);
	/**
	 * Original signature : <code>gchar* g_variant_type_dup_string(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:286</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_variant_type_dup_string(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_dup_string(Pointer.getPeer(type)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_variant_type_dup_string(@Ptr long type);
	/**
	 * classification<br>
	 * Original signature : <code>gboolean g_variant_type_is_definite(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:290</i>
	 */
	public static GtkLibrary.gboolean g_variant_type_is_definite(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_is_definite(Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_is_definite(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_container(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:292</i>
	 */
	public static GtkLibrary.gboolean g_variant_type_is_container(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_is_container(Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_is_container(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_basic(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:294</i>
	 */
	public static GtkLibrary.gboolean g_variant_type_is_basic(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_is_basic(Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_is_basic(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_maybe(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:296</i>
	 */
	public static GtkLibrary.gboolean g_variant_type_is_maybe(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_is_maybe(Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_is_maybe(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_array(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:298</i>
	 */
	public static GtkLibrary.gboolean g_variant_type_is_array(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_is_array(Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_is_array(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_tuple(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:300</i>
	 */
	public static GtkLibrary.gboolean g_variant_type_is_tuple(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_is_tuple(Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_is_tuple(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_dict_entry(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:302</i>
	 */
	public static GtkLibrary.gboolean g_variant_type_is_dict_entry(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_is_dict_entry(Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_is_dict_entry(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_is_variant(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:304</i>
	 */
	public static GtkLibrary.gboolean g_variant_type_is_variant(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_is_variant(Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_is_variant(@Ptr long type);
	/**
	 * for hash tables<br>
	 * Original signature : <code>guint g_variant_type_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:308</i>
	 */
	public static guint g_variant_type_hash(GtkLibrary.gconstpointer type) {
		return Pointer.pointerToAddress(g_variant_type_hash(Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_hash(@Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_type_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:310</i>
	 */
	public static GtkLibrary.gboolean g_variant_type_equal(GtkLibrary.gconstpointer type1, GtkLibrary.gconstpointer type2) {
		return Pointer.pointerToAddress(g_variant_type_equal(Pointer.getPeer(type1), Pointer.getPeer(type2)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_equal(@Ptr long type1, @Ptr long type2);
	/**
	 * subtypes<br>
	 * Original signature : <code>gboolean g_variant_type_is_subtype_of(const GVariantType*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:315</i>
	 */
	public static GtkLibrary.gboolean g_variant_type_is_subtype_of(Pointer<GtkLibrary.GVariantType > type, Pointer<GtkLibrary.GVariantType > supertype) {
		return Pointer.pointerToAddress(g_variant_type_is_subtype_of(Pointer.getPeer(type), Pointer.getPeer(supertype)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_is_subtype_of(@Ptr long type, @Ptr long supertype);
	/**
	 * type iterator interface<br>
	 * Original signature : <code>GVariantType* g_variant_type_element(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:320</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_type_element(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_element(Pointer.getPeer(type)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_element(@Ptr long type);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_first(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:322</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_type_first(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_first(Pointer.getPeer(type)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_first(@Ptr long type);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_next(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:324</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_type_next(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_next(Pointer.getPeer(type)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_next(@Ptr long type);
	/**
	 * Original signature : <code>gsize g_variant_type_n_items(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:326</i>
	 */
	public static gsize g_variant_type_n_items(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_n_items(Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_variant_type_n_items(@Ptr long type);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_key(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:328</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_type_key(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_key(Pointer.getPeer(type)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_key(@Ptr long type);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_value(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:330</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_type_value(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_type_value(Pointer.getPeer(type)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_value(@Ptr long type);
	/**
	 * constructors<br>
	 * Original signature : <code>GVariantType* g_variant_type_new_array(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:334</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_type_new_array(Pointer<GtkLibrary.GVariantType > element) {
		return Pointer.pointerToAddress(g_variant_type_new_array(Pointer.getPeer(element)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_new_array(@Ptr long element);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_new_maybe(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:336</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_type_new_maybe(Pointer<GtkLibrary.GVariantType > element) {
		return Pointer.pointerToAddress(g_variant_type_new_maybe(Pointer.getPeer(element)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_new_maybe(@Ptr long element);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_new_tuple(const const GVariantType**, gint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:338</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_type_new_tuple(Pointer<Pointer<GtkLibrary.GVariantType > > items, GtkLibrary.gint length) {
		return Pointer.pointerToAddress(g_variant_type_new_tuple(Pointer.getPeer(items), Pointer.getPeer(length)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_new_tuple(@Ptr long items, @Ptr long length);
	/**
	 * Original signature : <code>GVariantType* g_variant_type_new_dict_entry(const GVariantType*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:341</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_type_new_dict_entry(Pointer<GtkLibrary.GVariantType > key, Pointer<GtkLibrary.GVariantType > value) {
		return Pointer.pointerToAddress(g_variant_type_new_dict_entry(Pointer.getPeer(key), Pointer.getPeer(value)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_new_dict_entry(@Ptr long key, @Ptr long value);
	/**
	 * < private ><br>
	 * Original signature : <code>GVariantType* g_variant_type_checked_(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvarianttype.h:346</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_type_checked_(Pointer<GtkLibrary.gchar > gcharPtr1) {
		return Pointer.pointerToAddress(g_variant_type_checked_(Pointer.getPeer(gcharPtr1)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_type_checked_(@Ptr long gcharPtr1);
	/**
	 * Original signature : <code>void g_variant_unref(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:28</i>
	 */
	public static void g_variant_unref(Pointer<GtkLibrary.GVariant > value) {
		g_variant_unref(Pointer.getPeer(value));
	}
	protected native static void g_variant_unref(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_ref(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:30</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_ref(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_ref(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_ref(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_ref_sink(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:32</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_ref_sink(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_ref_sink(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_ref_sink(@Ptr long value);
	/**
	 * Original signature : <code>gboolean g_variant_is_floating(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:34</i>
	 */
	public static GtkLibrary.gboolean g_variant_is_floating(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_is_floating(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_is_floating(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_take_ref(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:36</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_take_ref(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_take_ref(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_take_ref(@Ptr long value);
	/**
	 * Original signature : <code>GVariantType* g_variant_get_type(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:39</i>
	 */
	public static Pointer<GtkLibrary.GVariantType > g_variant_get_type(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_type(Pointer.getPeer(value)), GtkLibrary.GVariantType.class);
	}
	@Ptr 
	protected native static long g_variant_get_type(@Ptr long value);
	/**
	 * Original signature : <code>gchar* g_variant_get_type_string(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:41</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_variant_get_type_string(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_type_string(Pointer.getPeer(value)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_variant_get_type_string(@Ptr long value);
	/**
	 * Original signature : <code>gboolean g_variant_is_of_type(GVariant*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:43</i>
	 */
	public static GtkLibrary.gboolean g_variant_is_of_type(Pointer<GtkLibrary.GVariant > value, Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_is_of_type(Pointer.getPeer(value), Pointer.getPeer(type)), .class);
	}
	@Ptr 
	protected native static long g_variant_is_of_type(@Ptr long value, @Ptr long type);
	/**
	 * Original signature : <code>gboolean g_variant_is_container(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:46</i>
	 */
	public static GtkLibrary.gboolean g_variant_is_container(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_is_container(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_is_container(@Ptr long value);
	/**
	 * Original signature : <code>GVariantClass g_variant_classify(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:48</i>
	 */
	public static GtkLibrary.GVariantClass g_variant_classify(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_classify(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_classify(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_boolean(gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:50</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_boolean(GtkLibrary.gboolean value) {
		return Pointer.pointerToAddress(g_variant_new_boolean(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_boolean(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_byte(guchar)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:52</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_byte(GtkLibrary.guchar value) {
		return Pointer.pointerToAddress(g_variant_new_byte(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_byte(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_int16(gint16)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:54</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_int16(GtkLibrary.gint16 value) {
		return Pointer.pointerToAddress(g_variant_new_int16(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_int16(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_uint16(guint16)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:56</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_uint16(GtkLibrary.guint16 value) {
		return Pointer.pointerToAddress(g_variant_new_uint16(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_uint16(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_int32(gint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:58</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_int32(GtkLibrary.gint32 value) {
		return Pointer.pointerToAddress(g_variant_new_int32(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_int32(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_uint32(guint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:60</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_uint32(GtkLibrary.guint32 value) {
		return Pointer.pointerToAddress(g_variant_new_uint32(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_uint32(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_int64(gint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:62</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_int64(gint64 value) {
		return Pointer.pointerToAddress(g_variant_new_int64(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_int64(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_uint64(guint64)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:64</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_uint64(GtkLibrary.guint64 value) {
		return Pointer.pointerToAddress(g_variant_new_uint64(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_uint64(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_handle(gint32)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:66</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_handle(GtkLibrary.gint32 value) {
		return Pointer.pointerToAddress(g_variant_new_handle(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_handle(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_double(gdouble)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:68</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_double(GtkLibrary.gdouble value) {
		return Pointer.pointerToAddress(g_variant_new_double(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_double(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_string(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:70</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_string(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_variant_new_string(Pointer.getPeer(string)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_string(@Ptr long string);
	/**
	 * Original signature : <code>GVariant* g_variant_new_take_string(gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:72</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_take_string(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_variant_new_take_string(Pointer.getPeer(string)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_take_string(@Ptr long string);
	/**
	 * Original signature : <code>GVariant* g_variant_new_printf(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:74</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_printf(Pointer<GtkLibrary.gchar > format_string, Object... varargs) {
		return Pointer.pointerToAddress(g_variant_new_printf(Pointer.getPeer(format_string), varargs), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_printf(@Ptr long format_string, Object... varargs);
	/**
	 * Original signature : <code>GVariant* g_variant_new_object_path(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:77</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_object_path(Pointer<GtkLibrary.gchar > object_path) {
		return Pointer.pointerToAddress(g_variant_new_object_path(Pointer.getPeer(object_path)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_object_path(@Ptr long object_path);
	/**
	 * Original signature : <code>gboolean g_variant_is_object_path(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:79</i>
	 */
	public static GtkLibrary.gboolean g_variant_is_object_path(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_variant_is_object_path(Pointer.getPeer(string)), .class);
	}
	@Ptr 
	protected native static long g_variant_is_object_path(@Ptr long string);
	/**
	 * Original signature : <code>GVariant* g_variant_new_signature(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:81</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_signature(Pointer<GtkLibrary.gchar > signature) {
		return Pointer.pointerToAddress(g_variant_new_signature(Pointer.getPeer(signature)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_signature(@Ptr long signature);
	/**
	 * Original signature : <code>gboolean g_variant_is_signature(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:83</i>
	 */
	public static GtkLibrary.gboolean g_variant_is_signature(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_variant_is_signature(Pointer.getPeer(string)), .class);
	}
	@Ptr 
	protected native static long g_variant_is_signature(@Ptr long string);
	/**
	 * Original signature : <code>GVariant* g_variant_new_variant(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:85</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_variant(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_new_variant(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_variant(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_strv(const const gchar**, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:87</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_strv(Pointer<Pointer<GtkLibrary.gchar > > strv, GtkLibrary.gssize length) {
		return Pointer.pointerToAddress(g_variant_new_strv(Pointer.getPeer(strv), Pointer.getPeer(length)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_strv(@Ptr long strv, @Ptr long length);
	/**
	 * Original signature : <code>GVariant* g_variant_new_objv(const const gchar**, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:90</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_objv(Pointer<Pointer<GtkLibrary.gchar > > strv, GtkLibrary.gssize length) {
		return Pointer.pointerToAddress(g_variant_new_objv(Pointer.getPeer(strv), Pointer.getPeer(length)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_objv(@Ptr long strv, @Ptr long length);
	/**
	 * Original signature : <code>GVariant* g_variant_new_bytestring(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:93</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_bytestring(Pointer<GtkLibrary.gchar > string) {
		return Pointer.pointerToAddress(g_variant_new_bytestring(Pointer.getPeer(string)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_bytestring(@Ptr long string);
	/**
	 * Original signature : <code>GVariant* g_variant_new_bytestring_array(const const gchar**, gssize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:95</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_bytestring_array(Pointer<Pointer<GtkLibrary.gchar > > strv, GtkLibrary.gssize length) {
		return Pointer.pointerToAddress(g_variant_new_bytestring_array(Pointer.getPeer(strv), Pointer.getPeer(length)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_bytestring_array(@Ptr long strv, @Ptr long length);
	/**
	 * Original signature : <code>GVariant* g_variant_new_fixed_array(const GVariantType*, gconstpointer, gsize, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:98</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_fixed_array(Pointer<GtkLibrary.GVariantType > element_type, GtkLibrary.gconstpointer elements, gsize n_elements, gsize element_size) {
		return Pointer.pointerToAddress(g_variant_new_fixed_array(Pointer.getPeer(element_type), Pointer.getPeer(elements), Pointer.getPeer(n_elements), Pointer.getPeer(element_size)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_fixed_array(@Ptr long element_type, @Ptr long elements, @Ptr long n_elements, @Ptr long element_size);
	/**
	 * Original signature : <code>gboolean g_variant_get_boolean(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:103</i>
	 */
	public static GtkLibrary.gboolean g_variant_get_boolean(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_boolean(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_boolean(@Ptr long value);
	/**
	 * Original signature : <code>guchar g_variant_get_byte(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:105</i>
	 */
	public static GtkLibrary.guchar g_variant_get_byte(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_byte(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_byte(@Ptr long value);
	/**
	 * Original signature : <code>gint16 g_variant_get_int16(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:107</i>
	 */
	public static GtkLibrary.gint16 g_variant_get_int16(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_int16(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_int16(@Ptr long value);
	/**
	 * Original signature : <code>guint16 g_variant_get_uint16(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:109</i>
	 */
	public static GtkLibrary.guint16 g_variant_get_uint16(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_uint16(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_uint16(@Ptr long value);
	/**
	 * Original signature : <code>gint32 g_variant_get_int32(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:111</i>
	 */
	public static GtkLibrary.gint32 g_variant_get_int32(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_int32(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_int32(@Ptr long value);
	/**
	 * Original signature : <code>guint32 g_variant_get_uint32(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:113</i>
	 */
	public static GtkLibrary.guint32 g_variant_get_uint32(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_uint32(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_uint32(@Ptr long value);
	/**
	 * Original signature : <code>gint64 g_variant_get_int64(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:115</i>
	 */
	public static gint64 g_variant_get_int64(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_int64(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_int64(@Ptr long value);
	/**
	 * Original signature : <code>guint64 g_variant_get_uint64(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:117</i>
	 */
	public static GtkLibrary.guint64 g_variant_get_uint64(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_uint64(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_uint64(@Ptr long value);
	/**
	 * Original signature : <code>gint32 g_variant_get_handle(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:119</i>
	 */
	public static GtkLibrary.gint32 g_variant_get_handle(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_handle(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_handle(@Ptr long value);
	/**
	 * Original signature : <code>gdouble g_variant_get_double(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:121</i>
	 */
	public static GtkLibrary.gdouble g_variant_get_double(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_double(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_double(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_get_variant(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:123</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_get_variant(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_variant(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_get_variant(@Ptr long value);
	/**
	 * Original signature : <code>gchar* g_variant_get_string(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:125</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_variant_get_string(Pointer<GtkLibrary.GVariant > value, Pointer<gsize > length) {
		return Pointer.pointerToAddress(g_variant_get_string(Pointer.getPeer(value), Pointer.getPeer(length)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_variant_get_string(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar* g_variant_dup_string(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:128</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_variant_dup_string(Pointer<GtkLibrary.GVariant > value, Pointer<gsize > length) {
		return Pointer.pointerToAddress(g_variant_dup_string(Pointer.getPeer(value), Pointer.getPeer(length)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_variant_dup_string(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_variant_get_strv(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:131</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_variant_get_strv(Pointer<GtkLibrary.GVariant > value, Pointer<gsize > length) {
		return Pointer.pointerToAddress(g_variant_get_strv(Pointer.getPeer(value), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_variant_get_strv(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_variant_dup_strv(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:134</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_variant_dup_strv(Pointer<GtkLibrary.GVariant > value, Pointer<gsize > length) {
		return Pointer.pointerToAddress(g_variant_dup_strv(Pointer.getPeer(value), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_variant_dup_strv(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_variant_get_objv(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:137</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_variant_get_objv(Pointer<GtkLibrary.GVariant > value, Pointer<gsize > length) {
		return Pointer.pointerToAddress(g_variant_get_objv(Pointer.getPeer(value), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_variant_get_objv(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_variant_dup_objv(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:140</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_variant_dup_objv(Pointer<GtkLibrary.GVariant > value, Pointer<gsize > length) {
		return Pointer.pointerToAddress(g_variant_dup_objv(Pointer.getPeer(value), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_variant_dup_objv(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar* g_variant_get_bytestring(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:143</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_variant_get_bytestring(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_bytestring(Pointer.getPeer(value)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_variant_get_bytestring(@Ptr long value);
	/**
	 * Original signature : <code>gchar* g_variant_dup_bytestring(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:145</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_variant_dup_bytestring(Pointer<GtkLibrary.GVariant > value, Pointer<gsize > length) {
		return Pointer.pointerToAddress(g_variant_dup_bytestring(Pointer.getPeer(value), Pointer.getPeer(length)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_variant_dup_bytestring(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_variant_get_bytestring_array(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:148</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_variant_get_bytestring_array(Pointer<GtkLibrary.GVariant > value, Pointer<gsize > length) {
		return Pointer.pointerToAddress(g_variant_get_bytestring_array(Pointer.getPeer(value), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_variant_get_bytestring_array(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>gchar** g_variant_dup_bytestring_array(GVariant*, gsize*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:151</i>
	 */
	public static Pointer<Pointer<GtkLibrary.gchar > > g_variant_dup_bytestring_array(Pointer<GtkLibrary.GVariant > value, Pointer<gsize > length) {
		return Pointer.pointerToAddress(g_variant_dup_bytestring_array(Pointer.getPeer(value), Pointer.getPeer(length)), DefaultParameterizedType.paramType(Pointer.class, GtkLibrary.gchar.class));
	}
	@Ptr 
	protected native static long g_variant_dup_bytestring_array(@Ptr long value, @Ptr long length);
	/**
	 * Original signature : <code>GVariant* g_variant_new_maybe(const GVariantType*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:155</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_maybe(Pointer<GtkLibrary.GVariantType > child_type, Pointer<GtkLibrary.GVariant > child) {
		return Pointer.pointerToAddress(g_variant_new_maybe(Pointer.getPeer(child_type), Pointer.getPeer(child)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_maybe(@Ptr long child_type, @Ptr long child);
	/**
	 * Original signature : <code>GVariant* g_variant_new_array(const GVariantType*, const GVariant**, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:158</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_array(Pointer<GtkLibrary.GVariantType > child_type, Pointer<Pointer<GtkLibrary.GVariant > > children, gsize n_children) {
		return Pointer.pointerToAddress(g_variant_new_array(Pointer.getPeer(child_type), Pointer.getPeer(children), Pointer.getPeer(n_children)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_array(@Ptr long child_type, @Ptr long children, @Ptr long n_children);
	/**
	 * Original signature : <code>GVariant* g_variant_new_tuple(const GVariant**, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:162</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_tuple(Pointer<Pointer<GtkLibrary.GVariant > > children, gsize n_children) {
		return Pointer.pointerToAddress(g_variant_new_tuple(Pointer.getPeer(children), Pointer.getPeer(n_children)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_tuple(@Ptr long children, @Ptr long n_children);
	/**
	 * Original signature : <code>GVariant* g_variant_new_dict_entry(GVariant*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:165</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_dict_entry(Pointer<GtkLibrary.GVariant > key, Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_new_dict_entry(Pointer.getPeer(key), Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_dict_entry(@Ptr long key, @Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_get_maybe(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:169</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_get_maybe(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_maybe(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_get_maybe(@Ptr long value);
	/**
	 * Original signature : <code>gsize g_variant_n_children(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:171</i>
	 */
	public static gsize g_variant_n_children(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_n_children(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_n_children(@Ptr long value);
	/**
	 * Original signature : <code>void g_variant_get_child(GVariant*, gsize, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:173</i>
	 */
	public static void g_variant_get_child(Pointer<GtkLibrary.GVariant > value, gsize index_, Pointer<GtkLibrary.gchar > format_string, Object... varargs) {
		g_variant_get_child(Pointer.getPeer(value), Pointer.getPeer(index_), Pointer.getPeer(format_string), varargs);
	}
	protected native static void g_variant_get_child(@Ptr long value, @Ptr long index_, @Ptr long format_string, Object... varargs);
	/**
	 * Original signature : <code>GVariant* g_variant_get_child_value(GVariant*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:178</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_get_child_value(Pointer<GtkLibrary.GVariant > value, gsize index_) {
		return Pointer.pointerToAddress(g_variant_get_child_value(Pointer.getPeer(value), Pointer.getPeer(index_)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_get_child_value(@Ptr long value, @Ptr long index_);
	/**
	 * Original signature : <code>gboolean g_variant_lookup(GVariant*, const gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:181</i>
	 */
	public static GtkLibrary.gboolean g_variant_lookup(Pointer<GtkLibrary.GVariant > dictionary, Pointer<GtkLibrary.gchar > key, Pointer<GtkLibrary.gchar > format_string, Object... varargs) {
		return Pointer.pointerToAddress(g_variant_lookup(Pointer.getPeer(dictionary), Pointer.getPeer(key), Pointer.getPeer(format_string), varargs), .class);
	}
	@Ptr 
	protected native static long g_variant_lookup(@Ptr long dictionary, @Ptr long key, @Ptr long format_string, Object... varargs);
	/**
	 * Original signature : <code>GVariant* g_variant_lookup_value(GVariant*, const gchar*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:186</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_lookup_value(Pointer<GtkLibrary.GVariant > dictionary, Pointer<GtkLibrary.gchar > key, Pointer<GtkLibrary.GVariantType > expected_type) {
		return Pointer.pointerToAddress(g_variant_lookup_value(Pointer.getPeer(dictionary), Pointer.getPeer(key), Pointer.getPeer(expected_type)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_lookup_value(@Ptr long dictionary, @Ptr long key, @Ptr long expected_type);
	/**
	 * Original signature : <code>gconstpointer g_variant_get_fixed_array(GVariant*, gsize*, gsize)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:190</i>
	 */
	public static GtkLibrary.gconstpointer g_variant_get_fixed_array(Pointer<GtkLibrary.GVariant > value, Pointer<gsize > n_elements, gsize element_size) {
		return Pointer.pointerToAddress(g_variant_get_fixed_array(Pointer.getPeer(value), Pointer.getPeer(n_elements), Pointer.getPeer(element_size)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_fixed_array(@Ptr long value, @Ptr long n_elements, @Ptr long element_size);
	/**
	 * Original signature : <code>gsize g_variant_get_size(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:195</i>
	 */
	public static gsize g_variant_get_size(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_size(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_size(@Ptr long value);
	/**
	 * Original signature : <code>gconstpointer g_variant_get_data(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:197</i>
	 */
	public static GtkLibrary.gconstpointer g_variant_get_data(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_data(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_get_data(@Ptr long value);
	/**
	 * Original signature : <code>GBytes* g_variant_get_data_as_bytes(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:199</i>
	 */
	public static Pointer<GtkLibrary.GBytes > g_variant_get_data_as_bytes(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_data_as_bytes(Pointer.getPeer(value)), GtkLibrary.GBytes.class);
	}
	@Ptr 
	protected native static long g_variant_get_data_as_bytes(@Ptr long value);
	/**
	 * Original signature : <code>void g_variant_store(GVariant*, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:201</i>
	 */
	public static void g_variant_store(Pointer<GtkLibrary.GVariant > value, GtkLibrary.gpointer data) {
		g_variant_store(Pointer.getPeer(value), Pointer.getPeer(data));
	}
	protected native static void g_variant_store(@Ptr long value, @Ptr long data);
	/**
	 * Original signature : <code>gchar* g_variant_print(GVariant*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:205</i>
	 */
	public static Pointer<GtkLibrary.gchar > g_variant_print(Pointer<GtkLibrary.GVariant > value, GtkLibrary.gboolean type_annotate) {
		return Pointer.pointerToAddress(g_variant_print(Pointer.getPeer(value), Pointer.getPeer(type_annotate)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long g_variant_print(@Ptr long value, @Ptr long type_annotate);
	/**
	 * Original signature : <code>GString* g_variant_print_string(GVariant*, GString*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:208</i>
	 */
	public static Pointer<GtkLibrary.GString > g_variant_print_string(Pointer<GtkLibrary.GVariant > value, Pointer<GtkLibrary.GString > string, GtkLibrary.gboolean type_annotate) {
		return Pointer.pointerToAddress(g_variant_print_string(Pointer.getPeer(value), Pointer.getPeer(string), Pointer.getPeer(type_annotate)), GtkLibrary.GString.class);
	}
	@Ptr 
	protected native static long g_variant_print_string(@Ptr long value, @Ptr long string, @Ptr long type_annotate);
	/**
	 * Original signature : <code>guint g_variant_hash(gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:213</i>
	 */
	public static guint g_variant_hash(GtkLibrary.gconstpointer value) {
		return Pointer.pointerToAddress(g_variant_hash(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_hash(@Ptr long value);
	/**
	 * Original signature : <code>gboolean g_variant_equal(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:215</i>
	 */
	public static GtkLibrary.gboolean g_variant_equal(GtkLibrary.gconstpointer one, GtkLibrary.gconstpointer two) {
		return Pointer.pointerToAddress(g_variant_equal(Pointer.getPeer(one), Pointer.getPeer(two)), .class);
	}
	@Ptr 
	protected native static long g_variant_equal(@Ptr long one, @Ptr long two);
	/**
	 * Original signature : <code>GVariant* g_variant_get_normal_form(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:219</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_get_normal_form(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_get_normal_form(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_get_normal_form(@Ptr long value);
	/**
	 * Original signature : <code>gboolean g_variant_is_normal_form(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:221</i>
	 */
	public static GtkLibrary.gboolean g_variant_is_normal_form(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_is_normal_form(Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_is_normal_form(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_byteswap(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:223</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_byteswap(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_byteswap(Pointer.getPeer(value)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_byteswap(@Ptr long value);
	/**
	 * Original signature : <code>GVariant* g_variant_new_from_bytes(const GVariantType*, GBytes*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:226</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_from_bytes(Pointer<GtkLibrary.GVariantType > type, Pointer<GtkLibrary.GBytes > bytes, GtkLibrary.gboolean trusted) {
		return Pointer.pointerToAddress(g_variant_new_from_bytes(Pointer.getPeer(type), Pointer.getPeer(bytes), Pointer.getPeer(trusted)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_from_bytes(@Ptr long type, @Ptr long bytes, @Ptr long trusted);
	/**
	 * Original signature : <code>GVariant* g_variant_new_from_data(const GVariantType*, gconstpointer, gsize, gboolean, GDestroyNotify, gpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:230</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_from_data(Pointer<GtkLibrary.GVariantType > type, GtkLibrary.gconstpointer data, gsize size, GtkLibrary.gboolean trusted, GtkLibrary.GDestroyNotify notify$, GtkLibrary.gpointer user_data) {
		return Pointer.pointerToAddress(g_variant_new_from_data(Pointer.getPeer(type), Pointer.getPeer(data), Pointer.getPeer(size), Pointer.getPeer(trusted), Pointer.getPeer(notify$), Pointer.getPeer(user_data)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_from_data(@Ptr long type, @Ptr long data, @Ptr long size, @Ptr long trusted, @Ptr long notify$, @Ptr long user_data);
	/**
	 * Original signature : <code>GVariantIter* g_variant_iter_new(GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:244</i>
	 */
	public static Pointer<GtkLibrary.GVariantIter > g_variant_iter_new(Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_iter_new(Pointer.getPeer(value)), GtkLibrary.GVariantIter.class);
	}
	@Ptr 
	protected native static long g_variant_iter_new(@Ptr long value);
	/**
	 * Original signature : <code>gsize g_variant_iter_init(GVariantIter*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:246</i>
	 */
	public static gsize g_variant_iter_init(Pointer<GtkLibrary.GVariantIter > iter, Pointer<GtkLibrary.GVariant > value) {
		return Pointer.pointerToAddress(g_variant_iter_init(Pointer.getPeer(iter), Pointer.getPeer(value)), .class);
	}
	@Ptr 
	protected native static long g_variant_iter_init(@Ptr long iter, @Ptr long value);
	/**
	 * Original signature : <code>GVariantIter* g_variant_iter_copy(GVariantIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:249</i>
	 */
	public static Pointer<GtkLibrary.GVariantIter > g_variant_iter_copy(Pointer<GtkLibrary.GVariantIter > iter) {
		return Pointer.pointerToAddress(g_variant_iter_copy(Pointer.getPeer(iter)), GtkLibrary.GVariantIter.class);
	}
	@Ptr 
	protected native static long g_variant_iter_copy(@Ptr long iter);
	/**
	 * Original signature : <code>gsize g_variant_iter_n_children(GVariantIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:251</i>
	 */
	public static gsize g_variant_iter_n_children(Pointer<GtkLibrary.GVariantIter > iter) {
		return Pointer.pointerToAddress(g_variant_iter_n_children(Pointer.getPeer(iter)), .class);
	}
	@Ptr 
	protected native static long g_variant_iter_n_children(@Ptr long iter);
	/**
	 * Original signature : <code>void g_variant_iter_free(GVariantIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:253</i>
	 */
	public static void g_variant_iter_free(Pointer<GtkLibrary.GVariantIter > iter) {
		g_variant_iter_free(Pointer.getPeer(iter));
	}
	protected native static void g_variant_iter_free(@Ptr long iter);
	/**
	 * Original signature : <code>GVariant* g_variant_iter_next_value(GVariantIter*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:255</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_iter_next_value(Pointer<GtkLibrary.GVariantIter > iter) {
		return Pointer.pointerToAddress(g_variant_iter_next_value(Pointer.getPeer(iter)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_iter_next_value(@Ptr long iter);
	/**
	 * Original signature : <code>gboolean g_variant_iter_next(GVariantIter*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:257</i>
	 */
	public static GtkLibrary.gboolean g_variant_iter_next(Pointer<GtkLibrary.GVariantIter > iter, Pointer<GtkLibrary.gchar > format_string, Object... varargs) {
		return Pointer.pointerToAddress(g_variant_iter_next(Pointer.getPeer(iter), Pointer.getPeer(format_string), varargs), .class);
	}
	@Ptr 
	protected native static long g_variant_iter_next(@Ptr long iter, @Ptr long format_string, Object... varargs);
	/**
	 * Original signature : <code>gboolean g_variant_iter_loop(GVariantIter*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:261</i>
	 */
	public static GtkLibrary.gboolean g_variant_iter_loop(Pointer<GtkLibrary.GVariantIter > iter, Pointer<GtkLibrary.gchar > format_string, Object... varargs) {
		return Pointer.pointerToAddress(g_variant_iter_loop(Pointer.getPeer(iter), Pointer.getPeer(format_string), varargs), .class);
	}
	@Ptr 
	protected native static long g_variant_iter_loop(@Ptr long iter, @Ptr long format_string, Object... varargs);
	/**
	 * Original signature : <code>GQuark g_variant_parser_get_error_quark()</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:296</i>
	 */
	public static GtkLibrary.GQuark g_variant_parser_get_error_quark() {
		return Pointer.pointerToAddress(g_variant_parser_get_error_quark$2(), .class);
	}
	@Ptr 
	protected native static long g_variant_parser_get_error_quark$2();
	/**
	 * Original signature : <code>GVariantBuilder* g_variant_builder_new(const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:299</i>
	 */
	public static Pointer<GtkLibrary.GVariantBuilder > g_variant_builder_new(Pointer<GtkLibrary.GVariantType > type) {
		return Pointer.pointerToAddress(g_variant_builder_new(Pointer.getPeer(type)), GtkLibrary.GVariantBuilder.class);
	}
	@Ptr 
	protected native static long g_variant_builder_new(@Ptr long type);
	/**
	 * Original signature : <code>void g_variant_builder_unref(GVariantBuilder*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:301</i>
	 */
	public static void g_variant_builder_unref(Pointer<GtkLibrary.GVariantBuilder > builder) {
		g_variant_builder_unref(Pointer.getPeer(builder));
	}
	protected native static void g_variant_builder_unref(@Ptr long builder);
	/**
	 * Original signature : <code>GVariantBuilder* g_variant_builder_ref(GVariantBuilder*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:303</i>
	 */
	public static Pointer<GtkLibrary.GVariantBuilder > g_variant_builder_ref(Pointer<GtkLibrary.GVariantBuilder > builder) {
		return Pointer.pointerToAddress(g_variant_builder_ref(Pointer.getPeer(builder)), GtkLibrary.GVariantBuilder.class);
	}
	@Ptr 
	protected native static long g_variant_builder_ref(@Ptr long builder);
	/**
	 * Original signature : <code>void g_variant_builder_init(GVariantBuilder*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:305</i>
	 */
	public static void g_variant_builder_init(Pointer<GtkLibrary.GVariantBuilder > builder, Pointer<GtkLibrary.GVariantType > type) {
		g_variant_builder_init(Pointer.getPeer(builder), Pointer.getPeer(type));
	}
	protected native static void g_variant_builder_init(@Ptr long builder, @Ptr long type);
	/**
	 * Original signature : <code>GVariant* g_variant_builder_end(GVariantBuilder*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:308</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_builder_end(Pointer<GtkLibrary.GVariantBuilder > builder) {
		return Pointer.pointerToAddress(g_variant_builder_end(Pointer.getPeer(builder)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_builder_end(@Ptr long builder);
	/**
	 * Original signature : <code>void g_variant_builder_clear(GVariantBuilder*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:310</i>
	 */
	public static void g_variant_builder_clear(Pointer<GtkLibrary.GVariantBuilder > builder) {
		g_variant_builder_clear(Pointer.getPeer(builder));
	}
	protected native static void g_variant_builder_clear(@Ptr long builder);
	/**
	 * Original signature : <code>void g_variant_builder_open(GVariantBuilder*, const GVariantType*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:312</i>
	 */
	public static void g_variant_builder_open(Pointer<GtkLibrary.GVariantBuilder > builder, Pointer<GtkLibrary.GVariantType > type) {
		g_variant_builder_open(Pointer.getPeer(builder), Pointer.getPeer(type));
	}
	protected native static void g_variant_builder_open(@Ptr long builder, @Ptr long type);
	/**
	 * Original signature : <code>void g_variant_builder_close(GVariantBuilder*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:315</i>
	 */
	public static void g_variant_builder_close(Pointer<GtkLibrary.GVariantBuilder > builder) {
		g_variant_builder_close(Pointer.getPeer(builder));
	}
	protected native static void g_variant_builder_close(@Ptr long builder);
	/**
	 * Original signature : <code>void g_variant_builder_add_value(GVariantBuilder*, GVariant*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:317</i>
	 */
	public static void g_variant_builder_add_value(Pointer<GtkLibrary.GVariantBuilder > builder, Pointer<GtkLibrary.GVariant > value) {
		g_variant_builder_add_value(Pointer.getPeer(builder), Pointer.getPeer(value));
	}
	protected native static void g_variant_builder_add_value(@Ptr long builder, @Ptr long value);
	/**
	 * Original signature : <code>void g_variant_builder_add(GVariantBuilder*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:320</i>
	 */
	public static void g_variant_builder_add(Pointer<GtkLibrary.GVariantBuilder > builder, Pointer<GtkLibrary.gchar > format_string, Object... varargs) {
		g_variant_builder_add(Pointer.getPeer(builder), Pointer.getPeer(format_string), varargs);
	}
	protected native static void g_variant_builder_add(@Ptr long builder, @Ptr long format_string, Object... varargs);
	/**
	 * Original signature : <code>void g_variant_builder_add_parsed(GVariantBuilder*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:324</i>
	 */
	public static void g_variant_builder_add_parsed(Pointer<GtkLibrary.GVariantBuilder > builder, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		g_variant_builder_add_parsed(Pointer.getPeer(builder), Pointer.getPeer(format), varargs);
	}
	protected native static void g_variant_builder_add_parsed(@Ptr long builder, @Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>GVariant* g_variant_new(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:329</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new(Pointer<GtkLibrary.gchar > format_string, Object... varargs) {
		return Pointer.pointerToAddress(g_variant_new(Pointer.getPeer(format_string), varargs), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new(@Ptr long format_string, Object... varargs);
	/**
	 * Original signature : <code>void g_variant_get(GVariant*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:332</i>
	 */
	public static void g_variant_get(Pointer<GtkLibrary.GVariant > value, Pointer<GtkLibrary.gchar > format_string, Object... varargs) {
		g_variant_get(Pointer.getPeer(value), Pointer.getPeer(format_string), varargs);
	}
	protected native static void g_variant_get(@Ptr long value, @Ptr long format_string, Object... varargs);
	/**
	 * Original signature : <code>GVariant* g_variant_new_va(const gchar*, const gchar**, va_list*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:336</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_va(Pointer<GtkLibrary.gchar > format_string, Pointer<Pointer<GtkLibrary.gchar > > endptr, Pointer<GtkLibrary.__builtin_va_list > app) {
		return Pointer.pointerToAddress(g_variant_new_va(Pointer.getPeer(format_string), Pointer.getPeer(endptr), Pointer.getPeer(app)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_va(@Ptr long format_string, @Ptr long endptr, @Ptr long app);
	/**
	 * Original signature : <code>void g_variant_get_va(GVariant*, const gchar*, const gchar**, va_list*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:340</i>
	 */
	public static void g_variant_get_va(Pointer<GtkLibrary.GVariant > value, Pointer<GtkLibrary.gchar > format_string, Pointer<Pointer<GtkLibrary.gchar > > endptr, Pointer<GtkLibrary.__builtin_va_list > app) {
		g_variant_get_va(Pointer.getPeer(value), Pointer.getPeer(format_string), Pointer.getPeer(endptr), Pointer.getPeer(app));
	}
	protected native static void g_variant_get_va(@Ptr long value, @Ptr long format_string, @Ptr long endptr, @Ptr long app);
	/**
	 * Original signature : <code>gboolean g_variant_check_format_string(GVariant*, const gchar*, gboolean)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:345</i>
	 */
	public static GtkLibrary.gboolean g_variant_check_format_string(Pointer<GtkLibrary.GVariant > value, Pointer<GtkLibrary.gchar > format_string, GtkLibrary.gboolean copy_only) {
		return Pointer.pointerToAddress(g_variant_check_format_string(Pointer.getPeer(value), Pointer.getPeer(format_string), Pointer.getPeer(copy_only)), .class);
	}
	@Ptr 
	protected native static long g_variant_check_format_string(@Ptr long value, @Ptr long format_string, @Ptr long copy_only);
	/**
	 * Original signature : <code>GVariant* g_variant_parse(const GVariantType*, const gchar*, const gchar*, const gchar**, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:350</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_parse(Pointer<GtkLibrary.GVariantType > type, Pointer<GtkLibrary.gchar > text, Pointer<GtkLibrary.gchar > limit, Pointer<Pointer<GtkLibrary.gchar > > endptr, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_variant_parse(Pointer.getPeer(type), Pointer.getPeer(text), Pointer.getPeer(limit), Pointer.getPeer(endptr), Pointer.getPeer(error)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_parse(@Ptr long type, @Ptr long text, @Ptr long limit, @Ptr long endptr, @Ptr long error);
	/**
	 * Original signature : <code>GVariant* g_variant_new_parsed(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:356</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_parsed(Pointer<GtkLibrary.gchar > format, Object... varargs) {
		return Pointer.pointerToAddress(g_variant_new_parsed(Pointer.getPeer(format), varargs), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_parsed(@Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>GVariant* g_variant_new_parsed_va(const gchar*, va_list*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:359</i>
	 */
	public static Pointer<GtkLibrary.GVariant > g_variant_new_parsed_va(Pointer<GtkLibrary.gchar > format, Pointer<GtkLibrary.__builtin_va_list > app) {
		return Pointer.pointerToAddress(g_variant_new_parsed_va(Pointer.getPeer(format), Pointer.getPeer(app)), GtkLibrary.GVariant.class);
	}
	@Ptr 
	protected native static long g_variant_new_parsed_va(@Ptr long format, @Ptr long app);
	/**
	 * Original signature : <code>gint g_variant_compare(gconstpointer, gconstpointer)</code><br>
	 * <i>native declaration : glib-2.0/glib/gvariant.h:363</i>
	 */
	public static GtkLibrary.gint g_variant_compare(GtkLibrary.gconstpointer one, GtkLibrary.gconstpointer two) {
		return Pointer.pointerToAddress(g_variant_compare(Pointer.getPeer(one), Pointer.getPeer(two)), .class);
	}
	@Ptr 
	protected native static long g_variant_compare(@Ptr long one, @Ptr long two);
	/**
	 * Original signature : <code>gchar* glib_check_version(guint, guint, guint)</code><br>
	 * <i>native declaration : glib-2.0/glib/gversion.h:10</i>
	 */
	public static Pointer<GtkLibrary.gchar > glib_check_version(guint required_major, guint required_minor, guint required_micro) {
		return Pointer.pointerToAddress(glib_check_version(Pointer.getPeer(required_major), Pointer.getPeer(required_minor), Pointer.getPeer(required_micro)), GtkLibrary.gchar.class);
	}
	@Ptr 
	protected native static long glib_check_version(@Ptr long required_major, @Ptr long required_minor, @Ptr long required_micro);
	/**
	 * Original signature : <code>gint g_printf(const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:4</i>
	 */
	public static GtkLibrary.gint g_printf(Pointer<GtkLibrary.gchar > format, Object... varargs) {
		return Pointer.pointerToAddress(g_printf(Pointer.getPeer(format), varargs), .class);
	}
	@Ptr 
	protected native static long g_printf(@Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>gint g_fprintf(FILE*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:7</i>
	 */
	public static GtkLibrary.gint g_fprintf(Pointer file, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		return Pointer.pointerToAddress(g_fprintf(Pointer.getPeer(file), Pointer.getPeer(format), varargs), .class);
	}
	@Ptr 
	protected native static long g_fprintf(@Ptr long file, @Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>gint g_sprintf(gchar*, const gchar*, null)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:11</i>
	 */
	public static GtkLibrary.gint g_sprintf(Pointer<GtkLibrary.gchar > string, Pointer<GtkLibrary.gchar > format, Object... varargs) {
		return Pointer.pointerToAddress(g_sprintf(Pointer.getPeer(string), Pointer.getPeer(format), varargs), .class);
	}
	@Ptr 
	protected native static long g_sprintf(@Ptr long string, @Ptr long format, Object... varargs);
	/**
	 * Original signature : <code>gint g_vprintf(const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:16</i>
	 */
	public static GtkLibrary.gint g_vprintf(Pointer<GtkLibrary.gchar > format, GtkLibrary.__builtin_va_list args) {
		return Pointer.pointerToAddress(g_vprintf(Pointer.getPeer(format), Pointer.getPeer(args)), .class);
	}
	@Ptr 
	protected native static long g_vprintf(@Ptr long format, @Ptr long args);
	/**
	 * Original signature : <code>gint g_vfprintf(FILE*, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:19</i>
	 */
	public static GtkLibrary.gint g_vfprintf(Pointer file, Pointer<GtkLibrary.gchar > format, GtkLibrary.__builtin_va_list args) {
		return Pointer.pointerToAddress(g_vfprintf(Pointer.getPeer(file), Pointer.getPeer(format), Pointer.getPeer(args)), .class);
	}
	@Ptr 
	protected native static long g_vfprintf(@Ptr long file, @Ptr long format, @Ptr long args);
	/**
	 * Original signature : <code>gint g_vsprintf(gchar*, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:23</i>
	 */
	public static GtkLibrary.gint g_vsprintf(Pointer<GtkLibrary.gchar > string, Pointer<GtkLibrary.gchar > format, GtkLibrary.__builtin_va_list args) {
		return Pointer.pointerToAddress(g_vsprintf(Pointer.getPeer(string), Pointer.getPeer(format), Pointer.getPeer(args)), .class);
	}
	@Ptr 
	protected native static long g_vsprintf(@Ptr long string, @Ptr long format, @Ptr long args);
	/**
	 * Original signature : <code>gint g_vasprintf(gchar**, const gchar*, va_list)</code><br>
	 * <i>native declaration : glib-2.0/glib/gprintf.h:27</i>
	 */
	public static GtkLibrary.gint g_vasprintf(Pointer<Pointer<GtkLibrary.gchar > > string, Pointer<GtkLibrary.gchar > format, GtkLibrary.__builtin_va_list args) {
		return Pointer.pointerToAddress(g_vasprintf(Pointer.getPeer(string), Pointer.getPeer(format), Pointer.getPeer(args)), .class);
	}
	@Ptr 
	protected native static long g_vasprintf(@Ptr long string, @Ptr long format, @Ptr long args);
	/**
	 * Original signature : <code>int g_access(const gchar*, int)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstdio.h:76</i>
	 */
	public static int g_access(Pointer<GtkLibrary.gchar > filename, int mode) {
		return g_access(Pointer.getPeer(filename), mode);
	}
	protected native static int g_access(@Ptr long filename, int mode);
	/**
	 * Original signature : <code>int g_chdir(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstdio.h:80</i>
	 */
	public static int g_chdir(Pointer<GtkLibrary.gchar > path) {
		return g_chdir(Pointer.getPeer(path));
	}
	protected native static int g_chdir(@Ptr long path);
	/**
	 * Original signature : <code>int g_unlink(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstdio.h:83</i>
	 */
	public static int g_unlink(Pointer<GtkLibrary.gchar > filename) {
		return g_unlink(Pointer.getPeer(filename));
	}
	protected native static int g_unlink(@Ptr long filename);
	/**
	 * Original signature : <code>int g_rmdir(const gchar*)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstdio.h:86</i>
	 */
	public static int g_rmdir(Pointer<GtkLibrary.gchar > filename) {
		return g_rmdir(Pointer.getPeer(filename));
	}
	protected native static int g_rmdir(@Ptr long filename);
	/**
	 * Original signature : <code>gboolean g_close(gint, GError**)</code><br>
	 * <i>native declaration : glib-2.0/glib/gstdio.h:163</i>
	 */
	public static GtkLibrary.gboolean g_close(GtkLibrary.gint fd, Pointer<Pointer<GError > > error) {
		return Pointer.pointerToAddress(g_close(Pointer.getPeer(fd), Pointer.getPeer(error)), .class);
	}
	@Ptr 
	protected native static long g_close(@Ptr long fd, @Ptr long error);
	/** Conversion Error : extern gboolean (failed to convert type to Java (undefined type)) */
	/** Conversion Error : extern GSourceFuncs (failed to convert type to Java (undefined type)) */
	/** Conversion Error : extern GSourceFuncs (failed to convert type to Java (undefined type)) */
	/** Conversion Error : extern GSourceFuncs (failed to convert type to Java (undefined type)) */
	/** Conversion Error : extern GSourceFuncs (failed to convert type to Java (undefined type)) */
	/** Conversion Error : extern GSourceFuncs (failed to convert type to Java (undefined type)) */
	/** Conversion Error : extern GSourceFuncs (failed to convert type to Java (undefined type)) */
	/** Conversion Error : extern const guint (failed to convert type to Java (undefined type)) */
	/** Conversion Error : extern const guint (failed to convert type to Java (undefined type)) */
	/** Conversion Error : extern const guint (failed to convert type to Java (undefined type)) */
	/** Conversion Error : extern const guint (failed to convert type to Java (undefined type)) */
	/** Conversion Error : extern const guint (failed to convert type to Java (undefined type)) */
	/** Undefined type */
	public static interface GByteArray {
		
	};
	/** Undefined type */
	public static interface GChecksum {
		
	};
	/** Undefined type */
	public static interface GNodeForeachFunc {
		
	};
	/** Undefined type */
	public static interface guint64 {
		
	};
	/** Undefined type */
	public static interface gpointer {
		
	};
	/** Undefined type */
	public static interface GDateDay {
		
	};
	/** Undefined type */
	public static interface GSequence {
		
	};
	/** Undefined type */
	public static interface GUnicodeScript {
		
	};
	/** Undefined type */
	public static interface GTestLogMsg {
		
	};
	/** Undefined type */
	public static interface GMarkupParseFlags {
		
	};
	/** Undefined type */
	public static interface gunichar {
		
	};
	/** Undefined type */
	public static interface GTestTrapFlags {
		
	};
	/** Undefined type */
	public static interface GPtrArray {
		
	};
	/** Undefined type */
	public static interface GOnce {
		
	};
	/** Undefined type */
	public static interface GDateYear {
		
	};
	/** Undefined type */
	public static interface GSequenceIterCompareFunc {
		
	};
	/** Undefined type */
	public static interface GTraverseFunc {
		
	};
	/** Undefined type */
	public static interface GRegexCompileFlags {
		
	};
	/** Undefined type */
	public static interface GHashFunc {
		
	};
	/** Undefined type */
	public static interface GTestFunc {
		
	};
	/** Undefined type */
	public static interface GBookmarkFile {
		
	};
	/** Undefined type */
	public static interface GCopyFunc {
		
	};
	/** Undefined type */
	public static interface GHookCompareFunc {
		
	};
	/** Undefined type */
	public static interface GQueue {
		
	};
	/** Undefined type */
	public static interface GSourcePrivate {
		
	};
	/** Undefined type */
	public static interface GIOFunc {
		
	};
	/** Undefined type */
	public static interface GThread {
		
	};
	/** Undefined type */
	public static interface GHmac {
		
	};
	/** Undefined type */
	public static interface GPollFD {
		
	};
	/** Undefined type */
	public static interface GDateTime {
		
	};
	/** Undefined type */
	public static interface GTestLogType {
		
	};
	/** Undefined type */
	public static interface GMappedFile {
		
	};
	/** Undefined type */
	public static interface GAsyncQueue {
		
	};
	/** Undefined type */
	public static interface GTestSubprocessFlags {
		
	};
	/** Undefined type */
	public static interface GSpawnChildSetupFunc {
		
	};
	/** Undefined type */
	public static interface gdouble {
		
	};
	/** Undefined type */
	public static interface GPollFunc {
		
	};
	/** Undefined type */
	public static interface GLogLevelFlags {
		
	};
	/** Undefined type */
	public static interface GNormalizeMode {
		
	};
	/** Undefined type */
	public static interface GUserDirectory {
		
	};
	/** Undefined type */
	public static interface GRWLock {
		
	};
	/** Undefined type */
	public static interface GMainLoop {
		
	};
	/** Undefined type */
	public static interface gchar {
		
	};
	/** Undefined type */
	public static interface gssize {
		
	};
	/** Undefined type */
	public static interface GIOFuncs {
		
	};
	/** Undefined type */
	public static interface GSourceCallbackFuncs {
		
	};
	/** Undefined type */
	public static interface gint16 {
		
	};
	/** Undefined type */
	public static interface GOnceStatus {
		
	};
	/** Undefined type */
	public static interface GMutex {
		
	};
	/** Undefined type */
	public static interface GPatternSpec {
		
	};
	/** Undefined type */
	public static interface GOptionGroup {
		
	};
	/** Undefined type */
	public static interface GTraverseType {
		
	};
	/** Undefined type */
	public static interface GTree {
		
	};
	/** Undefined type */
	public static interface GFunc {
		
	};
	/** Undefined type */
	public static interface GFileTest {
		
	};
	/** Undefined type */
	public static interface GTestSuite {
		
	};
	/** Undefined type */
	public static interface GTime {
		
	};
	/** Undefined type */
	public static interface GCompareDataFunc {
		
	};
	/** Undefined type */
	public static interface GHookMarshaller {
		
	};
	/** Undefined type */
	public static interface GList {
		
	};
	/** Undefined type */
	public static interface GMatchInfo {
		
	};
	/** Undefined type */
	public static interface GFormatSizeFlags {
		
	};
	/** Undefined type */
	public static interface GRegex {
		
	};
	/** Undefined type */
	public static interface GFileError {
		
	};
	/** Undefined type */
	public static interface GRecMutex {
		
	};
	/** Undefined type */
	public static interface GDateMonth {
		
	};
	/** Undefined type */
	public static interface GDebugKey {
		
	};
	/** Undefined type */
	public static interface GHook {
		
	};
	/** Undefined type */
	public static interface GTestFixtureFunc {
		
	};
	/** Undefined type */
	public static interface GHookCheckMarshaller {
		
	};
	/** Undefined type */
	public static interface GIOError {
		
	};
	/** Undefined type */
	public static interface GVariantClass {
		
	};
	/** Undefined type */
	public static interface GScanner {
		
	};
	/** Undefined type */
	public static interface GOptionErrorFunc {
		
	};
	/** Undefined type */
	public static interface GLogFunc {
		
	};
	/** Undefined type */
	public static interface GSList {
		
	};
	/** Undefined type */
	public static interface gconstpointer {
		
	};
	/** Undefined type */
	public static interface GVariantBuilder {
		
	};
	/** Undefined type */
	public static interface guchar {
		
	};
	/** Undefined type */
	public static interface gint {
		
	};
	/** Undefined type */
	public static interface gboolean {
		
	};
	/** Undefined type */
	public static interface GTokenType {
		
	};
	/** Undefined type */
	public static interface GIOChannelError {
		
	};
	/** Undefined type */
	public static interface GSpawnFlags {
		
	};
	/** Undefined type */
	public static interface guint8 {
		
	};
	/** Undefined type */
	public static interface GMarkupParser {
		
	};
	/** Undefined type */
	public static interface GSliceConfig {
		
	};
	/** Undefined type */
	public static interface GDateWeekday {
		
	};
	/** Undefined type */
	public static interface GScannerConfig {
		
	};
	/** Undefined type */
	public static interface glong {
		
	};
	/** Undefined type */
	public static interface GDir {
		
	};
	/** Undefined type */
	public static interface GRegexEvalCallback {
		
	};
	/** Undefined type */
	public static interface GVoidFunc {
		
	};
	/** Undefined type */
	public static interface GChecksumType {
		
	};
	/** Undefined type */
	public static interface GTestLogFatalFunc {
		
	};
	/** Undefined type */
	public static interface GRegexMatchFlags {
		
	};
	/** Undefined type */
	public static interface GData {
		
	};
	/** Undefined type */
	public static interface gfloat {
		
	};
	/** Undefined type */
	public static interface GVariantType {
		
	};
	/** Undefined type */
	public static interface GDate {
		
	};
	/** Undefined type */
	public static interface GTimeVal {
		
	};
	/** Undefined type */
	public static interface GVariantIter {
		
	};
	/** Undefined type */
	public static interface GMarkupCollectType {
		
	};
	/** Undefined type */
	public static interface GTestFileType {
		
	};
	/** Undefined type */
	public static interface GCompareFunc {
		
	};
	/** Undefined type */
	public static interface guint16 {
		
	};
	/** Undefined type */
	public static interface GHookList {
		
	};
	/** Undefined type */
	public static interface GScannerMsgFunc {
		
	};
	/** Undefined type */
	public static interface GStringChunk {
		
	};
	/** Undefined type */
	public static interface GCond {
		
	};
	/** Undefined type */
	public static interface GTimer {
		
	};
	/** Undefined type */
	public static interface GKeyFileFlags {
		
	};
	/** Undefined type */
	public static interface GHashTable {
		
	};
	/** Undefined type */
	public static interface GHashTableIter {
		
	};
	/** Undefined type */
	public static interface GSourceFuncs {
		
	};
	/** Undefined type */
	public static interface GTestDataFunc {
		
	};
	/** Undefined type */
	public static interface GVariant {
		
	};
	/** Undefined type */
	public static interface GQuark {
		
	};
	/** Undefined type */
	public static interface GThreadPool {
		
	};
	/** Undefined type */
	public static interface GOptionArg {
		
	};
	/** Undefined type */
	public static interface GPrivate {
		
	};
	/** Undefined type */
	public static interface GTraverseFlags {
		
	};
	/** Undefined type */
	public static interface GTimeZone {
		
	};
	/** Undefined type */
	public static interface __builtin_va_list {
		
	};
	/** Undefined type */
	public static interface GTokenValue {
		
	};
	/** Undefined type */
	public static interface GMainContext {
		
	};
	/** Undefined type */
	public static interface GSourceDummyMarshal {
		
	};
	/** Undefined type */
	public static interface GTrashStack {
		
	};
	/** Undefined type */
	public static interface gushort {
		
	};
	/** Undefined type */
	public static interface GMemVTable {
		
	};
	/** Undefined type */
	public static interface GPrintFunc {
		
	};
	/** Undefined type */
	public static interface GUnicodeType {
		
	};
	/** Undefined type */
	public static interface GTimeSpan {
		
	};
	/** Undefined type */
	public static interface GBytes {
		
	};
	/** Undefined type */
	public static interface GThreadFunc {
		
	};
	/** Undefined type */
	public static interface GKeyFile {
		
	};
	/** Undefined type */
	public static interface GOptionEntry {
		
	};
	/** Undefined type */
	public static interface GOptionContext {
		
	};
	/** Undefined type */
	public static interface GHookFinalizeFunc {
		
	};
	/** Undefined type */
	public static interface gunichar2 {
		
	};
	/** Undefined type */
	public static interface GArray {
		
	};
	/** Undefined type */
	public static interface GDataForeachFunc {
		
	};
	/** Undefined type */
	public static interface GNodeTraverseFunc {
		
	};
	/** Undefined type */
	public static interface GEqualFunc {
		
	};
	/** Undefined type */
	public static interface GTranslateFunc {
		
	};
	/** Undefined type */
	public static interface guint32 {
		
	};
	/** Undefined type */
	public static interface GTestLogBuffer {
		
	};
	/** Undefined type */
	public static interface GDestroyNotify {
		
	};
	/** Undefined type */
	public static interface GDuplicateFunc {
		
	};
	/** Undefined type */
	public static interface GNode {
		
	};
	/** Undefined type */
	public static interface GSequenceIter {
		
	};
	/** Undefined type */
	public static interface GChildWatchFunc {
		
	};
	/** Undefined type */
	public static interface GIConv {
		
	};
	/** Undefined type */
	public static interface GTimeType {
		
	};
	/** Undefined type */
	public static interface GOptionParseFunc {
		
	};
	/** Undefined type */
	public static interface GRand {
		
	};
	/** Undefined type */
	public static interface GString {
		
	};
	/** Undefined type */
	public static interface GHookFindFunc {
		
	};
	/** Undefined type */
	public static interface GTestCase {
		
	};
	/** Undefined type */
	public static interface goffset {
		
	};
	/** Undefined type */
	public static interface gulong {
		
	};
	/** Undefined type */
	public static interface GHRFunc {
		
	};
	/** Undefined type */
	public static interface GHFunc {
		
	};
	/** Undefined type */
	public static interface GPid {
		
	};
	/** Undefined type */
	public static interface gint32 {
		
	};
	/** Undefined type */
	public static interface GSource {
		
	};
	/** Undefined type */
	public static interface GUnicodeBreakType {
		
	};
}
